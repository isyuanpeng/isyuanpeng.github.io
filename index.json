[{"content":"深入理解ClassLoader 是什么? 相信大家在准备面试的时候都会背过Java的类加载机制，双亲委派模型。\n就是当JVM收到一个类加载请求的时候，当前的类加载器首先会将类加载器传递给它的父类，父类尝试加载，如果失败继续向上传递，如果所有的父类都无法加载，则当前类加载器自己处理。\n那这段话理解起来还是比较容易的，但是具体是如何做的呢？下面进行分析。\n为什么? 那为什么要使用双亲委派模型吗？当前类加载器自己处理不行吗？\n如果我们自己写了一个java.lang.Object类的话，那当前的类加载器直接选择加载的话，那加载的类中就会有两个一样的Object类。应用程序将会变的非常混乱。\n怎么做? 下面从源码开始看Java是如何进行类加载的。\nClassLoader 介绍 先进入ClassLoader类中public abstract class ClassLoader， 可以先看一下doc，介绍了ClassLoader这个类，\nA class loader is an object that is responsible for loading classes. The class ClassLoader is an abstract class. Given the binary name of a class, a class loader should attempt to locate or generate data that constitutes a definition for the class. A typical strategy is to transform the name into a file name and then read a \u0026ldquo;class file\u0026rdquo; of that name from a file system.\n大意就是说\u0026quot;一个class loader是一个负责加载class的对象。ClassLoader是一个抽象类。给定一个类的二进制名称，一个class loader应该试图去定位或者生成构成类定义的数据。一个典型的策略是转换类名称为文件名称，然后从文件系统上读取一个叫这个名字的class文件\u0026quot;。\n整体还是比较明了的，就是为了加载class的，并且也说了典型的做法就是去文件系统去加载同名的class文件。\n在 doc 中还说了，ClassLoader 是支持并行的，后面遗弃看一下是如何支持的。\nClass loaders that support concurrent loading of classes are known as parallel capable class\n还有就是ClassLoader的分类，在doc中一共分为了三类:\nBootstrap class loader: 启动类加载器，涉及虚拟机的，比较典型的是null Platform class loader: jdk相关的class System class loader: 也叫application class loader，platform class loader是它的祖先，一般是加载应用classpath的class 流程 整个类中最重要的就是loadClass()方法了，咱们来逐行解析。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 protected Class\u0026lt;?\u0026gt; loadClass(String name, boolean resolve) throws ClassNotFoundException { synchronized (getClassLoadingLock(name)) { // First, check if the class has already been loaded Class\u0026lt;?\u0026gt; c = findLoadedClass(name); if (c == null) { long t0 = System.nanoTime(); try { if (parent != null) { c = parent.loadClass(name, false); } else { c = findBootstrapClassOrNull(name); } } catch (ClassNotFoundException e) { // ClassNotFoundException thrown if class not found // from the non-null parent class loader } if (c == null) { // If still not found, then invoke findClass in order // to find the class. long t1 = System.nanoTime(); c = findClass(name); // this is the defining class loader; record the stats PerfCounter.getParentDelegationTime().addTime(t1 - t0); PerfCounter.getFindClassTime().addElapsedTimeFrom(t1); PerfCounter.getFindClasses().increment(); } } if (resolve) { resolveClass(c); } return c; } } 方法的入参为name和resolve，name刚刚在介绍里面已经说了，就是通过类名称去加载类的；那resolve标志如果为true，则找到类后需要去处理类，这里的处理doc上写的是Links the specified class.，link在这里就是类加载过程中的第二阶段，链接，这一阶段就是验证、准备和解析类。\nsynchronized (getClassLoadingLock(name))第一行是一个同步块，\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 // Maps class name to the corresponding lock object when the current // class loader is parallel capable. // Note: VM also uses this field to decide if the current class loader // is parallel capable and the appropriate lock object for class loading. private final ConcurrentHashMap\u0026lt;String, Object\u0026gt; parallelLockMap; private ClassLoader(Void unused, String name, ClassLoader parent) { this.name = name; this.parent = parent; this.unnamedModule = new Module(this); if (ParallelLoaders.isRegistered(this.getClass())) { parallelLockMap = new ConcurrentHashMap\u0026lt;\u0026gt;(); assertionLock = new Object(); } else { // no finer-grained lock; lock on the classloader instance parallelLockMap = null; assertionLock = this; } this.package2certs = new ConcurrentHashMap\u0026lt;\u0026gt;(); this.nameAndId = nameAndId(this); } protected Object getClassLoadingLock(String className) { Object lock = this; if (parallelLockMap != null) { Object newLock = new Object(); lock = parallelLockMap.putIfAbsent(className, newLock); if (lock == null) { lock = newLock; } } return lock; } 从上面有关getClassLoadingLock的代码里面可以看到： + getClassLoadingLock(className)，判断parallelLockMap是否为null，如果不为null，则获取一个锁对象 + parallelLockMap在ClassLoader的构造器里被初始化 + ParallelLoaders有一个register方法，register(Class\u0026lt;? extends ClassLoader\u0026gt; c)用来注册可并行的ClassLoader + 如果当前的ClassLoader在ParallelLoaders中注册了，则说明该类支持并行，初始化的时候创建一个ConcurrentHashMap + 回到第一点，如果parallelLockMap不为null，说明当前类加载器支持并行，加锁\n总的来说，就是判断当前类加载器是否支持并行，如果支持，上锁，不支持，返回本类。\nClass\u0026lt;?\u0026gt; c = findLoadedClass(name);检查当前类是否已经加载过，一个native的方法去执行\n下面的流程就是委派流程了，如果父类不为null，先让父类去loadClass，否则让启动类去load，如果还没找到就由本类去findClass(name)，这个就是由类加载器自己去实现了。\n","permalink":"https://isyuanpeng.github.io/posts/tech/classloader/","summary":"\u003ch2 id=\"深入理解classloader\"\u003e深入理解ClassLoader\u003c/h2\u003e\n\u003ch3 id=\"是什么\"\u003e是什么?\u003c/h3\u003e\n\u003cp\u003e相信大家在准备面试的时候都会背过Java的类加载机制，双亲委派模型。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e就是当JVM收到一个类加载请求的时候，当前的类加载器首先会将类加载器传递给它的父类，父类尝试加载，如果失败继续向上传递，如果所有的父类都无法加载，则当前类加载器自己处理。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e那这段话理解起来还是比较容易的，但是具体是如何做的呢？下面进行分析。\u003c/p\u003e\n\u003ch3 id=\"为什么\"\u003e为什么?\u003c/h3\u003e\n\u003cp\u003e那为什么要使用双亲委派模型吗？当前类加载器自己处理不行吗？\u003c/p\u003e\n\u003cp\u003e如果我们自己写了一个\u003ccode\u003ejava.lang.Object\u003c/code\u003e类的话，那当前的类加载器直接选择加载的话，那加载的类中就会有两个一样的Object类。应用程序将会变的非常混乱。\u003c/p\u003e\n\u003ch3 id=\"怎么做\"\u003e怎么做?\u003c/h3\u003e\n\u003cp\u003e下面从源码开始看Java是如何进行类加载的。\u003c/p\u003e\n\u003ch4 id=\"classloader\"\u003eClassLoader\u003c/h4\u003e\n\u003ch5 id=\"介绍\"\u003e介绍\u003c/h5\u003e\n\u003cp\u003e先进入ClassLoader类中\u003ccode\u003epublic abstract class ClassLoader\u003c/code\u003e， 可以先看一下doc，介绍了ClassLoader这个类，\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA class loader is an object that is responsible for loading classes. The class ClassLoader is an abstract class. Given the binary name of a class, a class loader should attempt to locate or generate data that constitutes a definition for the class. A typical strategy is to transform the name into a file name and then read a \u0026ldquo;class file\u0026rdquo; of that name from a file system.\u003c/p\u003e","title":"ClassLoader"},{"content":"5000块打造极致实用的全屋智能(一)-网络篇 在新房最初装修时，就已经想好了家里要做智能家居，并且由于预算比较低，所以整体除了水电希望能够5000块钱完成自己想要的效果。\n需求 先看一下我们家的整体的装修划分区域：\n那在前期的设想中，整体还是以灯的自动控制和语音控制为主，我自己也没有什么花里胡哨的需求，\n我比较在意的有：\n晚上下班开门后玄关灯自动亮起，客厅的窗帘拉上。 通往走廊的灯可以随着人走进自动亮起，离开后自动熄灭。 次卫干区的灯随着人走入自动亮起，离开后自动熄灭。 厨房的灯随着人进入自动亮起，离开后自动熄灭。 主卧走廊的灯随着人进入自动亮起，离开后自动熄灭。 主次卫的灯随着人进入自动亮起，离开后自动熄灭。 晚上睡觉后全屋的灯光，窗帘都处于关闭状态。 整体的生态要求米家+homekit双平台 我不在意的是:\n全屋的灯光色温可以调整，因为我之前用的智能灯除了安装好后调整色温，之后再也没有调整过。 各种各样的灯带，灯带对于我来说一直不感冒，越简单越好，复杂就会导致各种各样的问题。 网络搭建 装修初期，首先会进行改水电，那强电最主要的预留零线和开关插座就不用多说了，弱电就比较复杂了，需要自己根据自身的情况简单设计一下。\n现在市面上的解决方案基本上都是全屋wifi，也就是每个重要房间出一根网线，然后后期用全屋wifi的面板，就是86盒子大小的面板，拥有wifi的能力。这种方式是目前主流的，已经经过验证了，但是对于我来说有几点问题：\n太贵了，一个面板就要两三百，再加上poe供电的路由器，整体可能在1500-2000块钱左右，如果钱都花在这上面，那后续的智能家居购买的空间就比较局促了。 散热问题，据说发热比较严重。 那对我来说，我的方案就是，在客厅和主卧房间放置路由器，因为我家里面闲置路由器比较多，能找出来两台红米ax3000，所以就想到在两个相隔比较远的房间放置路由器，进行mesh组网，目前路由器已经是搭建完毕，整体还是全屋都能覆盖的。\n弱电箱 弱电箱我没有选择改位置，改位置需要多花钱，依然是放在玄关鞋柜的下面，弱电箱里面一共放了两个设备，光猫+软路由，光猫桥接，软路由拨号控制整个屋子的网络。\n网络拓扑图 目前的网络就是这样了，自己还挺满意的，后面如果有问题的话再进行修改的。\n","permalink":"https://isyuanpeng.github.io/posts/life/home-network/","summary":"\u003ch1 id=\"5000块打造极致实用的全屋智能一-网络篇\"\u003e5000块打造极致实用的全屋智能(一)-网络篇\u003c/h1\u003e\n\u003cp\u003e在新房最初装修时，就已经想好了家里要做智能家居，并且由于预算比较低，所以整体除了水电希望能够5000块钱完成自己想要的效果。\u003c/p\u003e\n\u003ch2 id=\"需求\"\u003e需求\u003c/h2\u003e\n\u003cp\u003e先看一下我们家的整体的装修划分区域：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"http://no1.isyuanpeng.xyz:10082/i/2024/12/15/675ef83388a34.png\" alt=\"home-area\"  title=\"Home Area\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e那在前期的设想中，整体还是以灯的自动控制和语音控制为主，我自己也没有什么花里胡哨的需求，\u003c/p\u003e\n\u003cp\u003e我比较在意的有：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e晚上下班开门后玄关灯自动亮起，客厅的窗帘拉上。\u003c/li\u003e\n\u003cli\u003e通往走廊的灯可以随着人走进自动亮起，离开后自动熄灭。\u003c/li\u003e\n\u003cli\u003e次卫干区的灯随着人走入自动亮起，离开后自动熄灭。\u003c/li\u003e\n\u003cli\u003e厨房的灯随着人进入自动亮起，离开后自动熄灭。\u003c/li\u003e\n\u003cli\u003e主卧走廊的灯随着人进入自动亮起，离开后自动熄灭。\u003c/li\u003e\n\u003cli\u003e主次卫的灯随着人进入自动亮起，离开后自动熄灭。\u003c/li\u003e\n\u003cli\u003e晚上睡觉后全屋的灯光，窗帘都处于关闭状态。\u003c/li\u003e\n\u003cli\u003e整体的生态要求米家+homekit双平台\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e我不在意的是:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e全屋的灯光色温可以调整，因为我之前用的智能灯除了安装好后调整色温，之后再也没有调整过。\u003c/li\u003e\n\u003cli\u003e各种各样的灯带，灯带对于我来说一直不感冒，越简单越好，复杂就会导致各种各样的问题。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"网络搭建\"\u003e网络搭建\u003c/h2\u003e\n\u003cp\u003e装修初期，首先会进行改水电，那强电最主要的预留零线和开关插座就不用多说了，弱电就比较复杂了，需要自己根据自身的情况简单设计一下。\u003c/p\u003e\n\u003cp\u003e现在市面上的解决方案基本上都是全屋wifi，也就是每个重要房间出一根网线，然后后期用全屋wifi的面板，就是86盒子大小的面板，拥有wifi的能力。这种方式是目前主流的，已经经过验证了，但是对于我来说有几点问题：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e太贵了，一个面板就要两三百，再加上poe供电的路由器，整体可能在1500-2000块钱左右，如果钱都花在这上面，那后续的智能家居购买的空间就比较局促了。\u003c/li\u003e\n\u003cli\u003e散热问题，据说发热比较严重。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e那对我来说，我的方案就是，在客厅和主卧房间放置路由器，因为我家里面闲置路由器比较多，能找出来两台红米ax3000，所以就想到在两个相隔比较远的房间放置路由器，进行mesh组网，目前路由器已经是搭建完毕，整体还是全屋都能覆盖的。\u003c/p\u003e\n\u003ch3 id=\"弱电箱\"\u003e弱电箱\u003c/h3\u003e\n\u003cp\u003e弱电箱我没有选择改位置，改位置需要多花钱，依然是放在玄关鞋柜的下面，弱电箱里面一共放了两个设备，光猫+软路由，光猫桥接，软路由拨号控制整个屋子的网络。\u003c/p\u003e\n\u003ch3 id=\"网络拓扑图\"\u003e网络拓扑图\u003c/h3\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"http://no1.isyuanpeng.xyz:10082/i/2024/12/15/675ef83388a34.png\" alt=\"home-network\"  title=\"Home Network\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e目前的网络就是这样了，自己还挺满意的，后面如果有问题的话再进行修改的。\u003c/p\u003e","title":"Home Network"},{"content":"开源github项目 后面可能会用到。\n人脸识别 CompareFace：https://github.com/exadel-inc/CompreFace?tab=readme-ov-file ","permalink":"https://isyuanpeng.github.io/posts/other/github-project/","summary":"\u003ch2 id=\"开源github项目\"\u003e开源github项目\u003c/h2\u003e\n\u003cp\u003e后面可能会用到。\u003c/p\u003e\n\u003ch3 id=\"人脸识别\"\u003e人脸识别\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eCompareFace：https://github.com/exadel-inc/CompreFace?tab=readme-ov-file\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"heading\"\u003e\u003c/h3\u003e","title":"Github Project"},{"content":"一个基于Quic协议的Http转Udp代理工具 背景 某地存在A和B两个网络，A中搭建了上级平台，用户平时正常办公使用该平台。B搭建了下级平台，接入设备。\n两个网络的边界端口映射有一个唯一的限制：两个网络之间端口映射只能映射Udp的端口\n现在B网中的设备想要接入A网，B网中的设备接入基本上都是http请求，所以整体的对接只需要对接http请求。\n探索 针对该问题，进行相关的预研探索。目前已有的条件就是udp通道的边界，那么实现该目标的办法就是利用该udp通道去传输http请求，也就是说要开发http-udp，udp-http的代理工具。\nTCP和UDP\n处在TCP/IP模型的传输层中，传输控制协议TCP和用户数据报协议UDP TCP可靠，UDP不可靠 Http\n处在TCP/IP模型的应用层中，基于tcp协议的应用 上述的概念比较清晰，其中也暴露了一个非常关键的点，TCP可靠，UDP不可靠。我们都知道tcp的三次握手和四次挥手，tcp是面向连接的协议，通过严格的确认连接来保证整个连接的正常通信。而udp面向非连接，不需要维护连接状态，只需要交付报文即可。\n经过一些了解后，如果要开发一个http和udp互相转换的代理工具，主要需要解决以下的问题：\nUdp不可靠，存在丢包的情况 Udp有报文大小限制，1480bytes Udp不保证数据顺序 对于一个网络方面的小白来说，想要独自开发上述代理工具至少需要半年起步。\n既然从0开发需要耗时太长，那么就需要找目前已经存在的代理工具，经过搜索发现相关内容少之又少。\n在一次偶然的搜索中发现http3.0是基于Quic协议开发，而Quic协议又是基于udp的，那么似乎找到了一丝问题解决的可能性。\nHTTP/3 \u0026amp; Quic HTTP/3 is the third major version of the Hypertext Transfer Protocol used to exchange information on the World Wide Web, complementing the widely-deployed HTTP/1.1 and HTTP/2. Unlike previous versions which relied on the well-established TCP (published in 1974),[2] HTTP/3 uses QUIC, a multiplexed transport protocol built on UDP.[3] On 6 June 2022, IETF published HTTP/3 as a Proposed Standard in RFC 9114.[4]\n通过维基百科我们可以了解到HTTP3使用一种基于UDP多路复用的QUIC协议，同时它也实现了Http/1.1和Http/2。\n通过协议栈我们可以发现，QUIC = HTTP/2 + TLS + UDP。\nQuic协议是由google设计的，全称Quick UDP Internet Connections，由于目前互联网中大量的存量设备都是使用的Http协议，所以并没有继续在tcp协议上进行大的改动升级Http，而是使用了全新的Udp来完成Http。\nHTTP/3的开源实现 HTTP/3的开源实现并不多，主要C++，C#，Go，Rust语言上，其中目前使用最为广泛的应该是Cloudflare的quiche(https://github.com/cloudflare/quiche)，\n其实在看到很多quick的实际应用，都是针对某个单体网站去进行http3的应用。\n初次尝试 quiche-nginx 看了一些项目，初步的一个想法我在两个网络部署支持http3的nginx，然后通过nginx转发请求达到代理的效果。\nquiche的nginx版本需要在nginx1.16.1版本上打quiche http3的patch，然后重新编译nginx，此次尝试耗时很久，实际结果却不尽如人意，整个编译链需要的很多库都需要联网下载，内网离线安装费时费力。编译完成后开启http3配置也接收不到请求。此次尝试以失败告终。\n同时也在思考，就算该种方法成功，后期交付和维护也是很大的问题，将会浪费很多时间。\n再次尝试 kwik 由于本人是Java开发，考虑到整个部门也是Java居多，如果用Java实现，后期维护比较方便。而且以组件的形式开发，交付和复用也比较方便。基于这样的考虑，进行了第二次的尝试，Http3的Java开源实现kwik(https://github.com/ptrd/kwik)。\n这次的尝试就比较顺畅了，由于已经使用udp测试工具测试过udp通道的正常，而且kwik中已经实现好了client端和server端，所以只需要在B网络部署serevr端的jar包，A网络用client端的jar包去调用即可。\nkwik的server端内置了一个/getVersion的接口，在A网络用client去调用B网络server端的/getVersion请求，成功进行了返回。\n随后又在server写死了一个平台侧的请求，继续调用，也成功进行了返回。在完成测试后，下面开始准备魔改kwik，让其满足我们的业务需求。\nKwik kwik-client kwik只实现了quick协议，对于如何使用需要自行定义。\n那这里我们作为一个http的代理工具，client端要进行的定制也是非常清晰明了，起一个Http的服务器接收请求，针对每个请求，http协议转quic协议，使用kwik client去调用即可。\n有了整体的实现逻辑，那么代码实现起来也比较简单，这里看一些关键的代码:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 //1. 创建一个HttpServer实例，并绑定到指定的端口号 HttpServer httpServer = HttpServer.create(new InetSocketAddress(listenPort), 0); httpServer.createContext(\u0026#34;/\u0026#34;, customHttpHandler); httpServer.start(); // 2. 创建自定义的HttpHandler 完成http协议到quic协议的转换 QuicClientConnection.Builder builder = QuicClientConnection.newBuilder(); // 这里的serverIp 和 serverPort为kwik-server的ip和port builder.uri(new URI(\u0026#34;//\u0026#34; + serverIp + \u0026#34;:\u0026#34; + serverPort)); QuicClientConnection quicConnection = builder.build(); HttpClient httpClient = createHttpClient(quicConnection, false); HttpRequest.Builder httpBuilder = HttpRequest.newBuilder(); HttpRequest httpRequest = httpBuilder.GET().build(); // 3. 调用kwik-server, 返回的请求统一用String去接, 针对某些特殊请求,图片等 server端使用转base64返回, 这里拿到String方便解base64 HttpResponse\u0026lt;String\u0026gt; httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString()); // 4. ... 省略一些处理 // 5. 写回返回流 OutputStream outputStream = exchange.getResponseBody(); outputStream.write(responseBytes); outputStream.close(); 至此，完成了client侧的定制。\nkwik-server 那么对于server端，我们的定制内容也是比较清晰，kwik-client端发送来的请求，quic协议转http协议，然后调用平台的接口，返回结果接口。\n下面看一些核心的代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // 1. 开启一个quic connections，在listenPort上的udp socket，监听请求 ServerConnector serverConnector = new ServerConnector(listenPort, new FileInputStream(certificateFile), new FileInputStream(certificateKeyFile), supportedVersions, true, log); registerHttp3(serverConnector); serverConnector.start(); // 2. 根据路径区分不同类型的请求，并进行定制处理 if (request.path().startsWith(ServerType.FILE.getPath())) { // 文件服务器 可以摆渡/home下的文件 homeFileServer.handleRequest(request, response); } else if (request.path().startsWith(ServerType.IMAGE.getPath())) { httpImageServer.handleRequest(request, response); } else if (request.path().startsWith(ServerType.APP_FILE.getPath())) { fileServer.handleRequest(request, response); }else { requestHandler.handleRequest(request, response); } // 3. 实现不同的http请求server，进行不同的处理， // HomeFileServer: 文件摆渡 // HttpImage: 图片请求 // FileServer: APP文件下载请求 // RequestHandler: 默认HTTP请求处理 整体源码流程 术语 首先定义一些术语，方便大家观看\nHttp3Connection: Http3 Client端的连接类 Http3Client: Http3 Client，负责发送请求 QuicStream: Quic协议一次请求的流信息的定义，持有inputStream和outputStream，负责输入输出的写入。 ServerConnection: http3 Server端的连接类 Sender、Receiver: 请求发送和接收的实际操作类 定制部分比较少，流程也比较清晰，主要还是要看一下kwik是如何实现QUIC协议的，这里从源码出发，由Client至Server，进行一步步的解析。\nClient端 请求的发送其实在JDK11内置的HttpClient上进行扩展的。\nkwik定义了Http3Client，继承自java.net.http.HttpClient，我们上面的实现中，client端请求发出就是用的该类，Http3Client重写了send方法。\n1 2 3 4 5 6 @Override public \u0026lt;T\u0026gt; HttpResponse\u0026lt;T\u0026gt; send(HttpRequest request, HttpResponse.BodyHandler\u0026lt;T\u0026gt; responseBodyHandler) throws IOException { http3Connection = http3ConnectionFactory.getConnection(request); http3Connection.connect((int) connectTimeout().orElse(DEFAULT_CONNECT_TIMEOUT).toMillis()); return http3Connection.send(request, responseBodyHandler); } 第一行getConnection实际上就是创建http3Connection, 由于QUIC是实现Http3的一种协议，所以，这里Http3Connection实际只持有和管理QuicClientConnection，以及一些请求控制参数。\n那么创建Http3Connection实际上就是创建QuicClientConnection，QuicClientConnection持有了一个sender和receiver，sender负责发送请求，receiver负责接收请求返回信息。\n1 2 3 4 socket = new DatagramSocket(); sender = new SenderImpl(quicVersion, getMaxPacketSize(), socket, new InetSocketAddress(serverAddress, port), this, initialRtt, log); receiver = new Receiver(socket, log, this::abortConnection); 这里就比较清晰了，先是创建了个UDP的socket，然后sender使用这个socket往new InetSocketAddress(serverAddress, port)这个地址发送数据, receiver从socket中接收数据, sender和receiver都是各起了一个线程。\nHttp3Connection创建好后，开始connect，connect中主要分了两个动作，QuicClientConnection的建立和client端请求参数的配置，这里咱们主要关注quicConnection的实现，\n1 2 3 4 5 if (!quicConnection.isConnected()) { Version quicVersion = determinePreferredQuicVersion(); String applicationProtocol = quicVersion.equals(Version.QUIC_version_1) ? \u0026#34;h3\u0026#34; : determineH3Version(quicVersion); quicConnection.connect(connectTimeoutInMillis, applicationProtocol, null, Collections.emptyList()); } 第一行确认版本，第二行确认协议，还是聚焦在第三行QuicClientConnection的connect中：\n1 2 3 receiver.start(); sender.start(connectionSecrets); startHandshake(applicationProtocol, !earlyData.isEmpty()); QuicClientConnection的connect就是用刚刚启动刚刚定义的sender和receiver线程，那这里比较关键的是startHandshake, 之前我们也说了UDP是不可靠的，那么QUIC是如何实现可靠的呢？就是依靠的和TCP一样的机制，握手。\n在刚刚QuicClientConnection创建的时候，还创建了ClientMessageSender的实现类、：\n1 2 3 4 5 6 7 8 9 10 public interface ClientMessageSender { void send(ClientHello clientHello) throws IOException; void send(FinishedMessage finishedMessage) throws IOException; void send(CertificateMessage certificateMessage) throws IOException; void send(CertificateVerifyMessage certificateVerifyMessage); } 那看到这我们应该很熟悉了，在startHandshake中，先发送clientHello，同样对应的在server端收到serverHello后，会发送serverHello。\n需要注意的是，这里的握手并不是实现了TCP的三次握手，四次挥手。HTTP3用了最新的TLS1.3, TLS1.3中定义了0-RTT(一次握手)，1-RTT(两次握手)等等，有兴趣的可以了解一下。\n具体的握手细节可以从抓包上清楚的看到：\nStep1: client发送了ClientHello，并且携带了各种key\nStep2: server发送了Retry, 因为server端持有的connectionId和client发送的DCID(destination connection id)相等了，所以要求client重新handshake\nStep3: client重新发送Initial packet, 可以看到，这里用了server的Retry packet的DCID\nStep4: server发送ServerHello，然后包括了HandShake，TLS的各种信息\nStep5: client进行HandShake，TLS的各种信息\nStep6: 开始传输message\n在整个过程中，只有ClientHello和ServerHello是明文的，其余都是加密的。\n握手成功后，就开始真正的send了，主要在下面代码的第二行和第三行中，第一行根据当前的connection创建一个stream出来，QuicStream包含了StreamInputStream和StreamOutputStream，自定义了输入和输出流。\n同时其中也包含了除了请求header和body之外的协议信息，创建QuicStream相当于创建了个模板，后续只需要填充header和body。\n1 2 3 4 5 6 public \u0026lt;T\u0026gt; HttpResponse\u0026lt;T\u0026gt; send(HttpRequest request, HttpResponse.BodyHandler\u0026lt;T\u0026gt; responseBodyHandler) throws IOException { QuicStream httpStream = quicConnection.createStream(true); sendRequest(request, httpStream); Http3Response\u0026lt;T\u0026gt; http3Response = receiveResponse(request, responseBodyHandler, httpStream); return http3Response; } 当sendRequest(request, httpStream);时，将request的header和body都写到QuicStream的StreamOutputStream中去，而该QuicStream也push到RequestQueue中。\n存入requestQueue后，通知最初定义的sender, sender将请求输出到socket中去。\nreceiveResponse(request, responseBodyHandler, httpStream);拉取请求返回结果，当server处理完请求后，会将返回结果发送到socket中，最初定义的receiver一直在拉取请求结果信息。\n最终将结果写入到httpStream的inputStream中，receiveResponse将返回的信息返回到http request中去。\n上述只是最简单的实现描述，真实的代码非常复杂，TLS的处理、以及不同过程的数据处理，以及数据拆分等等等等。\nServer端 Server端首先用配置好的port新建一个socket，这个port就是上面client端的socket发送的port。同样的新建一个Receiver去接收client端发送的请求。\n1 2 new DatagramSocket(port) receiver = new Receiver(serverSocket, log, exception -\u0026gt; System.exit(9)); 定义了一个receivedPacketsQueue去存放接收的消息，然后将接收到的消息进行处理。\n1 2 3 4 5 receiverThread = new Thread(() -\u0026gt; run(), \u0026#34;receiver\u0026#34;); receiverThread.setDaemon(true); receivedPacketsQueue = new LinkedBlockingQueue\u0026lt;\u0026gt;(); RawPacket rawPacket = receiver.get((int) Duration.ofDays(10 * 365).toSeconds()); process(rawPacket); 1 2 3 4 5 6 7 8 9 10 11 12 protected void process(RawPacket rawPacket) { ByteBuffer data = rawPacket.getData(); int flags = data.get(); data.rewind(); if ((flags \u0026amp; 0b1100_0000) == 0b1100_0000) { processLongHeaderPacket(new InetSocketAddress(rawPacket.getAddress(), rawPacket.getPort()), data); } else if ((flags \u0026amp; 0b1100_0000) == 0b0100_0000) { processShortHeaderPacket(new InetSocketAddress(rawPacket.getAddress(), rawPacket.getPort()), data); } else { log.warn(String.format(\u0026#34;Invalid Quic packet (flags: %02x) is discarded\u0026#34;, flags)); } } 数据的处理主要分为两种类型，一种是Long header packet，long header主要是初始化和handshake的时候使用的。而short header是除了long header以外普通的packet。\n第一次接收数据时并处理时，创建一个ServerConnection，在ServerConnection中，只有一个sender，和Client的做法类似，有一个ServerMessageSender去发送ServerHello和handshake。\nLong header packet的数据处理完后，也就完成了和client端的handshake。后面就处理short header的数据，处理后的packet解析成http1的请求，http1的请求经过定制后，得到http1的response。\nresponse写入QuicStream中，和client端的send一样，由ServerConnection中的sender去发送返回结果。\n如何解决的UDP的问题 开头我们说了UDP通讯的三个问题：\nUdp不可靠，存在丢包的情况 Udp有报文大小限制，1480bytes Udp不保证数据顺序 Quic的解决方案如下：\n如果发送的数据server端没有响应，就会一直重发，直到服务端响应 发送数据前拆包 在1的基础上，每个数据包都有一个offset，最后根据offset组装数据 ","permalink":"https://isyuanpeng.github.io/posts/tech/%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8Equic%E5%8D%8F%E8%AE%AE%E7%9A%84http%E8%BD%ACudp%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7/","summary":"\u003ch1 id=\"一个基于quic协议的http转udp代理工具\"\u003e一个基于Quic协议的Http转Udp代理工具\u003c/h1\u003e\n\u003ch2 id=\"背景\"\u003e背景\u003c/h2\u003e\n\u003cp\u003e某地存在A和B两个网络，A中搭建了上级平台，用户平时正常办公使用该平台。B搭建了下级平台，接入设备。\u003c/p\u003e\n\u003cp\u003e两个网络的边界端口映射有一个唯一的限制：\u003cstrong\u003e两个网络之间端口映射只能映射Udp的端口\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e现在B网中的设备想要接入A网，B网中的设备接入基本上都是http请求，所以整体的对接只需要对接http请求。\u003c/p\u003e\n\u003ch2 id=\"探索\"\u003e探索\u003c/h2\u003e\n\u003cp\u003e针对该问题，进行相关的预研探索。目前已有的条件就是udp通道的边界，那么实现该目标的办法就是利用该udp通道去传输http请求，也就是说要开发http-udp，udp-http的代理工具。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eTCP和UDP\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e处在TCP/IP模型的传输层中，传输控制协议TCP和用户数据报协议UDP\u003c/li\u003e\n\u003cli\u003eTCP可靠，UDP不可靠\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eHttp\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e处在TCP/IP模型的应用层中，基于tcp协议的应用\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e上述的概念比较清晰，其中也暴露了一个非常关键的点，TCP可靠，UDP不可靠。我们都知道tcp的三次握手和四次挥手，tcp是面向连接的协议，通过严格的确认连接来保证整个连接的正常通信。而udp面向非连接，不需要维护连接状态，只需要交付报文即可。\u003c/p\u003e\n\u003cp\u003e经过一些了解后，如果要开发一个http和udp互相转换的代理工具，主要需要解决以下的问题：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eUdp不可靠，存在丢包的情况\u003c/li\u003e\n\u003cli\u003eUdp有报文大小限制，1480bytes\u003c/li\u003e\n\u003cli\u003eUdp不保证数据顺序\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e对于一个网络方面的小白来说，想要独自开发上述代理工具至少需要半年起步。\u003c/p\u003e\n\u003cp\u003e既然从0开发需要耗时太长，那么就需要找目前已经存在的代理工具，经过搜索发现相关内容少之又少。\u003c/p\u003e\n\u003cp\u003e在一次偶然的搜索中发现http3.0是基于Quic协议开发，而Quic协议又是基于udp的，那么似乎找到了一丝问题解决的可能性。\u003c/p\u003e\n\u003ch3 id=\"http3--quic\"\u003eHTTP/3 \u0026amp; Quic\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eHTTP/3 is the third major version of the Hypertext Transfer Protocol used to exchange information on the World Wide Web, complementing the widely-deployed HTTP/1.1 and HTTP/2. Unlike previous versions which relied on the well-established TCP (published in 1974),[2] HTTP/3 uses QUIC, a multiplexed transport protocol built on UDP.[3] On 6 June 2022, IETF published HTTP/3 as a Proposed Standard in RFC 9114.[4]\u003c/p\u003e","title":"一个基于Quic协议的Http转Udp代理工具"},{"content":"Maven之Deploy使用 背景 目前公司里的项目定制一般不需要用到Deploy(上传jar包到af仓库上)，定制只是下载依赖然后使用。最近开发组件过程中，由于需要组件提供对外api给其它组件使用，在使用的过程中也不是特别顺利，所以记录一下Deploy的使用。\nDeploy Deploy是Maven生命周期的最后一个环节，作用是上传最终的成果物到远程仓库中，共享给其它开发人员和工程。使用方法如下：\nStep 1：需要在settings.xml配置af仓库的用户名和密码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;!-- servers | This is a list of authentication profiles, keyed by the server-id used within the system. | Authentication profiles can be used whenever maven must make a connection to a remote server. |--\u0026gt; \u0026lt;servers\u0026gt; \u0026lt;!-- server | Specifies the authentication information to use when connecting to a particular server, identified by | a unique name within the system (referred to by the \u0026#39;id\u0026#39; attribute below). | | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are | used together. | --\u0026gt; \u0026lt;server\u0026gt; \u0026lt;id\u0026gt;xxx-release\u0026lt;/id\u0026gt; \u0026lt;username\u0026gt;xxx\u0026lt;/username\u0026gt; \u0026lt;password\u0026gt;xxx\u0026lt;/password\u0026gt; \u0026lt;/server\u0026gt; \u0026lt;/servers\u0026gt; Step 2：要Deploy的module的pom文件中添加要上传的af仓库，id要和上面settings.xml中的id对应\n1 2 3 4 5 6 7 8 \u0026lt;distributionManagement\u0026gt; \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;xxx-release\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;xxx-release\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;xxx\u0026lt;/url\u0026gt; \u0026lt;/repository\u0026gt; \u0026lt;/distributionManagement\u0026gt; Srtep 3: 执行deploy命令，右侧maven工具栏中找到相应的module执行即可。deploy完在af仓库的地址中可以查询：xxx\nDeploy注意事项 如果只需要deploy xx-external-api module的话，需要注意在其父module api也需要deploy，直接在api的pom文件中deploy即可，会递归执行xx-external-api module。 报错403，403有时候并不是用户名或密码错误，分为download和deploy两种情况 download: 有可能是ah仓库中没有该依赖，根据报错的url查看是否有该依赖 deploy: 有可能是 release 包重复上传 接上一条，release包无法重复上传，无法重复上传，无法重复上传，重复上传后目前无法删除，只能修改版本号重新上传 报错409，一般是针对pom文件报错，根据官方文档所说，409是在进行pom文件的一致性检查时出现问题，这时候需要检查你的pom文件的artifactid和groupid和version是否正确 我遇到的错误是snapshot的版本号写错，需要注意*snapshot的版本号只能写成1.0.0-SNAPSHOT，注意是-SNAPSHOT 针对上述403和409问题，在项目开发中，一定要严格使用SNAPSHOT版本号，版本发布的时候改为RELEASE作为稳定版本。 ","permalink":"https://isyuanpeng.github.io/posts/tech/maven%E4%B9%8Bdeploy%E4%BD%BF%E7%94%A8/","summary":"\u003ch2 id=\"maven之deploy使用\"\u003eMaven之Deploy使用\u003c/h2\u003e\n\u003ch3 id=\"背景\"\u003e背景\u003c/h3\u003e\n\u003cp\u003e目前公司里的项目定制一般不需要用到Deploy(上传jar包到af仓库上)，定制只是下载依赖然后使用。最近开发组件过程中，由于需要组件提供对外api给其它组件使用，在使用的过程中也不是特别顺利，所以记录一下Deploy的使用。\u003c/p\u003e\n\u003ch3 id=\"deploy\"\u003eDeploy\u003c/h3\u003e\n\u003cp\u003eDeploy是Maven生命周期的最后一个环节，作用是上传最终的成果物到远程仓库中，共享给其它开发人员和工程。使用方法如下：\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eStep 1\u003c/em\u003e：需要在settings.xml配置af仓库的用户名和密码\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;!-- servers\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   | This is a list of authentication profiles, keyed by the server-id used within the system.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   | Authentication profiles can be used whenever maven must make a connection to a remote server.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   |--\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;servers\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;!-- server\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     | Specifies the authentication information to use when connecting to a particular server, identified by\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     | a unique name within the system (referred to by the \u0026#39;id\u0026#39; attribute below).\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     | \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     |       used together.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t--\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u0026lt;server\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u0026lt;id\u0026gt;xxx-release\u0026lt;/id\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u0026lt;username\u0026gt;xxx\u0026lt;/username\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u0026lt;password\u0026gt;xxx\u0026lt;/password\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u0026lt;/server\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;/servers\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cem\u003eStep 2\u003c/em\u003e：要Deploy的module的pom文件中添加要上传的af仓库，id要和上面settings.xml中的id对应\u003c/p\u003e","title":"Maven之Deploy使用"},{"content":"浅析几种不同的DEBUG方法，欢迎大家补充 远程DEBUG 当本地的代码因为各种原因无法正常启动的时候，可以选择使用远程DEBUG，这种方法要求和线上的代码一致，具体方法如下，\nStep1: 新建一个remote jvm debug，填入需要线上服务所在服务器ip，复制Command line arguments for remote JVM，选择需要debug的module。\nStep2: 服务器中启动脚本修改添加Step1中复制的arguments\n1 java -jar -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 remote-debug-1.0-SNAPSHOT.jar 公司的jsvc启动的话，要放在mainclass前面，注意JDK的版本，查看JAVA_HOME的版本，jdk8就配在jdk8的启动命令处，jdk11同理。配置好启动脚本后，重启服务。\n1 $_JSVC -D${_ServerName} -home $JAVA_HOME -cwd ${_HOME_DIR}/config -umask 0011 -Djava.security.egd=file:/dev/./urandom -Djava.net.preferIPv4Stack=true -Dcom.sun.jndi.ldap.connect.pool.protocol=\u0026#34;plain ssl\u0026#34; -XX:MetaspaceSize=${_MetaspaceSize} -XX:MaxMetaspaceSize=${_MaxMetaspaceSize} -Xms${_Xms} -Xmx${_Xmx} -Xmn${_Xmn} -XX:SurvivorRatio=8 -XX:+HeapDumpOnOutOfMemoryError -XX:+DisableExplicitGC -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -Xloggc:${_HOME_DIR}/logs/gc.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=8M -Djava.io.tmpdir=${_HOME_DIR}/temp *-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005* -Dloader.main=${_MainClass} -wait 60 -pidfile $_Pid -outfile ${_LogOut} -errfile ${_LogErr} -cp ${_Classpath_jdk8} -procname ${_SystemctlName} $1 ${_StarCLASS} Step3: 重启好服务后，IDEA启动远程debug。显示连接正常即可，如果连接time out查询服务5005端口是否起来，如果没有起来则查看服务启动问题。\nStep4: 打断点，线上服务页面操作即可进入断点。\nNginx代理DEBUG 在进行某次问题的排查的时候，需要debug单点登录(外部依赖)的流程，线上和线下的组件代码不一致，但是依赖的单点登录jar包一致，测试发现IDEA远程DEBUG并不能debug外部依赖的jar包。\n由于线上服务使用的频率不高，所以直接启动本地的代码作为线上服务，使用nginx反向代理线上服务到本地，此时就可以愉快的进行外部jar包的debug，具体方法如下。\nStep1: 启动本地服务\nStep2: 找到集群代理组件所在的服务器，进入代理组件内部/opt/opsmgr/web/components/cluster.1/data/proxy_section，修改proxy_https.conf文件，找到需要反向代理的组件location，以iface为例，修改proxy_pass的参数为本地启动服务的地址。\n1 2 3 4 5 6 7 8 9 10 location /iface-web/ { proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_cookie_path /iface-web \u0026#34;/iface-web;httponly; secure\u0026#34;; #proxy_pass http://10.195.185.23:8037/iface-web/; proxy_pass http://10.195.169.165:8037/iface-web/; } Step3: 重启nginx\n/usr/local/cluster/nginx/sbin/nginx -t 检查脚本是否存在问题\n/usr/local/cluster/nginx/sbin/nginx -s reload 重启nginx\n重启完成后，则可以在线上的页面进行操作debug了。\n","permalink":"https://isyuanpeng.github.io/posts/tech/debug/","summary":"\u003ch2 id=\"浅析几种不同的debug方法欢迎大家补充\"\u003e浅析几种不同的DEBUG方法，欢迎大家补充\u003c/h2\u003e\n\u003ch3 id=\"远程debug\"\u003e远程DEBUG\u003c/h3\u003e\n\u003cp\u003e当本地的代码因为各种原因无法正常启动的时候，可以选择使用远程DEBUG，这种方法要求和线上的代码一致，具体方法如下，\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://blog-vx.oss-cn-beijing.aliyuncs.com/5bf8a29492a5216afb7183603bca288.png\" alt=\"remote_debug\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eStep1\u003c/strong\u003e: 新建一个remote jvm debug，填入需要线上服务所在服务器ip，复制Command line arguments for remote JVM，选择需要debug的module。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eStep2\u003c/strong\u003e: 服务器中启动脚本修改添加Step1中复制的arguments\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ejava -jar -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 remote-debug-1.0-SNAPSHOT.jar\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e公司的jsvc启动的话，要放在mainclass前面，注意JDK的版本，查看JAVA_HOME的版本，jdk8就配在jdk8的启动命令处，jdk11同理。配置好启动脚本后，重启服务。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003e_JSVC \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eD\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003e{_ServerName} \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ehome \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003eJAVA_HOME \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ecwd \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003e{_HOME_DIR}\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003econfig \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eumask \u003cspan style=\"color:#ae81ff\"\u003e0011\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eDjava\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esecurity\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eegd\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efile:\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003edev\u003cspan style=\"color:#f92672\"\u003e/./\u003c/span\u003eurandom \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eDjava\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003enet\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epreferIPv4Stack\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003etrue \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eDcom\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esun\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejndi\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eldap\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003econnect\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epool\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eprotocol\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;plain ssl\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eXX:MetaspaceSize\u003cspan style=\"color:#f92672\"\u003e=$\u003c/span\u003e{_MetaspaceSize} \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eXX:MaxMetaspaceSize\u003cspan style=\"color:#f92672\"\u003e=$\u003c/span\u003e{_MaxMetaspaceSize} \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eXms\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003e{_Xms} \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eXmx\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003e{_Xmx} \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eXmn\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003e{_Xmn} \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eXX:SurvivorRatio\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eXX:\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003eHeapDumpOnOutOfMemoryError \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eXX:\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003eDisableExplicitGC \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eXX:\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003ePrintGCDetails \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eXX:\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003ePrintGCDateStamps \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eXX:\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003ePrintGCTimeStamps \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eXloggc:\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003e{_HOME_DIR}\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003elogs\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003egc\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elog \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eXX:\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003eUseGCLogFileRotation \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eXX:NumberOfGCLogFiles\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eXX:GCLogFileSize\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003eM \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eDjava\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eio\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etmpdir\u003cspan style=\"color:#f92672\"\u003e=$\u003c/span\u003e{_HOME_DIR}\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003etemp  \u003cspan style=\"color:#f92672\"\u003e*-\u003c/span\u003eagentlib:jdwp\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003etransport\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003edt_socket,server\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ey,suspend\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003en,address\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e5005\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eDloader\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003emain\u003cspan style=\"color:#f92672\"\u003e=$\u003c/span\u003e{_MainClass}  \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ewait \u003cspan style=\"color:#ae81ff\"\u003e60\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003epidfile \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003e_Pid \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eoutfile \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003e{_LogOut} \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eerrfile \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003e{_LogErr} \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ecp \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003e{_Classpath_jdk8} \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eprocname \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003e{_SystemctlName} \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003e{_StarCLASS}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eStep3\u003c/strong\u003e: 重启好服务后，IDEA启动远程debug。显示连接正常即可，如果连接time out查询服务5005端口是否起来，如果没有起来则查看服务启动问题。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eStep4\u003c/strong\u003e: 打断点，线上服务页面操作即可进入断点。\u003c/p\u003e\n\u003ch3 id=\"nginx代理debug\"\u003eNginx代理DEBUG\u003c/h3\u003e\n\u003cp\u003e在进行某次问题的排查的时候，需要debug单点登录(外部依赖)的流程，线上和线下的组件代码不一致，但是依赖的单点登录jar包一致，测试发现IDEA远程DEBUG并不能debug外部依赖的jar包。\u003c/p\u003e\n\u003cp\u003e由于线上服务使用的频率不高，所以直接启动本地的代码作为线上服务，使用nginx反向代理线上服务到本地，此时就可以愉快的进行外部jar包的debug，具体方法如下。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eStep1\u003c/strong\u003e: 启动本地服务\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eStep2\u003c/strong\u003e: 找到集群代理组件所在的服务器，进入代理组件内部/opt/opsmgr/web/components/cluster.1/data/proxy_section，修改proxy_https.conf文件，找到需要反向代理的组件location，以iface为例，修改proxy_pass的参数为本地启动服务的地址。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003elocation /iface-web/ {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        proxy_set_header   Host             $http_host;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        proxy_set_header   X-Real-IP        $remote_addr;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        proxy_set_header   X-Forwarded-Proto  $scheme;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        proxy_cookie_path /iface-web \u0026#34;/iface-web;httponly; secure\u0026#34;;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        #proxy_pass http://10.195.185.23:8037/iface-web/;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        proxy_pass http://10.195.169.165:8037/iface-web/;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eStep3\u003c/strong\u003e: 重启nginx\u003c/p\u003e","title":"DEBUG"},{"content":"浅析代理 Nginx功能 正向代理：客户端不知道服务端，也就是说客户端需要配置代理服务器来，代理服务器再去访问真正的服务端。挂梯子就是正向代理的应用。 反向代理：服务端不知道客户端，客户端不需要进行任何配置，用户只请求反向代理地址，反向代理服务器选择目标服务器，获取数据返回客户端。 负载均衡：在反向代理中，我们可以使用负载均衡去将请求分配到不同的服务器上。 动静分离：Nginx将接到的请求分为动态请求和静态请求，这在实际的应用中对应了前后端。 Nginx原理 Master - Worker 模式 在启动Nginx后，我们通过ps -ef可以发现有关nginx的进程有一个master process和n个worker process，并且我们查看nginx监听的端口，可以看到监听了80端口。\nMaster process: master进程的作用主要是读取并且验证nginx.conf, 并且管理worker进程，给worker进程传递消息。\nWorker process: 每一个Worker进程都维护了一个线程去处理连接和请求(避免一个线程造成的线程切换问题)，一般cpu几核就有几个worker进程。\n所有的worker进程都是从master进程fork()过来的，worker进程提供好listenfd的接口, 为了保证只有一个进程处理连接，所有的Worker进程在注册listenfd接口读取事件前抢互斥锁accept_mutex，抢到互斥锁的那个进程注册listenfd读事件，在读事件里面调用accept接受连接，开始处理请求。 Nginx采取上面的这种进程模型的好处： 独立进程不需要加锁，省去锁的开销 独立进程互不影响，服务不会中断 独立进程异常退出，只影响该进程的请求 Cache Manager process: 除了上面两个进程外，我们还可以看到Cache Manager process, 与之对应的还有Cache Loader process(在nginx服务启动的时候由主进程生成，缓存数据加载完成后退出), Cache Manager process负责缓存索引的还礼，通过缓存机制，可以提高对请求的响应效率。 模块化 Nginx从功能上可以分为：\nHandlers: 处理请求，进行输出内容和修改headers等，一般只有一个 Filters: 接收请求进行链式修改 Proxies: Nginx的Htpp Upstream等模块，主要和后端进行交互，实现服务代理和负载均衡等 Nginx（内核）本身做的工作实际很少，当它接到一个 HTTP 请求时，它仅仅是通过查找配置文件将此次请求映射到一个 location block，而此 location 中所配置的各个指令则会启动不同的模块去完成工作，因此模块可以看做 Nginx 真正的劳动工作者。通常一个 location 中的指令会涉及一个 Handler 模块和多个 Filter 模块（当然，多个location可以复用同一个模块）。Handler模块负责处理请求，完成响应内容的生成，而 Filter 模块对响应内容进行处理。\nNginx配置 代理案例 修改线上后端服务地址为本地服务地址，方便调试 当我们想要线上页面点击请求的是本地启动的服务时，可以这样配置，找到想要修改的服务，例如xxx，重点在于最后一句代理转发，将原来的线上地址换成本地服务地址即可。\n1 2 3 4 5 6 7 8 9 10 11 location /xxx/ { proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_cookie_path /xxx \u0026#34;/iface-web;httponly; secure\u0026#34;; #proxy_pass http://10.195.185.23:8037/xxx/; # 线上 proxy_pass http://10.195.169.165:8037/xxx/; # 本地 } 然后执行nginx -t检查配置文件，nginx -s reload热重启即可，这时候线上页面点击的请求都会到达本地的后端，方便调试。\nhttp请求代理+负载均衡 需求：http请求，没有上下文，需要增加负载均衡\n实际修改：\nStep1: 新增upstream配置，负载均衡的策略使用默认的。nginx.conf中已经include，所以不需要再include\n1 2 3 4 upstream book_getBook { server 10.195.185.113:8133 max_fails=1 fail_timeout=600s; server 10.195.184.20:8133 max_fails=1 fail_timeout=600s; } Step2： include_http.conf添加新配置，以getBook请求为例:\n1 2 3 4 5 6 7 8 location /getBook { proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_connect_timeout 5; proxy_pass http://book_getBook/getBook; } -t, -s reload重启即可，则http://运管ip/getBook最终的请求将会被平均的转发到113和20两台服务器上。\nGET请求修改uri中的参数，例如: https://10.195.185.113/getBook?book=xx\u0026amp;userToken=xx\u0026amp;appToken=xx 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 location /getBook { # nginx中有$args的变量 代表url ?后面的参数 set $args_tmp ${args}; # 正则匹配 参数 if ( $args_tmp ~* ^(.*)(\u0026amp;userToken=[\\w-]*)(.*)$){ # 把中间的过滤掉 只取前后 set $args $1$3; } set $args_tmp2 ${args}; if ( $args_tmp2 ~* ^(.*)(\u0026amp;appToken=[\\w-]*)(.*)$){ set $args $1$3; } # 防止多\u0026amp; if ( $args ~* ^\u0026amp;(.*)$){ set $args $1; } # 转发出去 proxy_pass http://book_getBook/getBook?$args; } 除了上述的一些简单的配置，其它复杂的配置大家可以看看使用lua来修改。\nNginx相关配置 tcp_nodelay Nagle Algorithm: John Nagle的名字来命名的，John Nagle在1984年首次用这个算法来尝试解决福特汽车公司的网络拥塞问题（RFC 896）。如果每次发送一个1 byte的数据包，实际大小需要40(20ip header bytes + 20 tcp header bytes) + 1 byte = 41bytes，Nagle算法解决了该问题，如果包的大小满足MSS，那么可以立即发送，否则放入缓冲区，等到已经发送的包被确认了之后继续发送。\nDelayedAcknowledgment: 如果需要单独确认每个包的大小的话，那么整个网络当中将充斥着无数的ACK，降低网络性能，DelayedAcknowledgment规定: 不再针对单个包发送ACK确认，而是一次确认两个包，或者在发送相应数据的时候捎带这发送ACK，又或者出发超时时间后再发送ACK。\n上述的两个解决网络性能问题的方法如果在一起使用，会触发延迟问题，如果TCP client端启用了Nagle Algorithm, Server启用 Delayed ACK，并且发送的数据包比较小，Client端需要等待Server端对上一个packet的Ack才能发送当前Packet，Server延迟发送Ack，那整个通信将会被延迟。\n数据量小，交互多的情况需禁用Nagle算法和Delay，TCP_NODELAY: on 数据量大，交互少需要开启，这种情况典型的应用是文件服务器 仅长连接使用 tcp_nopush tcp_nopush就是开启linux中的TCP_CORK(塞子), 类似于在发送数据管道处插一个cork，阻塞所有数据，直到取消cork，全部发送阻塞数据。\ntcp_nopush和sendfile一起使用。\nsendfile 正常网络文件传输过程:\nfile -\u0026gt; 硬盘 -\u0026gt; kernel buffer -\u0026gt; user buffer -\u0026gt; kernel socket buffer -\u0026gt; 协议栈\nsenfile网络文件传输过程:\nfile -\u0026gt; 硬盘 -\u0026gt; kernel buffer(快速拷贝到kernel socket buffer) -\u0026gt; 协议栈\n性能提升\nhttps://www.cnblogs.com/wajika/p/6573014.html\n写在最后 nginx整体非常强大，尤其是openresty的加持，如果大家有兴趣可以多了解了解。\n","permalink":"https://isyuanpeng.github.io/posts/tech/nginx-proxy/","summary":"\u003ch2 id=\"浅析代理\"\u003e浅析代理\u003c/h2\u003e\n\u003ch3 id=\"nginx功能\"\u003eNginx功能\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e正向代理：客户端不知道服务端，也就是说客户端需要配置代理服务器来，代理服务器再去访问真正的服务端。挂梯子就是正向代理的应用。\u003c/li\u003e\n\u003cli\u003e反向代理：服务端不知道客户端，客户端不需要进行任何配置，用户只请求反向代理地址，反向代理服务器选择目标服务器，获取数据返回客户端。\u003c/li\u003e\n\u003cli\u003e负载均衡：在反向代理中，我们可以使用负载均衡去将请求分配到不同的服务器上。\u003c/li\u003e\n\u003cli\u003e动静分离：Nginx将接到的请求分为动态请求和静态请求，这在实际的应用中对应了前后端。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"nginx原理\"\u003eNginx原理\u003c/h3\u003e\n\u003ch4 id=\"master---worker-模式\"\u003eMaster - Worker 模式\u003c/h4\u003e\n\u003cp\u003e在启动Nginx后，我们通过ps -ef可以发现有关nginx的进程有一个master process和n个worker process，并且我们查看nginx监听的端口，可以看到监听了80端口。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"../image/nginx_process.png\" alt=\"nginx-process\"  title=\"Nginx Process\"  /\u003e\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eMaster process: master进程的作用主要是读取并且验证nginx.conf, 并且管理worker进程，给worker进程传递消息。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eWorker process: 每一个Worker进程都维护了一个线程去处理连接和请求(避免一个线程造成的线程切换问题)，一般cpu几核就有几个worker进程。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e所有的worker进程都是从master进程fork()过来的，worker进程提供好listenfd的接口, 为了保证只有一个进程处理连接，所有的Worker进程在注册listenfd接口读取事件前抢互斥锁accept_mutex，抢到互斥锁的那个进程注册listenfd读事件，在读事件里面调用accept接受连接，开始处理请求。\u003c/li\u003e\n\u003cli\u003eNginx采取上面的这种进程模型的好处：\n\u003cul\u003e\n\u003cli\u003e独立进程不需要加锁，省去锁的开销\u003c/li\u003e\n\u003cli\u003e独立进程互不影响，服务不会中断\u003c/li\u003e\n\u003cli\u003e独立进程异常退出，只影响该进程的请求\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9e187f1f170e4efc826bb5f90f6e6b71~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"nginx-arch\"  title=\"nginx arch\"  /\u003e\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCache Manager process: 除了上面两个进程外，我们还可以看到Cache Manager process, 与之对应的还有Cache Loader process(在nginx服务启动的时候由主进程生成，缓存数据加载完成后退出), Cache Manager process负责缓存索引的还礼，通过缓存机制，可以提高对请求的响应效率。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dadff6c0f3494d3d8863cbac729baf89~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"nginx-all-arch\"  title=\"nginx all arch\"  /\u003e\n\u003c/p\u003e\n\u003ch4 id=\"模块化\"\u003e模块化\u003c/h4\u003e\n\u003cp\u003eNginx从功能上可以分为：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHandlers: 处理请求，进行输出内容和修改headers等，一般只有一个\u003c/li\u003e\n\u003cli\u003eFilters: 接收请求进行链式修改\u003c/li\u003e\n\u003cli\u003eProxies: Nginx的Htpp Upstream等模块，主要和后端进行交互，实现服务代理和负载均衡等\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNginx（内核）本身做的工作实际很少，当它接到一个 HTTP 请求时，它仅仅是通过查找配置文件将此次请求映射到一个 location block，而此 location 中所配置的各个指令则会启动不同的模块去完成工作，因此模块可以看做 Nginx 真正的劳动工作者。通常一个 location 中的指令会涉及一个 Handler 模块和多个 Filter 模块（当然，多个location可以复用同一个模块）。Handler模块负责处理请求，完成响应内容的生成，而 Filter 模块对响应内容进行处理。\u003c/p\u003e","title":"Nginx代理配置实战"},{"content":"log4j线上不打印日志 问题描述 使用log4j的项目(包名com.abc)在服务器上未打印日志，本地控制台打印正常，文件中未输出。\n日志文件能够正常生成，并且也有日志打印，但是业务日志没有打印。\n只打印了com.xxx包下的日志。\n问题分析 出现日志无法打印的问题大概率就在logback.xml的配置上，具体logback的配置参数的具体解释网上有很多，具体可以看一下\nhttps://juejin.cn/post/7200549600590282789\n在logback.xml中可以发现一个配置项:\n1 2 3 4 5 6 7 \u0026lt;!-- 本地测试时，可以修改level 以便打印debug日志 --\u0026gt; \u0026lt;!--定义com.xxx包下的类日志向哪个appender写入日志--\u0026gt; \u0026lt;logger name=\u0026#34;com.xxx\u0026#34; level=\u0026#34;info\u0026#34; additivity=\u0026#34;false\u0026#34;\u0026gt; \u0026lt;appender-ref ref=\u0026#34;FILE-debug\u0026#34; /\u0026gt; \u0026lt;appender-ref ref=\u0026#34;FILE-error\u0026#34; /\u0026gt; \u0026lt;appender-ref ref=\u0026#34;STDOUT\u0026#34; /\u0026gt; \u0026lt;/logger\u0026gt; logger标签可以指定特定包的输出，additivity字段含义如下\n如果logger里面配置了additivity=“false”，就会覆盖root的，只打印一遍；但是additivity=“true”，就会向上层再次传递，不会覆盖，而是打印两遍！\n通过查看logback.xml文件我们可以发现，整个文件中只使用了一个logger打印com.xxx包下的日志，而我们的项目的package为com.abc。\n问题解决 至此问题已经排查完毕，那问题的解决也很简单，新增加一个com.abc的logger即可\n1 2 3 4 5 6 7 \u0026lt;!-- 本地测试时，可以修改level 以便打印debug日志 --\u0026gt; \u0026lt;!--定义com.xxx 包下的类日志向哪个appender写入日志--\u0026gt; \u0026lt;logger name=\u0026#34;com.abc\u0026#34; level=\u0026#34;info\u0026#34; additivity=\u0026#34;false\u0026#34;\u0026gt; \u0026lt;appender-ref ref=\u0026#34;FILE-debug\u0026#34; /\u0026gt; \u0026lt;appender-ref ref=\u0026#34;FILE-error\u0026#34; /\u0026gt; \u0026lt;appender-ref ref=\u0026#34;STDOUT\u0026#34; /\u0026gt; \u0026lt;/logger\u0026gt; ","permalink":"https://isyuanpeng.github.io/posts/question/aries-no-log/","summary":"\u003ch1 id=\"log4j线上不打印日志\"\u003elog4j线上不打印日志\u003c/h1\u003e\n\u003ch2 id=\"问题描述\"\u003e问题描述\u003c/h2\u003e\n\u003cp\u003e使用log4j的项目(包名com.abc)在服务器上未打印日志，本地控制台打印正常，文件中未输出。\u003c/p\u003e\n\u003cp\u003e日志文件能够正常生成，并且也有日志打印，但是业务日志没有打印。\u003c/p\u003e\n\u003cp\u003e只打印了com.xxx包下的日志。\u003c/p\u003e\n\u003ch2 id=\"问题分析\"\u003e问题分析\u003c/h2\u003e\n\u003cp\u003e出现日志无法打印的问题大概率就在logback.xml的配置上，具体logback的配置参数的具体解释网上有很多，具体可以看一下\u003cbr\u003e\n\u003ca href=\"https://juejin.cn/post/7200549600590282789\"\u003ehttps://juejin.cn/post/7200549600590282789\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e在logback.xml中可以发现一个配置项:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;!-- 本地测试时，可以修改level 以便打印debug日志 --\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;!--定义com.xxx包下的类日志向哪个appender写入日志--\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;logger name=\u0026#34;com.xxx\u0026#34; level=\u0026#34;info\u0026#34; additivity=\u0026#34;false\u0026#34;\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;appender-ref ref=\u0026#34;FILE-debug\u0026#34; /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;appender-ref ref=\u0026#34;FILE-error\u0026#34; /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;appender-ref ref=\u0026#34;STDOUT\u0026#34; /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;/logger\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003elogger标签可以指定特定包的输出，additivity字段含义如下\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如果logger里面配置了additivity=“false”，就会覆盖root的，只打印一遍；但是additivity=“true”，就会向上层再次传递，不会覆盖，而是打印两遍！\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e通过查看logback.xml文件我们可以发现，整个文件中只使用了一个logger打印com.xxx包下的日志，而我们的项目的package为com.abc。\u003c/p\u003e\n\u003ch2 id=\"问题解决\"\u003e问题解决\u003c/h2\u003e\n\u003cp\u003e至此问题已经排查完毕，那问题的解决也很简单，新增加一个com.abc的logger即可\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;!-- 本地测试时，可以修改level 以便打印debug日志 --\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;!--定义com.xxx 包下的类日志向哪个appender写入日志--\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;logger name=\u0026#34;com.abc\u0026#34; level=\u0026#34;info\u0026#34; additivity=\u0026#34;false\u0026#34;\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;appender-ref ref=\u0026#34;FILE-debug\u0026#34; /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;appender-ref ref=\u0026#34;FILE-error\u0026#34; /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;appender-ref ref=\u0026#34;STDOUT\u0026#34; /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;/logger\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"Aries No Log"},{"content":"Java 常用工具 redis redis可视化工具: https://goanother.com/cn/ MQ kafkatool: https://www.kafkatool.com/ ","permalink":"https://isyuanpeng.github.io/posts/other/java-tool/","summary":"\u003ch2 id=\"java-常用工具\"\u003eJava 常用工具\u003c/h2\u003e\n\u003ch3 id=\"redis\"\u003eredis\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eredis可视化工具: \u003ca href=\"https://goanother.com/cn/\"\u003ehttps://goanother.com/cn/\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"mq\"\u003eMQ\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003ekafkatool: \u003ca href=\"https://www.kafkatool.com/\"\u003ehttps://www.kafkatool.com/\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e","title":"Java Tool"},{"content":"2023一组技术提升计划 2023年整体技术方面聚焦在代码规范和代码质量上面，希望能够通过推动代码规范的执行和代码质量的审核来提升软件品质。\n规范 代码规范：统一代码规范，使用阿里巴巴代码规范，IDEA安装阿里巴巴规范插件。\n代码规范中强制要求的必须执行，其它项按自己的风格使用。 旧代码不做要求，新代码强制执行。 二季度结束后和年度结束后，随机抽查新代码，形成考核结果。 文档规范：中大型项目需要有开发文档，就写在README中，讲述开发逻辑和开发中不为人知的秘密\n文档书写使用Markdown语法，每个项目的README中都有语法链接 文档中包含但不限于需求描述，实现方案，升级记录，注意事项等。 旧代码不做要求，新代码强制执行。 二季度结束后和年度结束后，随机抽查新代码，形成考核结果。 开发文档模板会在年前提供出来。 为什么要进行代码规范和文档规范 目前代码中，因个人风格的不通，代码风格差异也比较大，在维护代码的时候要去不停的适应不同人的代码风格，因此规范代码风格，减少维护适应代码时间。 目前代码中，因为没有好的规范，所以部分地方还是存在风险，通过实行好的代码规范来避免风险产生问题。 目前代码中，因为没有文档，所以每次看代码遇到不懂的地方需要去猜，可能存在误差。 质量 代码审核：周六分享会开发人员把自己上周的开发工作说一遍，视开发内容决定是否需要代码审核 如果需要代码审核，必须要有开发文档，让组员能够理解在干什么 使用代码IDEA插件搭配Upsource快速审核,https://www.jianshu.com/p/fab6539a6749 写代码的人讲解自己的代码，阐述清楚为什么这么写 鼓励自己提交代码审核，量化代码审核次数 内容输出 完善一组wiki，问题和开发技术输出， 周六分享会后技术分享同样提交wiki 周六分享会后技术分享完毕后如果有想分享的东西同样可以分享 ","permalink":"https://isyuanpeng.github.io/posts/other/2023-tech-plan/","summary":"\u003ch2 id=\"2023一组技术提升计划\"\u003e2023一组技术提升计划\u003c/h2\u003e\n\u003cp\u003e2023年整体技术方面聚焦在代码规范和代码质量上面，希望能够通过推动代码规范的执行和代码质量的审核来提升软件品质。\u003c/p\u003e\n\u003ch3 id=\"规范\"\u003e规范\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e代码规范：统一代码规范，使用阿里巴巴代码规范，IDEA安装阿里巴巴规范插件。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e代码规范中强制要求的必须执行，其它项按自己的风格使用。\u003c/li\u003e\n\u003cli\u003e旧代码不做要求，新代码强制执行。\u003c/li\u003e\n\u003cli\u003e二季度结束后和年度结束后，随机抽查新代码，形成考核结果。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e文档规范：中大型项目需要有开发文档，就写在README中，讲述开发逻辑和开发中不为人知的秘密\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e文档书写使用Markdown语法，每个项目的README中都有语法链接\u003c/li\u003e\n\u003cli\u003e文档中包含但不限于需求描述，实现方案，升级记录，注意事项等。\u003c/li\u003e\n\u003cli\u003e旧代码不做要求，新代码强制执行。\u003c/li\u003e\n\u003cli\u003e二季度结束后和年度结束后，随机抽查新代码，形成考核结果。\u003c/li\u003e\n\u003cli\u003e开发文档模板会在年前提供出来。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"为什么要进行代码规范和文档规范\"\u003e为什么要进行代码规范和文档规范\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003e目前代码中，因个人风格的不通，代码风格差异也比较大，在维护代码的时候要去不停的适应不同人的代码风格，因此规范代码风格，减少维护适应代码时间。\u003c/li\u003e\n\u003cli\u003e目前代码中，因为没有好的规范，所以部分地方还是存在风险，通过实行好的代码规范来避免风险产生问题。\u003c/li\u003e\n\u003cli\u003e目前代码中，因为没有文档，所以每次看代码遇到不懂的地方需要去猜，可能存在误差。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"质量\"\u003e质量\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e代码审核：周六分享会开发人员把自己上周的开发工作说一遍，视开发内容决定是否需要代码审核\n\u003cul\u003e\n\u003cli\u003e如果需要代码审核，必须要有开发文档，让组员能够理解在干什么\u003c/li\u003e\n\u003cli\u003e使用代码IDEA插件搭配Upsource快速审核,https://www.jianshu.com/p/fab6539a6749\u003c/li\u003e\n\u003cli\u003e写代码的人讲解自己的代码，阐述清楚为什么这么写\u003c/li\u003e\n\u003cli\u003e鼓励自己提交代码审核，量化代码审核次数\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"内容输出\"\u003e内容输出\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e完善一组wiki，问题和开发技术输出，\u003c/li\u003e\n\u003cli\u003e周六分享会后技术分享同样提交wiki\u003c/li\u003e\n\u003cli\u003e周六分享会后技术分享完毕后如果有想分享的东西同样可以分享\u003c/li\u003e\n\u003c/ul\u003e","title":"2023 Tech Plan"},{"content":"Java启动脚本详解 在工作的过程中，不免要遇到与服务启动相关的问题，很多问题很好解决，但是有些问题可能需要请教总部的大佬才能解决。由于最近遇到了一次nohup启动两个服务进程的问题，其中一个进程因为端口占用一直在不断重启，故深入研究一下运管的启动和启动脚本的启动。\n__service脚本 __service脚本有很多种，其实作用都一样，但是因为写法不同，所以在看的过程中会感觉很痛苦，每次都会遇到新的语法。这里以Jsvc启动和nohup启动两种方式进行详细解读。\n__service脚本 - Jsvc启动 什么是Jsvc jsvc可以理解为类unix系统下的启动并守护java进程的可执行程序，属于Apache Commons Daemon项目。\n简单理解，就是启动java服务，并且维护java服务的运行。\nJsvc的优缺点 一个java服务可能存在多个进程，通过jsvc控制不同进程 java进程启动、停止或者退出时，执行init stop destroy等方法，java应用能通过这些方法。执行一下必要的操作 Jsvc的原理 公司使用jsvc的框架都需要引入一个laucher的依赖，这个launcher里面就是具体的启动的代码，可以看到其实是在mainClass外包装了一层，可以执行start，init，stop等操作来管理Java服务。\nJsvc __service脚本详解 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 #!/bin/bash _ServerName=placeholder JAVA_HOME=${JDK_PATH} CLASSPATH=.:${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jar _Xms=1024M _Xmx=2048M _Xmn=512M _MetaspaceSize=512M _MaxMetaspaceSize=1024M _DIR=\u0026#34;$( cd \u0026#34;$(dirname \u0026#34;$0\u0026#34;)\u0026#34; \u0026amp;\u0026amp; pwd )\u0026#34; _HOME_DIR=$(dirname \u0026#34;$_DIR\u0026#34;) _JSVC=${_HOME_DIR}/bin/linux/Jsvc _Classpath=${CLASSPATH}:\u0026#34;${_HOME_DIR}/config\u0026#34;:\u0026#34;${_HOME_DIR}/lib/*\u0026#34;:\u0026#34;${_HOME_DIR}/../../conf\u0026#34; _MainClass=com.xx.AlarmBootstrap _StartCLASS=com.xxx.JsvcLauncher _Pid=${_HOME_DIR}/temp/${_ServerName}.pid #_LogOut=${_HOME_DIR}/logs/${_ServerName}.log _LogOut=/dev/null _LogErr=${_HOME_DIR}/logs/Jsvc.log echo \u0026#34;service name: $_ServerName\u0026#34; do_exec() { $_JSVC -D${_ServerName} -home $JAVA_HOME -cwd ${_HOME_DIR}/config -Djava.net.preferIPv4Stack=true -Dcom.sun.jndi.ldap.connect.pool.protocol=\u0026#34;plain ssl\u0026#34; -XX:MetaspaceSize=${_MetaspaceSize} -XX:MaxMetaspaceSize=${_MaxMetaspaceSize} -Xms${_Xms} -Xmx${_Xmx} -Xmn${_Xmn} -XX:SurvivorRatio=8 -XX:+HeapDumpOnOutOfMemoryError -XX:+DisableExplicitGC -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -Xloggc:${_HOME_DIR}/logs/gc.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=8M -Djava.io.tmpdir=${_HOME_DIR}/temp -Dloader.main=${_MainClass} -wait 60 -pidfile $_Pid -outfile ${_LogOut} -errfile ${_LogErr} -cp ${_Classpath} $1 ${_StartCLASS} } case \u0026#34;$1\u0026#34; in start) do_exec echo \u0026#34;${_ServerName} started\u0026#34; chmod -R 777 ${_HOME_DIR} chmod -R 777 ${_HOME_DIR}/../../logs ;; stop) if [ -f \u0026#34;$_Pid\u0026#34; ]; then SERVICE_PID=`cat ${_Pid}` kill -15 ${SERVICE_PID} fi ;; restart) if [ -f \u0026#34;$_Pid\u0026#34; ]; then do_exec \u0026#34;-stop\u0026#34; do_exec echo \u0026#34;${_ServerName} restarted\u0026#34; else echo \u0026#34;service not running, will do nothing\u0026#34; exit 1 fi ;; status) ps -ef | grep ${_ServerName} ;; *) echo \u0026#34;usage: service ${_ServerName} {start|stop|restart|status}\u0026#34; \u0026gt;\u0026amp;2 exit 3 ;; esac _ServiceName: ServiceName就是段标识的名称，也可以看到后面的Jsvc启动使用了这个ServiceName，$_JSVC -D${_ServerName}，这里的-D是指 -D\u0026lt;name\u0026gt;=\u0026lt;value\u0026gt; set a Java system property\nJava启动参数:\n1 2 3 4 5 6 7 8 9 JAVA_HOME=${JDK_PATH} CLASSPATH=.:${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jar _Xms=1024M _Xmx=2048M _Xmn=512M _MetaspaceSize=512M _MaxMetaspaceSize=1024M _DIR=\u0026#34;$( cd \u0026#34;$(dirname \u0026#34;$0\u0026#34;)\u0026#34; \u0026amp;\u0026amp; pwd )\u0026#34; _HOME_DIR=$(dirname \u0026#34;$_DIR\u0026#34;) 基础的参数就不过多介绍了，Java路径，启动参数，内存大小等等。\nJsvc启动参数 1 2 3 4 _JSVC=${_HOME_DIR}/bin/linux/Jsvc _Classpath=${CLASSPATH}:\u0026#34;${_HOME_DIR}/config\u0026#34;:\u0026#34;${_HOME_DIR}/lib/*\u0026#34;:\u0026#34;${_HOME_DIR}/../../conf\u0026#34; _MainClass=com.xxx.xxx.Bootstrap _StartCLASS=com.xxx.JsvcLauncher ++ _JSVC为Jsvc的路径，也就是执行脚本的路径 ++ _Classpath为classpath的路径，**如果有配置文件重名冲突的话，这里的顺序可以控制扫描顺序,解决文件重名导致的配置获取的失败** ++ _MainClass为Java服务的启动类，_StartClass这里是框架launcher的类。 Jsvc监控参数 1 2 3 4 _Pid=${_HOME_DIR}/temp/${_ServerName}.pid #_LogOut=${_HOME_DIR}/logs/${_ServerName}.log _LogOut=/dev/null _LogErr=${_HOME_DIR}/logs/Jsvc.log + _Pid这里放Jsvc启动服务然后生成的Pid文件 + _LogOut: Location for output from stdout (defaults to /dev/null)控制台输出的文件 + _LogErr: ** 启动过程中错误日志存放的位置，一般如果服务没有起起来，并且没有打印业务日志，可以查看这里 ** do_exec() 启动命令 这里就是Jsvc的启动命令，把上面的参数进行了组装\nstart命令 1 2 3 4 5 6 start) do_exec echo \u0026#34;${_ServerName} started\u0026#34; chmod -R 777 ${_HOME_DIR} chmod -R 777 ${_HOME_DIR}/../../logs ;; 执行do_exec()方法，启动服务，然后将文件夹设置777权限\nstop命令 1 2 3 4 5 6 stop) if [ -f \u0026#34;$_Pid\u0026#34; ]; then SERVICE_PID=`cat ${_Pid}` kill -15 ${SERVICE_PID} fi ;; stop命令，从Jsvc启动服务命令中设置的Pid文件所在的位置，找到启动的服务的进程Id，然后kill掉\nrestart: 先执行Jsvc的stop命令，然后在进行start nohup __service脚本详解 有了上面的Jsvc脚本的经验，那么nohup模式的启动脚本的阅读也会更加轻松，除了启动命令的参数外，在Pid的处理上nohup使用ps -ef来获取启动服务的pid然后进行kill\n","permalink":"https://isyuanpeng.github.io/posts/tech/java%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC%E8%AF%A6%E8%A7%A3/","summary":"\u003ch2 id=\"java启动脚本详解\"\u003eJava启动脚本详解\u003c/h2\u003e\n\u003cp\u003e在工作的过程中，不免要遇到与服务启动相关的问题，很多问题很好解决，但是有些问题可能需要请教总部的大佬才能解决。由于最近遇到了一次nohup启动两个服务进程的问题，其中一个进程因为端口占用一直在不断重启，故深入研究一下运管的启动和启动脚本的启动。\u003c/p\u003e\n\u003ch3 id=\"__service脚本\"\u003e__service脚本\u003c/h3\u003e\n\u003cp\u003e__service脚本有很多种，其实作用都一样，但是因为写法不同，所以在看的过程中会感觉很痛苦，每次都会遇到新的语法。这里以Jsvc启动和nohup启动两种方式进行详细解读。\u003c/p\u003e\n\u003ch4 id=\"__service脚本---jsvc启动\"\u003e__service脚本 - Jsvc启动\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003e什么是Jsvc\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003ejsvc可以理解为类unix系统下的启动并守护java进程的可执行程序，属于Apache Commons Daemon项目。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e简单理解，就是启动java服务，并且维护java服务的运行。\u003c/p\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003eJsvc的优缺点\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003e一个java服务可能存在多个进程，通过jsvc控制不同进程\u003c/li\u003e\n\u003cli\u003ejava进程启动、停止或者退出时，执行init stop destroy等方法，java应用能通过这些方法。执行一下必要的操作\u003c/li\u003e\n\u003c/ul\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003eJsvc的原理\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e公司使用jsvc的框架都需要引入一个laucher的依赖，这个launcher里面就是具体的启动的代码，可以看到其实是在mainClass外包装了一层，可以执行start，init，stop等操作来管理Java服务。\u003c/p\u003e\n\u003ch5 id=\"jsvc-__service脚本详解\"\u003eJsvc __service脚本详解\u003c/h5\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e44\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e45\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e46\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e47\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e48\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e49\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e50\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e51\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e52\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e53\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e54\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e55\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e56\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e57\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e58\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e59\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#!/bin/bash\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e_ServerName\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eplaceholder\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eJAVA_HOME\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eJDK_PATH\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCLASSPATH\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e.:\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eJAVA_HOME\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e/lib/dt.jar:\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eJAVA_HOME\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e/lib/tools.jar\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e_Xms\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e1024M\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e_Xmx\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e2048M\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e_Xmn\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e512M\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e_MetaspaceSize\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e512M\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e_MaxMetaspaceSize\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e1024M\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e_DIR\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003e cd \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003edirname \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e$0\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e pwd \u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e_HOME_DIR\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003edirname \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e$_DIR\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e_JSVC\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_HOME_DIR\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e/bin/linux/Jsvc\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e_Classpath\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eCLASSPATH\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e:\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_HOME_DIR\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e/config\u0026#34;\u003c/span\u003e:\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_HOME_DIR\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e/lib/*\u0026#34;\u003c/span\u003e:\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_HOME_DIR\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e/../../conf\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e_MainClass\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ecom.xx.AlarmBootstrap\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e_StartCLASS\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ecom.xxx.JsvcLauncher\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e_Pid\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_HOME_DIR\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e/temp/\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_ServerName\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e.pid\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#_LogOut=${_HOME_DIR}/logs/${_ServerName}.log\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e_LogOut\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e/dev/null\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e_LogErr\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_HOME_DIR\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e/logs/Jsvc.log\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eecho \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;service name: \u003c/span\u003e$_ServerName\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edo_exec\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    $_JSVC -D\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_ServerName\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e -home $JAVA_HOME -cwd \u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_HOME_DIR\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e/config -Djava.net.preferIPv4Stack\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003etrue -Dcom.sun.jndi.ldap.connect.pool.protocol\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;plain ssl\u0026#34;\u003c/span\u003e -XX:MetaspaceSize\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_MetaspaceSize\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e -XX:MaxMetaspaceSize\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_MaxMetaspaceSize\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e -Xms\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_Xms\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e -Xmx\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_Xmx\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e -Xmn\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_Xmn\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e -XX:SurvivorRatio\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e -XX:+HeapDumpOnOutOfMemoryError -XX:+DisableExplicitGC -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -Xloggc:\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_HOME_DIR\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e/logs/gc.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e -XX:GCLogFileSize\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e8M -Djava.io.tmpdir\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_HOME_DIR\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e/temp -Dloader.main\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_MainClass\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e  -wait \u003cspan style=\"color:#ae81ff\"\u003e60\u003c/span\u003e -pidfile $_Pid -outfile \u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_LogOut\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e -errfile \u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_LogErr\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e -cp \u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_Classpath\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e $1 \u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_StartCLASS\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e$1\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e in\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    start\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        do_exec\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        echo \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_ServerName\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e started\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tchmod -R \u003cspan style=\"color:#ae81ff\"\u003e777\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_HOME_DIR\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tchmod -R \u003cspan style=\"color:#ae81ff\"\u003e777\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_HOME_DIR\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e/../../logs\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ;;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    stop\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e -f \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e$_Pid\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \t    SERVICE_PID\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003ecat \u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_Pid\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \t    kill -15 \u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eSERVICE_PID\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \t\u003cspan style=\"color:#66d9ef\"\u003efi\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \t   ;;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    restart\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e -f \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e$_Pid\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            do_exec \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;-stop\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            do_exec\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            echo \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_ServerName\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e restarted\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            echo \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;service not running, will do nothing\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            exit \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efi\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ;;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    status\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ps -ef | grep \u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_ServerName\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ;;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    *\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        echo \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;usage: service \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e_ServerName\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e {start|stop|restart|status}\u0026#34;\u003c/span\u003e \u0026gt;\u0026amp;\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        exit \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ;;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eesac\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e_ServiceName: ServiceName就是段标识的名称，也可以看到后面的Jsvc启动使用了这个ServiceName，$_JSVC -D${_ServerName}，这里的-D是指 \u003ccode\u003e -D\u0026lt;name\u0026gt;=\u0026lt;value\u0026gt; set a Java system property\u003c/code\u003e\u003c/p\u003e","title":"Java启动脚本详解"},{"content":"DDD - 领域驱动设计 领域模型 什么事领域模型 ","permalink":"https://isyuanpeng.github.io/posts/reading/ddd/","summary":"\u003ch2 id=\"ddd---领域驱动设计\"\u003eDDD - 领域驱动设计\u003c/h2\u003e\n\u003ch3 id=\"领域模型\"\u003e领域模型\u003c/h3\u003e\n\u003ch4 id=\"什么事领域模型\"\u003e什么事领域模型\u003c/h4\u003e","title":"DDD"},{"content":"Maven依赖问题大全 代码开发中，依赖引用可以说是一个很头疼的问题了，这里记录一下遇到的问题，推荐使用IDEA的Maven Helper插件进行依赖冲突的排除，除此之外，非依赖冲突的问题记录在下面。\n版本问题1 - 出现两个不同版本的依赖 依赖引入问题 - 离线模式下不能引入依赖 问题现象 需要将repository和代码拷到内网使用，然而拷过去使用离线模式进行加载respository发现依赖全都加载不进来，settings.xml, respository全都没有问题，都是在正常联网环境下能够正常使用的。\nmaven报错为parent依赖的从未被下载过： Could not access xxx xxx has not benn downloaded it before.\n问题分析 很明显，maven还是从远程去下载了，检测到了依赖从未被下载过，因为parent是整个依赖引入的入口，所以先报在了parent这。明明有了Local Repository 为什么还要去远程下载呢？\n问题解决 有一个文件没有被注意到 _remote.properties, 这个文件的存在是为了校验当前依赖在本地有，同时在远程也有一份。因为没有网络环境，所以无法校验远程，这时候就报错了。把所有的_remote.properties删掉即可。\n","permalink":"https://isyuanpeng.github.io/posts/tech/maven-question/","summary":"\u003ch2 id=\"maven依赖问题大全\"\u003eMaven依赖问题大全\u003c/h2\u003e\n\u003cp\u003e代码开发中，依赖引用可以说是一个很头疼的问题了，这里记录一下遇到的问题，推荐使用IDEA的Maven Helper插件进行依赖冲突的排除，除此之外，非依赖冲突的问题记录在下面。\u003c/p\u003e\n\u003ch3 id=\"版本问题1---出现两个不同版本的依赖\"\u003e版本问题1 - 出现两个不同版本的依赖\u003c/h3\u003e\n\u003ch3 id=\"依赖引入问题---离线模式下不能引入依赖\"\u003e依赖引入问题 - 离线模式下不能引入依赖\u003c/h3\u003e\n\u003ch4 id=\"问题现象\"\u003e问题现象\u003c/h4\u003e\n\u003cp\u003e需要将repository和代码拷到内网使用，然而拷过去使用离线模式进行加载respository发现依赖全都加载不进来，settings.xml, respository全都没有问题，都是在正常联网环境下能够正常使用的。\u003c/p\u003e\n\u003cp\u003emaven报错为parent依赖的从未被下载过： Could not access xxx xxx has not benn downloaded it before.\u003c/p\u003e\n\u003ch4 id=\"问题分析\"\u003e问题分析\u003c/h4\u003e\n\u003cp\u003e很明显，maven还是从远程去下载了，检测到了依赖从未被下载过，因为parent是整个依赖引入的入口，所以先报在了parent这。明明有了Local Repository 为什么还要去远程下载呢？\u003c/p\u003e\n\u003ch4 id=\"问题解决\"\u003e问题解决\u003c/h4\u003e\n\u003cp\u003e有一个文件没有被注意到 _remote.properties, 这个文件的存在是为了校验当前依赖在本地有，同时在远程也有一份。因为没有网络环境，所以无法校验远程，这时候就报错了。把所有的_remote.properties删掉即可。\u003c/p\u003e","title":"Maven Question"},{"content":"Spring中使用yaml作为配置文件 写定制的时候经常会遇到这样的情况，一些小而繁杂的配置项在数据库中配置太过麻烦，卸载application.properties中又太过臃肿，针对这种情况，我们可以使用yaml作为配置文件，直接在model类中将yaml配置引入即可。具体使用方法如下:\nStep1: 创建yaml解析类 1 2 3 4 5 6 7 8 9 10 11 public class YamlPropertySourceFactory implements PropertySourceFactory { @Override public PropertySource\u0026lt;?\u0026gt; createPropertySource(String name, EncodedResource resource) throws IOException { Resource classResource = resource.getResource(); if (classResource.exists()) { PropertySource\u0026lt;?\u0026gt; sources = new YamlPropertySourceLoader().load(resource.getResource().getFilename(), classResource,null); return sources==null ? new MapPropertySource(name, new HashMap\u0026lt;\u0026gt;()) : sources; } return new MapPropertySource(name, new HashMap\u0026lt;\u0026gt;()); } } Step2: 设置配置文件 在项目的\n","permalink":"https://isyuanpeng.github.io/posts/tech/yaml-file-as-config-file-using/","summary":"\u003ch2 id=\"spring中使用yaml作为配置文件\"\u003eSpring中使用yaml作为配置文件\u003c/h2\u003e\n\u003cp\u003e写定制的时候经常会遇到这样的情况，一些小而繁杂的配置项在数据库中配置太过麻烦，卸载application.properties中又太过臃肿，针对这种情况，我们可以使用yaml作为配置文件，直接在model类中将yaml配置引入即可。具体使用方法如下:\u003c/p\u003e\n\u003ch3 id=\"step1-创建yaml解析类\"\u003eStep1: 创建yaml解析类\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epublic \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e YamlPropertySourceFactory implements PropertySourceFactory {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eOverride\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    public PropertySource\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e?\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e createPropertySource(\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e name, EncodedResource resource) throws IOException {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eResource\u003c/span\u003e classResource \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e resource\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003egetResource();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (classResource\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eexists()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e           PropertySource\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e?\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e sources \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e new YamlPropertySourceLoader()\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eload(resource\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003egetResource()\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003egetFilename(), classResource,null);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e sources\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003enull \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e?\u003c/span\u003e new MapPropertySource(name, new HashMap\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e()) : sources;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e new MapPropertySource(name, new HashMap\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"step2-设置配置文件\"\u003eStep2: 设置配置文件\u003c/h3\u003e\n\u003cp\u003e在项目的\u003c/p\u003e","title":"Yaml File as Config File Using"},{"content":"责任链设计模式实战 责任链设计模式 责任链设计模式 学习网站: https://refactoring.guru/design-patterns\n优点 符合单一职责原则：后期修改只需要修改具体的实现类。 开闭原则：后期增加逻辑只需要新增具体的实现类。 ","permalink":"https://isyuanpeng.github.io/posts/tech/chain-of-responsibility/","summary":"\u003ch2 id=\"责任链设计模式实战\"\u003e责任链设计模式实战\u003c/h2\u003e\n\u003ch3 id=\"责任链设计模式\"\u003e责任链设计模式\u003c/h3\u003e\n\u003ch4 id=\"责任链设计模式-1\"\u003e责任链设计模式\u003c/h4\u003e\n\u003cblockquote\u003e\n\u003cp\u003e学习网站: \u003ca href=\"https://refactoring.guru/design-patterns\"\u003ehttps://refactoring.guru/design-patterns\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch5 id=\"优点\"\u003e优点\u003c/h5\u003e\n\u003col\u003e\n\u003cli\u003e符合单一职责原则：后期修改只需要修改具体的实现类。\u003c/li\u003e\n\u003cli\u003e开闭原则：后期增加逻辑只需要新增具体的实现类。\u003c/li\u003e\n\u003c/ol\u003e","title":"Chain of Responsibility"},{"content":"每日一问 2022-06-21 setter \u0026amp; getter setter 和 gettter 的实际意义 为什么要有setter \u0026amp; getter, public dot直接使用不是更方便快捷吗？ 而且setter和getter最终的效果也是读写\n安全：程序可以选择只读或只写或读写 灵活：如果不仅仅只是读写属性值，可以自由变换 封装：隐藏内部实现细节 健壮：便于维护，扩展 由上一问，为什么public是不安全的呢？\n如果写sdk的话，那么有些数据是不想对外修改的，这时候public的作用就体现出来了。如果只是业务代码则，权限体现的不太大。 扩展：Java的四大特性 - 直接粘贴\n封装\nWhat：隐藏信息，保护数据访问。 How：暴露有限接口和属性，需要编程语言提供访问控制的语法。 Why：提高代码可维护性；降低接口复杂度，提高类的易用性。 抽象\nWhat: 隐藏具体实现，使用者只需关心功能，无需关心实现。 How: 通过接口类或者抽象类实现，特殊语法机制非必须。 Why: 提高代码的扩展性、维护性；降低复杂度，减少细节负担。 继承\nWhat: 表示 is-a 关系，分为单继承和多继承。 How: 需要编程语言提供特殊语法机制。例如 Java 的 “extends”，C++ 的 “:” 。 Why: 解决代码复用问题。 多态\nWhat: 子类替换父类，在运行时调用子类的实现。 How: 需要编程语言提供特殊的语法机制。比如继承、接口类、duck-typing。 Why: 提高代码扩展性和复用性。 2022-06-22 编译\u0026amp;反编译 编译：源码 -\u0026gt; 字节码 反编译：字节码 -\u0026gt; 源码\n什么是字节码，采用字节码的好处是什么？ 在 Java 中，JVM 可以理解的代码就叫做字节码（即扩展名为 .class 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。\n2022-06-23 为什么String不可变 什么是不可变 一旦对象被创建并初始化后，内部的状态数据就会保持不变\n为什么String不可变 最初的设计就是不可变，设计就是遵循一定的规则，基本约定，体现一致性。 final和immutable无关 如果String可变，那么String就可以在方法之前来回穿梭，最终变成什么无人可知。 安全性：String作为hashmap的key值的时候，如果发生改变，则很难被发现 无线程安全问题 所以声明String为final一劳永逸 2022-06-25 为什么不应该通过类实例访问静态成员 如果使用类的实例来访问静态成员的话，那么IDEA会WARNING，那为什么会有这个WARNING呢？\n查了一下网上的说明，模糊不清的说法是实例会被回收。\n引申问题1 - 静态为什么叫静态？ 静态变量 -\u0026gt; 类变量 是继承类的 所有对象共有的 非静态变量 -\u0026gt; 实例变量 具体对象的具体数据 根据对象的变化而变化 是继承对象的\n引申问题2 - 什么时候可以定义静态变量或者方法？ 所有的类都拥有的共同的属性 -\u0026gt; 静态变量\n方法内部没有使用到非静态数据 -\u0026gt; 静态方法\n引申知识点 静态的特点\n通过类的加载而加载 类一旦被加载进内存，静态的变量和方法就被加载进去了，对象还不存在 静态先于对象存在 被所有的对象共享 可以直接被类名调用，也可以被对象调用 静态使用的注意事项\n静态方法只能访问静态成员，不能访问非静态成员 非静态成员可以访问静态成员，也可以访问非静态成员 静态方法中不能出现this,super等关键字 静态的好处和坏处\n优点：对于所有对象都共有的数据，节省空间；可以不新建对象直接使用； 缺点：静态是通过类存在的，访问存在局限性，只能访问静态数据 2022-06-29 HashMap 数据结构 数组(每个Node叫做bucket) + 链表 + 红黑树\n主体是一个数组，数组由一个个链表组成，链表由一个个Node组成，Node存储具体的key value\n为什么要使用数组+链表的数据结构 解决hash冲突，首先使用hash(key)得出key的hash值，然后通过 (n-1) \u0026amp; hash 得出index，键值对存在该index所在的数组链表中。\n不同的key可能产生相同的hash值\n如何解决Hash冲突 遇到hash冲突后，会先判断两个key值是否相同，相同说明是同一个key，则覆盖。如果不相同，会将这个Node插入链表的尾部。\n头插法和尾插法 头插法：每次在头部插入，作者认为后面插入的使用的概率会更大，会造成死锁的问题 尾插法：每次在尾部插入，JDK1.8后更新\n为什么要把链表转换为红黑树？ 查找效率 链表：时间复杂度O(n) 红黑树：时间复杂度O(log(n))\n链表较短的时候差距不大，较长的时候可以提升效率\n为什么不直接使用红黑树的数据结构 红黑树的空间复杂度是链表的2倍\n2022-06-30 反射 反射是什么？ 反射可以在运行时检查类、接口、方法和变量等信息，无需知道类的名字，方法名等。还可以在运行时实例化新对象，调用方法以及设置和获取变量值。\n2022-07-04 - 07-05 红黑树 6.29日看了hashmap的原理，那么红黑树到底是什么呢？\n二叉查找树 BST(Binary Search Tree) 任何一个节点的左子树上的点，都必须小于当前节点。 任何一个节点的右子树上的点，都必须大于当前节点。 任何一颗子树，也都满足上面两个条件。\n2-3-4树 4阶的B树，Balance Tree\n所有的叶子节点都拥有相同的深度 叶节点只能是2-节点、3-节点、4-节点 元素使用保持排序顺序，父节点大于左子节点，小于右子节点，如果节点有多个元素，则每个元素必须大于它左边的和它左子树中的元素\n2022-07-07 为什么https协议调用接口需要SSL认证 SSL: Secure Sockets Layer, 安全套接字层，为了解决HTTP协议是明文，避免传输的数据被窃取，篡改，劫持。 TSL: Transport Layer Security, 传输层安全协议。TSL是SSL标准化的产物。 HTTPS: 兼容HTTP，HTTP over TSL，HTTPS = HTTP + TSL 总之，就是为了安全\nJava里面怎么做？ 如果是Resttemplate的话需要跳过,具体代码如下, 在RestTemplateConfig中加入下面代码: 1 2 3 SSLContext sslContext = SSLContexts.custom().loadTrustMaterial(null, (X509Certificate[] chain, String authType) -\u0026gt; true).build(); SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext, (s, sslSession) -\u0026gt; true); CloseableHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(csf).setMaxConnPerRoute(1000).setMaxConnTotal(1000).build(); X509Certificate X.509是公钥基础设施（PKI）的标准格式。X.509证书就是基于国际电信联盟（ITU）制定的X.509标准的数字证书。\n2022-07-11 @Controller \u0026amp; @RestController @ResponseBody 该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。使用此注解此次请求将不再走视图处理器，而是直接将此响应结果写入到输入流中，其效果等同于使用response对象输出指定格式的数据。\n@Controller @Service @Compoent spring在启动时，有一个非常核心的类ConfigurationClassPostProcessor会对类路径下的所以类进行扫描，将符合条件的bean扫描出来添加到beanDefinitionMap集合中，方便接下来的实例化。\n@Controller 如果不使用springMVC时，三者使用其实是没有什么差别的，但如果使用了springMVC，@Controller就被赋予了特殊的含义。\nspring会遍历上面扫描出来的所有bean，过滤出那些添加了注解@Controller的bean，将Controller中所有添加了注解@RequestMapping的方法解析出来封装成RequestMappingInfo存储到RequestMappingHandlerMapping中的mappingRegistry。后续请求到达时，会从mappingRegistry中查找能够处理该请求的方法。\n@RestController @Controller + @ResponseBody\n2022-07-15 net.sf.ezmorph.bean.MorphDynaBean是什么？ net.sf.json就是一个类似于fastjson的一个json解析框架，这个库有点老了，现在应该没有人推荐了，所以其实今天这个问题就没必要记录了。但是还是看一下这个问题。\n2022-07-27 2022-07-28 依赖的版本不一致 一般都是因为自定义版本导致的，而有些依赖会使用spring中写好的版本，所以一般这种情况就更改spring定制的版本号即可，更改就是重新写个全局版本号，会覆盖掉之前的。\n2022-07-29 设计模式六大基本原则 单一职责原则 Single Responsibility Principle There should never be more than one reason for a class to change。应该有且仅有一个原因引起类的变更。\n意思也很明显，一个类应该有且只有一个引起它变化的原因。\n实际案例: 手机Class V1：MobileClass, 包含了所有功能，charge(), ringUp(), GPU(), CPU(), RAM(), ROM() V2: BasicProperty, GPU(), CPU(), RAM(), ROM(); BasicFunction, charge(), ringUp() V3: BasicProperty, GPU(), CPU(), RAM(), ROM(); ExtendProperty(), Pixel(); BasicFunction, charge(), ringUp(); ExtendFunction, playGame();\n没有最好的设计，只有最适合的设计。\n2022-07-30 设计模式六大基本原则 里氏替换原则 Liskov Substitution Principle 子类对象能够替换父类对象，而程序逻辑不变。\n有两种情况，使用共享方法或者是为了多态。\n共享方法：子类继承父类为了方法重用，则子类不应该去改变父类中的共享方法。子类和父类都可以实例化，如果子类复写父类的共享类，则违反了LSP，子类对象不能够替换父类对象，逻辑有可能不一致。 多态：如果继承为了多态，则应该将父类方法设为抽象类或者接口，这样子类重新定义父类的方法，父类不能实例化，替换的时候不会造成逻辑上的不一致。 如何符合LSP：尽量不要从可实例化的父类中继承，而是要使用基于抽象类和接口的继承。\n2022-07-31 多态 2023-04-10 三次握手 重启每日一问的问题，同步更新微信\n首先先明确一下三次握手的流程：\nshake hands1: client send [SYN, SEQ=X] -\u0026gt; server\nshake hands2: server send [SYN, ACK=X+1, SEQ=Y] -\u0026gt; client\nshake hands3: client send [ACK=Y+1, SEQ=Z] -\u0026gt; server\n接下来开始使用wireshark进行抓包，查看抓包中的交互信息，下面以www.baidu.com为目标进行抓包。通过ping查看www.baidu.com的真正ip为110.242.68.4，通过wireshark的过滤条件src host 110.242.68.4 or dst host 110.242.68.4 来过滤数据包。\nShake hands 1 可以看到前三个请求都为TCP的请求，就是我们所说的握手过程，只有在握手之后才能进行真正的http的请求。\n可以看到第一次握手中客户端源端口61539向服务器目标端口443端口进行SYN的请求，SYN=1，ACK=0表示连接请求报文段。\nShake hands 2 在第二次握手的时候可以看到SYN=1，ACK=1表示服务器同意客户端的连接请求。我们也可以看到seq+1。\nShake hands 3 第三次握手，客户端发送ACK=1给服务端，此时TCP连接成功，开始发送和接收数据。\n2023-04-11 四次挥手 上面的三次握手学完之后，相信对整个TCP的连接和wireshark的使用有了基本的了解。下面简单看一下四次挥手的过程即可。\nfour waves 1: client send [FIN, ACK, Seq=X, ACK=Y] to server four waves 2: server send [ACK, Seq=Y, Ack=X+1] to client four waves 3: server send [FIN, ACK, Seq=Z, Ack=X+1] to client four waves 4: client send [ACK, Seq=X+1, Ack=Z+1] to server\n2023-04-13 IOC - Inversion of Control 资源不由使用资源的双方管理，而由不使用资源的第三方管理，这可以带来很多好处。第一，资源集中管理，实现资源的可配置和易管理。第二，降低了使用资源双方的依赖程度，也就是我们说的耦合度。\n2023-04-14 Nginx 配置项 tcp_nodelay Nagle Algorithm: John Nagle的名字来命名的，John Nagle在1984年首次用这个算法来尝试解决福特汽车公司的网络拥塞问题（RFC 896）。如果每次发送一个1 byte的数据包，实际大小需要40(20ip header bytes + 20 tcp header bytes) + 1 byte = 41bytes，Nagle算法解决了该问题，如果包的大小满足MSS，那么可以立即发送，否则放入缓冲区，等到已经发送的包被确认了之后继续发送。\nDelayedAcknowledgment: 如果需要单独确认每个包的大小的话，那么整个网络当中将充斥着无数的ACK，降低网络性能，DelayedAcknowledgment规定: 不再针对单个包发送ACK确认，而是一次确认两个包，或者在发送相应数据的时候捎带这发送ACK，又或者出发超时时间后再发送ACK。\n上述的两个解决网络性能问题的方法如果在一起使用，会触发延迟问题，如果TCP client端启用了Nagle Algorithm, Server启用 Delayed ACK，并且发送的数据包比较小，Client端需要等待Server端对上一个packet的Ack才能发送当前Packet，Server延迟发送Ack，那整个通信将会被延迟。\n数据量小，交互多的情况需禁用Nagle算法和Delay，TCP_NODELAY: on 数据量大，交互少需要开启，这种情况典型的应用是文件服务器 仅长连接使用 tcp_nopush tcp_nopush就是开启linux中的TCP_CORK(塞子), 类似于在发送数据管道处插一个cork，阻塞所有数据，直到取消cork，全部发送阻塞数据。\ntcp_nopush和sendfile一起使用。\nsendfile 正常网络文件传输过程:\nfile -\u0026gt; 硬盘 -\u0026gt; kernel buffer -\u0026gt; user buffer -\u0026gt; kernel socket buffer -\u0026gt; 协议栈\nsenfile网络文件传输过程:\nfile -\u0026gt; 硬盘 -\u0026gt; kernel buffer(快速拷贝到kernel socket buffer) -\u0026gt; 协议栈\n性能提升\nhttps://www.cnblogs.com/wajika/p/6573014.html\nlua_shared_dict access 10m ","permalink":"https://isyuanpeng.github.io/posts/other/everyday-question/","summary":"\u003ch2 id=\"每日一问\"\u003e每日一问\u003c/h2\u003e\n\u003ch3 id=\"2022-06-21-setter--getter\"\u003e2022-06-21 setter \u0026amp; getter\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003esetter 和 gettter 的实际意义\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e为什么要有setter \u0026amp; getter, public dot直接使用不是更方便快捷吗？ 而且setter和getter最终的效果也是读写\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e安全：程序可以选择只读或只写或读写\u003c/li\u003e\n\u003cli\u003e灵活：如果不仅仅只是读写属性值，可以自由变换\u003c/li\u003e\n\u003cli\u003e封装：隐藏内部实现细节\u003c/li\u003e\n\u003cli\u003e健壮：便于维护，扩展\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e由上一问，为什么public是不安全的呢？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果写sdk的话，那么有些数据是不想对外修改的，这时候public的作用就体现出来了。如果只是业务代码则，权限体现的不太大。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e扩展：Java的四大特性 - 直接粘贴\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e封装\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eWhat：隐藏信息，保护数据访问。\nHow：暴露有限接口和属性，需要编程语言提供访问控制的语法。\nWhy：提高代码可维护性；降低接口复杂度，提高类的易用性。\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e抽象\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eWhat: 隐藏具体实现，使用者只需关心功能，无需关心实现。\nHow: 通过接口类或者抽象类实现，特殊语法机制非必须。\nWhy: 提高代码的扩展性、维护性；降低复杂度，减少细节负担。\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e继承\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eWhat: 表示 is-a 关系，分为单继承和多继承。\nHow: 需要编程语言提供特殊语法机制。例如 Java 的 “extends”，C++ 的 “:” 。\nWhy: 解决代码复用问题。\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e多态\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eWhat: 子类替换父类，在运行时调用子类的实现。\nHow: 需要编程语言提供特殊的语法机制。比如继承、接口类、duck-typing。\nWhy: 提高代码扩展性和复用性。\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"2022-06-22-编译反编译\"\u003e2022-06-22 编译\u0026amp;反编译\u003c/h3\u003e\n\u003cp\u003e编译：源码 -\u0026gt; 字节码\n反编译：字节码 -\u0026gt; 源码\u003c/p\u003e\n\u003ch4 id=\"什么是字节码采用字节码的好处是什么\"\u003e什么是字节码，采用字节码的好处是什么？\u003c/h4\u003e\n\u003cp\u003e在 Java 中，JVM 可以理解的代码就叫做字节码（即扩展名为 .class 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。\u003c/p\u003e","title":"Everyday Question"},{"content":"论如何在没有Kafkatool的情况下存活 众所周知，最近服务器加固的越来越高，导致有些服务器的kafka已经不能在kafkatool上访问，当然不排除是kafkatool有问题，但是无论是哪种情况，Kafka命令的使用已经迫在眉睫，所以总结一下。\nkafka的安装 https://downloads.apache.org/kafka/\n安装 .tgz版本的，no src.tgz，src代表着source，下载下来的是资源，还需要gradle编译，有点麻烦。\n安装完成后启动zookeeper，关于zookeeper，虽然我们有在使用，但是它是什么呢？为什么Kafka要用它？还有什么场景会使用Zk？关于Zk的问题有点多，后面单独开一个章节去学习Zk。\n关于所有的脚本都在/bin目录下，我们可以看到命名非常清晰，我们可以直接上手使用。\n启动Zk命令 1 2 // -daemon代表后台运行 后面还可以指定特定的配置文件 如果没有指定就会默认使用 /config/zookeeper.properties ./zookeeper-server-start.sh -daemon 启动kafka 1 2 // 和Zk同样的道理 ./kafka-server-start.sh -daemon Kafka的使用 Topic的创建 常用命令 查询kafka topic列表 ./kafka-topics.sh \u0026ndash;list \u0026ndash;zookeeper localhost:\n","permalink":"https://isyuanpeng.github.io/posts/tech/kafka-commond/","summary":"\u003ch2 id=\"论如何在没有kafkatool的情况下存活\"\u003e论如何在没有Kafkatool的情况下存活\u003c/h2\u003e\n\u003cp\u003e众所周知，最近服务器加固的越来越高，导致有些服务器的kafka已经不能在kafkatool上访问，当然不排除是kafkatool有问题，但是无论是哪种情况，Kafka命令的使用已经迫在眉睫，所以总结一下。\u003c/p\u003e\n\u003ch3 id=\"kafka的安装\"\u003ekafka的安装\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://downloads.apache.org/kafka/\"\u003ehttps://downloads.apache.org/kafka/\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e安装 .tgz版本的，no src.tgz，src代表着source，下载下来的是资源，还需要gradle编译，有点麻烦。\u003c/p\u003e\n\u003cp\u003e安装完成后启动zookeeper，关于zookeeper，虽然我们有在使用，但是它是什么呢？为什么Kafka要用它？还有什么场景会使用Zk？关于Zk的问题有点多，后面单独开一个章节去学习Zk。\u003c/p\u003e\n\u003cp\u003e关于所有的脚本都在/bin目录下，我们可以看到命名非常清晰，我们可以直接上手使用。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e启动Zk命令\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e// -daemon代表后台运行 后面还可以指定特定的配置文件 如果没有指定就会默认使用 /config/zookeeper.properties\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e ./zookeeper-server-start.sh -daemon\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e启动kafka\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e// 和Zk同样的道理\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e ./kafka-server-start.sh -daemon\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"kafka的使用\"\u003eKafka的使用\u003c/h3\u003e\n\u003ch4 id=\"topic的创建\"\u003eTopic的创建\u003c/h4\u003e\n\u003ch3 id=\"常用命令\"\u003e常用命令\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e查询kafka topic列表\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e./kafka-topics.sh \u0026ndash;list \u0026ndash;zookeeper localhost:\u003c/p\u003e","title":"论如何在没有Kafkatool的情况下存活"},{"content":"Effective Java Reading Notes - 1 最近感觉自己对于Java越来越陌生了，遂看EffectiveJava来温习一下。这本书就是一个清单，分为90个item。\nIntroduction 简介里面就简单说明了一下本书的重点，重点不在于如何写出高性能的Java代码，而是写出clear，correct，usable，robust，flexible，maintainable的代码。\nCreating and Destroying Objects Item 1: Consider static factory methods instead of constructors 获取一个类的实例的传统方式是提供构造方法。另外一种方式是创建静态工厂方法，这里的工厂并不是设计模式中的工厂。之前有个同事喜欢使用静态工厂方法来创建类（Luzihao5），具体看到他的代码就可以知道。\n1 2 3 4 // 书中的样例使用了基本类型转换包装类的例子 public static Boolean valueOf(boolean b) { return b ? Boolean.TRUE : Boolean.FALSE; } 下面列举一下静态工厂方法获取类实例的优点和缺点：\nadvantages: 自定义方法名称：构造方法只能是类名称，而静态工厂方法可以取具体含义的名称。这点确实，如果有多个构造函数的话，往往需要去找到底使用哪个构造函数来创建实例。 不需要每次都创建一个新的对象：如上面的例子，每次只需要返回定义好的常量即可。 静态方法返回的类型可以是定义返回类型的子类 Item 6: Avoid creating unnecessary objects 如题名，避免创建不必要的对象。\n以String作为例子： 1 2 String s = new String(\u0026#34;bikini\u0026#34;); // 创建一个新的实例 String s = \u0026#34;bikini\u0026#34;; // 从String池创建 以后无论创建多少个 bikini 都会指向第一次创建的地址 以正则表达式的匹配为例： 1 2 3 4 5 6 7 8 9 10 11 12 // Performance can be greatly inproved static boolean isRomanNumberal(String s) { return s.matches(\u0026#34;^(?=.)\u0026#34;) } // Reusing expensive object for improved performence public class RomanNumberals { private static final Pattern ROMAN = Pattern.compile(\u0026#34;^(?=.)\u0026#34;); static boolean isRomanNumeral(String s) { return ROMAN.matchers(s).matches(); } } 使用基础类型而不是包装类 ","permalink":"https://isyuanpeng.github.io/posts/other/effective-java-notes/","summary":"\u003ch2 id=\"effective-java-reading-notes---1\"\u003eEffective Java Reading Notes - 1\u003c/h2\u003e\n\u003cp\u003e最近感觉自己对于Java越来越陌生了，遂看EffectiveJava来温习一下。这本书就是一个清单，分为90个item。\u003c/p\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003e简介里面就简单说明了一下本书的重点，重点不在于如何写出高性能的Java代码，而是写出clear，correct，usable，robust，flexible，maintainable的代码。\u003c/p\u003e\n\u003ch2 id=\"creating-and-destroying-objects\"\u003eCreating and Destroying Objects\u003c/h2\u003e\n\u003ch3 id=\"item-1-consider-static-factory-methods-instead-of-constructors\"\u003eItem 1: Consider static factory methods instead of constructors\u003c/h3\u003e\n\u003cp\u003e获取一个类的实例的传统方式是提供构造方法。另外一种方式是创建静态工厂方法，这里的工厂并不是设计模式中的工厂。之前有个同事喜欢使用静态工厂方法来创建类（Luzihao5），具体看到他的代码就可以知道。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e// 书中的样例使用了基本类型转换包装类的例子\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epublic static Boolean valueOf(boolean b) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    return b ? Boolean.TRUE : Boolean.FALSE;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e下面列举一下静态工厂方法获取类实例的优点和缺点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eadvantages:\n\u003cul\u003e\n\u003cli\u003e自定义方法名称：构造方法只能是类名称，而静态工厂方法可以取具体含义的名称。这点确实，如果有多个构造函数的话，往往需要去找到底使用哪个构造函数来创建实例。\u003c/li\u003e\n\u003cli\u003e不需要每次都创建一个新的对象：如上面的例子，每次只需要返回定义好的常量即可。\u003c/li\u003e\n\u003cli\u003e静态方法返回的类型可以是定义返回类型的子类\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"item-6-avoid-creating-unnecessary-objects\"\u003eItem 6: Avoid creating unnecessary objects\u003c/h2\u003e\n\u003cp\u003e如题名，避免创建不必要的对象。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e以String作为例子：\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eString s = new String(\u0026#34;bikini\u0026#34;);    // 创建一个新的实例\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eString s = \u0026#34;bikini\u0026#34;;    // 从String池创建 以后无论创建多少个 bikini 都会指向第一次创建的地址\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e以正则表达式的匹配为例：\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e// Performance can be greatly inproved\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003estatic boolean isRomanNumberal(String s) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    return s.matches(\u0026#34;^(?=.)\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e// Reusing expensive object for improved performence\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epublic class RomanNumberals {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    private static final Pattern ROMAN = Pattern.compile(\u0026#34;^(?=.)\u0026#34;);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    static boolean isRomanNumeral(String s) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        return ROMAN.matchers(s).matches();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e使用基础类型而不是包装类\u003c/li\u003e\n\u003c/ol\u003e","title":"Effective Java Reading Notes - 1"},{"content":"知识填充 布局相关 LayoutInflater 在绑定Fragment的时候我们会用到LayoutInflater.inflate(), 该方法返回一个View对象，所以我们可以知道该方法的作用就是将xml布局文件加载为View或者ViewGroup对象。而LayoutInflater就是一个总的工具，有多个inflate方法。\n获取LayoutInflater 1 2 3 LayoutInflater inflater1 = LayoutInflater.from(this); LayoutInflater inflater2 = getLayoutInflater(); LayoutInflater inflater3 = (LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE); 后面两种其实走的都是第一种方法。this就是context。\n.infalte()方法使用 .infalte()有多个重载的方法。\n1 2 3 4 inflate(int resource, ViewGroup root) inflate(int resource, ViewGroup root, boolean attachToRoot) inflate(XmlPullParser parser, ViewGroup root) inflate(XmlPullParser parser, ViewGroup root, boolean attachToRoot) 看源码可知，四个方法，前三个其实都是调用的第四个。\n1 2 public View inflate(XmlPullParser parser, ViewGroup root, boolean attachToRoot) { } 可以看到第一个参数是一个Xml解析器，其实就是去解析布局的xml文件，这里使用的是Pull解析器。下面来看一下源码。\n1 2 3 4 5 6 7 8 9 10 11 12 int type; while ((type = parser.next()) != XmlPullParser.START_TAG \u0026amp;\u0026amp; type != XmlPullParser.END_DOCUMENT) { // Empty } if (type != XmlPullParser.START_TAG) { throw new InflateException(parser.getPositionDescription() + \u0026#34;: No start tag found!\u0026#34;); } final String name = parser.getName(); 第一段代码就是去找xml解析器中的开始节点，找到后获得名字，这个name就是xml文件的根节点的name。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 if (TAG_MERGE.equals(name)) { if (root == null || !attachToRoot) { throw new InflateException(\u0026#34;\u0026lt;merge /\u0026gt; can be used only with a valid \u0026#34; + \u0026#34;ViewGroup root and attachToRoot=true\u0026#34;); } rInflate(parser, root, inflaterContext, attrs, false); } else { // Temp is the root view that was found in the xml final View temp = createViewFromTag(root, name, inflaterContext, attrs); ViewGroup.LayoutParams params = null; if (root != null) { if (DEBUG) { System.out.println(\u0026#34;Creating params from root: \u0026#34; + root); } // Create layout params that match root, if supplied params = root.generateLayoutParams(attrs); if (!attachToRoot) { // Set the layout params for temp if we are not // attaching. (If we are, we use addView, below) temp.setLayoutParams(params); } } if (DEBUG) { System.out.println(\u0026#34;-----\u0026gt; start inflating children\u0026#34;); } // Inflate all children under temp against its context. rInflateChildren(parser, temp, attrs, true); if (DEBUG) { System.out.println(\u0026#34;-----\u0026gt; done inflating children\u0026#34;); } } A. 这段代码首先就是判断了一下根节点是不是merge，如果根节点是merge，又没有传root，attachToRoot又是false就会直接抛异常。所以说如果是merge为根节点的话，则需要传root参数或者设置attachRoot为true。\n如果merge节点并且传了root或者attachToRoot设置为true后，则直接进入递归方法rInflate()去继续解析布局，最终返回result。\nB. 如果不是merge根节点，大部分的情况。首先调用createViewFromTag创建了个temp，这个temp就是布局根View，后续又是调用递归方法rInflateChildren来完成子节点的View的创建。\nC. 值得注意的是在代码的最后有关于\n1 2 3 4 5 6 7 8 9 10 11 // We are supposed to attach all the views we found (int temp) // to root. Do that now. if (root != null \u0026amp;\u0026amp; attachToRoot) { root.addView(temp, params); } // Decide whether to return the root that was passed in or the // top view found in xml. if (root == null || !attachToRoot) { result = temp; } root != null \u0026amp;\u0026amp; attchToRoot 传进来的xml文件布局解析完成后会作为子View添加到root中，最终返回root。\nroot == null \u0026amp;\u0026amp; !attchToRoot 传进来的xml文件布局解析完成后成为一个View直接返回，注意看代码中，返回并没有返回params，也就是说布局根View的android:layout_xxx属性会被忽略，即android:layout_xx属性只有依附在某个ViewGroup中才能生效。\nroot != null \u0026amp;\u0026amp; !attchToRoot 传进来的xml文件会被加载成为一个View直接返回。布局根View中的android:layout_xx会生效。\n最后再来看一下加载xml布局的原理，我们可以看到有递归函数 rInflate 来递归完成整体的加载。其中每一步递归都是获取节点的名字，然后创建对应的实例，生成View，并且将该View添加到它的父View上。最终就返回了一个完整的View。\nShape 对于shape标签，如果有多个布局文件拥有同一个背景的话，可以考虑写个shape标签的xml来进行代码复用。相对于使用png图片来说，使用shape可以减少安装包的大小，而且能够更好的适配不同的手机。\n：shape可以指定形状，一共有四个形状，矩形: rectangle, 椭圆: oval, 线: line, 圆环: ring 1 android:shape=[\u0026#34;rectangle\u0026#34; | \u0026#34;oval\u0026#34; | \u0026#34;line\u0026#34; | \u0026#34;ring\u0026#34;] \u0026gt; ：绘制图形的大小 1 2 3 \u0026lt;size android:width=\u0026#34;integer\u0026#34; android:height=\u0026#34;integer\u0026#34; /\u0026gt; : 填充颜色 1 2 \u0026lt;solid android:color=\u0026#34;color\u0026#34; /\u0026gt; ：圆角大小 1 2 3 4 5 6 \u0026lt;corners android:radius=\u0026#34;integer\u0026#34; android:topLeftRadius=\u0026#34;integer\u0026#34; android:topRightRadius=\u0026#34;integer\u0026#34; android:bottomLeftRadius=\u0026#34;integer\u0026#34; android:bottomRightRadius=\u0026#34;integer\u0026#34; /\u0026gt; : 描边的颜色及宽度 1 2 3 4 5 \u0026lt;stroke android:width=\u0026#34;integer\u0026#34; android:color=\u0026#34;color\u0026#34; android:dashWidth=\u0026#34;integer\u0026#34; android:dashGap=\u0026#34;integer\u0026#34; /\u0026gt; : 渐变背景颜色 1 2 3 4 5 6 7 8 9 10 \u0026lt;gradient android:angle=\u0026#34;integer\u0026#34; android:centerX=\u0026#34;integer\u0026#34; android:centerY=\u0026#34;integer\u0026#34; android:centerColor=\u0026#34;integer\u0026#34; android:endColor=\u0026#34;color\u0026#34; android:gradientRadius=\u0026#34;integer\u0026#34; android:startColor=\u0026#34;color\u0026#34; android:type=[\u0026#34;linear\u0026#34; | \u0026#34;radial\u0026#34; | \u0026#34;sweep\u0026#34;] android:useLevel=[\u0026#34;true\u0026#34; | \u0026#34;false\u0026#34;] /\u0026gt; TextWatcher 顾名思义，文件监听器。就是用来监听TextView的变化，一共有3个重写方法。\n1 2 3 4 5 6 7 8 // 在文本变化之前 start开始的位置，count变化的字符长度 after变化后的位置 public void beforeTextChanged(CharSequence s, int start, int count, int after); // 文本变化 public void onTextChanged(CharSequence s, int start, int before, int count); // 文本变化之后调用 s为文本变化后的结果 public void afterTextChanged(Editable s); ","permalink":"https://isyuanpeng.github.io/posts/tech/android-learning-9/","summary":"\u003ch2 id=\"知识填充\"\u003e知识填充\u003c/h2\u003e\n\u003ch3 id=\"布局相关\"\u003e布局相关\u003c/h3\u003e\n\u003ch4 id=\"layoutinflater\"\u003eLayoutInflater\u003c/h4\u003e\n\u003cp\u003e在绑定Fragment的时候我们会用到LayoutInflater.inflate(), 该方法返回一个View对象，所以我们可以知道该方法的作用就是将xml布局文件加载为View或者ViewGroup对象。而LayoutInflater就是一个总的工具，有多个inflate方法。\u003c/p\u003e\n\u003ch5 id=\"获取layoutinflater\"\u003e获取LayoutInflater\u003c/h5\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eLayoutInflater inflater1 = LayoutInflater.from(this);  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eLayoutInflater inflater2 = getLayoutInflater();  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eLayoutInflater inflater3 = (LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e后面两种其实走的都是第一种方法。this就是context。\u003c/p\u003e\n\u003ch5 id=\"infalte方法使用\"\u003e.infalte()方法使用\u003c/h5\u003e\n\u003cp\u003e.infalte()有多个重载的方法。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003einflate(int resource, ViewGroup root)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003einflate(int resource, ViewGroup root, boolean attachToRoot)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003einflate(XmlPullParser parser, ViewGroup root)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003einflate(XmlPullParser parser, ViewGroup root, boolean attachToRoot)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e看源码可知，四个方法，前三个其实都是调用的第四个。\u003c/p\u003e","title":"Android Learning 9"},{"content":"今日份学习，综合之前学习过的知识，学习google推出的总结性APP - Sunflower\nhttps://github.com/android/sunflower\n查漏补缺的同时将此APP进行本地化适配，因为使用的是wikimedia的源获取数据。\nSunFlower 首先拉代码，跑起来，忘记有代码，然后看一下整个APP的结构。\n首页的上半部分，一个title + header是固定，这块可以写在Activity中，header中有两个button，点击切换Fragment。\n我的花园-Fragment: 用了一个GridView来展示添加的花园，这块的数据应该是是存入数据库的。\n我的花园-植物详情-Fragment：点击我的植物后会进入到植物详情的Fragment，展示植物的详细信息，有一个返回按钮和分享按钮。\n植物目录-Fragment: 同样是一个GridView来展示植物列表，这块的数据应该是从网络上拉取，缓存到数据库的。\n植物目录-植物详情-Fragment：植物详情的Fragment就是展示从wiki上拉下来的植物数据，和我的花园的植物详情可以用一个Fragment。\n植物目录-植物详情-添加植物-button：植物图片的下方有一个加号，可以进行植物的添加，植物添加后入库，然后我的花园页面显示。\n还有一个给自己添加的植物浇水的功能，由于等待浇水的时间都比较长，所以先开发这些，后面再来浇水。梳理完毕，剩下的就是开整，使用现成的项目学习的话比较省事的是不用寻找静态资源。\nIGarden 新建项目，起名就要IGarden吧，毕竟整个项目是个花园。为了方便，首先吧Sunflower需要的所有依赖以及静态资源全部导入。\nCoordinatorLayout 这个Layout是2015年I/O大会上发布的Android Design Support Library，主要就是更好的使用material design。CoordinatorLayout是库中的一个FrameLayout，继承自ViewGroup。\n顾名思义，协调者布局。为啥叫协调者？有点懵逼。CoordinatorLayout是一个\u0026quot;super-powered FrameLayout\u0026quot;。看了不少博文，终于还是有一点理解了，协调者协调的是child之间的联动，比如说有一个TopBar, TopBar下面有一个RecyclerView，当RecyclerView被滑动的时候如果我想隐藏TopBar怎么办？这时候就可以用协调者布局了。\n那CoordinatorLayout是如何做到协调的呢？在CoordinatorLayout内部，每一个child都必须有一个Behavior，CoordinatorLayout根据这个Behavior去进行协调。那么Behavior到底是啥呢？\n其实Behavior里面有一系列的方法，如下面所示\n1 onStartNestedScroll()， onNestedScrollAccepted()，onStopNestedScroll()，onNestedScroll()， onNestedPreScroll()，onNestedFling()，onNestedPreFling() 所以说怎么协调的就很明了了，实际上就是使用触摸操作来控制View的滑动(我自己的理解)。\nNestedScrolling 在Behavior方法中，这些方法的都有一个Nested的的标志，这个Nested又是干什么的呢？不得不说，Android东西可真多。先看下面的博文，但是下面的博文又说先让了解时间分发机制。\nhttps://www.jianshu.com/p/aff5e82f0174\nAndroid事件分发机制 关于Android事件，最常见的应该就是点击事件吧，对于一个View可以设置它的点击事件监听器。但是除了这个，还有巨多事件，从手指接触屏幕到手指离开屏幕的这一过程产生的一系列事件都叫做事件列。\n具体的有下面的几个：\nMotionEvent.ACTION_DOWN 按下View开始\nMotionEvent.ACTION_UO 抬起View\nMotionEvent.ACTION_MOVE 滑动View\nMotionEvent.ACTION_CANCEL 结束时间，非人为原因\nViewPager2 有点难以理解Sunflower如何做到在两个fragment之间滑动的，所以看了代码，发现是使用了ViewPager2+TabLayout来实现的。整体的代码实现其实不难，下面直接上代码吧。\n首先在布局文件中定义TabLayout和ViewPage2，在ViewPager中可以添加控件，到ViewPager2就不行了，只能和TabLayout平级。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 \u0026lt;LinearLayout android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:orientation=\u0026#34;vertical\u0026#34;\u0026gt; \u0026lt;TextView android:id=\u0026#34;@+id/header_title\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;60dp\u0026#34; android:gravity=\u0026#34;center\u0026#34; android:text=\u0026#34;@string/app_name\u0026#34; android:textAppearance=\u0026#34;?attr/textAppearanceHeadline5\u0026#34; android:textColor=\u0026#34;@color/sunflower_white\u0026#34; android:textSize=\u0026#34;30sp\u0026#34; /\u0026gt; \u0026lt;com.google.android.material.tabs.TabLayout android:id=\u0026#34;@+id/tab_layout\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;60dp\u0026#34; style=\u0026#34;@style/Widget.MaterialComponents.TabLayout.Colored\u0026#34; app:tabIconTint=\u0026#34;@drawable/tab_icon_color_selector\u0026#34; app:tabTextColor=\u0026#34;?attr/colorPrimaryDark\u0026#34; /\u0026gt; \u0026lt;androidx.viewpager2.widget.ViewPager2 android:id=\u0026#34;@+id/view_pager\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; /\u0026gt; \u0026lt;/LinearLayout\u0026gt; 为了方便，直接使用了线性布局。\n由于ViewPager2里面使用RecyclerView，所以它一样要使用Adapter，下面就是Pager的Adapter的代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 const val GARDEN_PAGE_INDEX = 0 const val PLANT_LIST_PAGE_INDEX = 1 class PagerAdapter(fragment: Fragment) : FragmentStateAdapter(fragment) { private val tabFragmentsCreators: Map\u0026lt;Int, () -\u0026gt; Fragment\u0026gt; = mapOf( GARDEN_PAGE_INDEX to { GardenFragment() }, PLANT_LIST_PAGE_INDEX to { PlantListFragment() } ) override fun getItemCount(): Int = tabFragmentsCreators.size override fun createFragment(position: Int): Fragment { return tabFragmentsCreators[position]?.invoke() ?: throw IndexOutOfBoundsException() } } 首先我们注意到这个PagerAdapter继承了FragmentStateAdapter，来实现滑动的效果。PageAdapter中定义了一个Map\u0026lt;Int, Fragment\u0026gt;以及Fragment的索引，当切换Fragment的时候即调用createFragment方法进行新的Fragment的创建。\n1 2 3 4 5 6 7 8 9 10 11 12 val binding: FragmentMyGardenBinding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_garden, container, false) val viewPager = binding.viewPager val tabLayout = binding.tabLayout viewPager.adapter = PagerAdapter(this) TabLayoutMediator(tabLayout, viewPager) { tab, pos -\u0026gt; tab.text = getTabTitle(pos) tab.setIcon(getTabIcon(pos)) }.attach() 在Fragment中使用起来也比较简单，首先绑定viewPager2的控件和tabLayout的控件，然后使用TabLayoutMediator来关联viewPager2和TabLayout，最后要加上attach()，这样才能完成二者的绑定。\n这样就完成了ViewPager2+TabLayout的简单使用，在原项目中还加入了AppBarLayout，这个暂时不知道干什么用的，仅用上面的即可完成需求的实现。\n","permalink":"https://isyuanpeng.github.io/posts/tech/android-learning-8/","summary":"\u003cp\u003e今日份学习，综合之前学习过的知识，学习google推出的总结性APP - Sunflower\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/android/sunflower\"\u003ehttps://github.com/android/sunflower\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e查漏补缺的同时将此APP进行本地化适配，因为使用的是wikimedia的源获取数据。\u003c/p\u003e\n\u003ch2 id=\"sunflower\"\u003eSunFlower\u003c/h2\u003e\n\u003cp\u003e首先拉代码，跑起来，忘记有代码，然后看一下整个APP的结构。\u003c/p\u003e\n\u003cp\u003e首页的上半部分，一个title + header是固定，这块可以写在Activity中，header中有两个button，点击切换Fragment。\u003c/p\u003e\n\u003cp\u003e我的花园-Fragment: 用了一个GridView来展示添加的花园，这块的数据应该是是存入数据库的。\u003c/p\u003e\n\u003cp\u003e我的花园-植物详情-Fragment：点击我的植物后会进入到植物详情的Fragment，展示植物的详细信息，有一个返回按钮和分享按钮。\u003c/p\u003e\n\u003cp\u003e植物目录-Fragment: 同样是一个GridView来展示植物列表，这块的数据应该是从网络上拉取，缓存到数据库的。\u003c/p\u003e\n\u003cp\u003e植物目录-植物详情-Fragment：植物详情的Fragment就是展示从wiki上拉下来的植物数据，和我的花园的植物详情可以用一个Fragment。\u003c/p\u003e\n\u003cp\u003e植物目录-植物详情-添加植物-button：植物图片的下方有一个加号，可以进行植物的添加，植物添加后入库，然后我的花园页面显示。\u003c/p\u003e\n\u003cp\u003e还有一个给自己添加的植物浇水的功能，由于等待浇水的时间都比较长，所以先开发这些，后面再来浇水。梳理完毕，剩下的就是开整，使用现成的项目学习的话比较省事的是不用寻找静态资源。\u003c/p\u003e\n\u003ch2 id=\"igarden\"\u003eIGarden\u003c/h2\u003e\n\u003cp\u003e新建项目，起名就要IGarden吧，毕竟整个项目是个花园。为了方便，首先吧Sunflower需要的所有依赖以及静态资源全部导入。\u003c/p\u003e\n\u003ch3 id=\"coordinatorlayout\"\u003eCoordinatorLayout\u003c/h3\u003e\n\u003cp\u003e这个Layout是2015年I/O大会上发布的Android Design Support Library，主要就是更好的使用material design。CoordinatorLayout是库中的一个FrameLayout，继承自ViewGroup。\u003c/p\u003e\n\u003cp\u003e顾名思义，协调者布局。为啥叫协调者？有点懵逼。CoordinatorLayout是一个\u0026quot;super-powered FrameLayout\u0026quot;。看了不少博文，终于还是有一点理解了，协调者协调的是child之间的联动，比如说有一个TopBar, TopBar下面有一个RecyclerView，当RecyclerView被滑动的时候如果我想隐藏TopBar怎么办？这时候就可以用协调者布局了。\u003c/p\u003e\n\u003cp\u003e那CoordinatorLayout是如何做到协调的呢？在CoordinatorLayout内部，每一个child都必须有一个Behavior，CoordinatorLayout根据这个Behavior去进行协调。那么Behavior到底是啥呢？\u003c/p\u003e\n\u003cp\u003e其实Behavior里面有一系列的方法，如下面所示\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eonStartNestedScroll()， onNestedScrollAccepted()，onStopNestedScroll()，onNestedScroll()， onNestedPreScroll()，onNestedFling()，onNestedPreFling()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e所以说怎么协调的就很明了了，实际上就是使用触摸操作来控制View的滑动(我自己的理解)。\u003c/p\u003e\n\u003ch4 id=\"nestedscrolling\"\u003eNestedScrolling\u003c/h4\u003e\n\u003cp\u003e在Behavior方法中，这些方法的都有一个Nested的的标志，这个Nested又是干什么的呢？不得不说，Android东西可真多。先看下面的博文，但是下面的博文又说先让了解时间分发机制。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://www.jianshu.com/p/aff5e82f0174\"\u003ehttps://www.jianshu.com/p/aff5e82f0174\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"android事件分发机制\"\u003eAndroid事件分发机制\u003c/h3\u003e\n\u003cp\u003e关于Android事件，最常见的应该就是点击事件吧，对于一个View可以设置它的点击事件监听器。但是除了这个，还有巨多事件，从手指接触屏幕到手指离开屏幕的这一过程产生的一系列事件都叫做事件列。\u003c/p\u003e\n\u003cp\u003e具体的有下面的几个：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eMotionEvent.ACTION_DOWN 按下View开始\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eMotionEvent.ACTION_UO 抬起View\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eMotionEvent.ACTION_MOVE 滑动View\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eMotionEvent.ACTION_CANCEL 结束时间，非人为原因\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"viewpager2\"\u003eViewPager2\u003c/h3\u003e\n\u003cp\u003e有点难以理解Sunflower如何做到在两个fragment之间滑动的，所以看了代码，发现是使用了ViewPager2+TabLayout来实现的。整体的代码实现其实不难，下面直接上代码吧。\u003c/p\u003e\n\u003cp\u003e首先在布局文件中定义TabLayout和ViewPage2，在ViewPager中可以添加控件，到ViewPager2就不行了，只能和TabLayout平级。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;LinearLayout\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        android:layout_width=\u0026#34;match_parent\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        android:layout_height=\u0026#34;match_parent\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        android:orientation=\u0026#34;vertical\u0026#34;\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;TextView\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            android:id=\u0026#34;@+id/header_title\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            android:layout_width=\u0026#34;match_parent\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            android:layout_height=\u0026#34;60dp\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            android:gravity=\u0026#34;center\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            android:text=\u0026#34;@string/app_name\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            android:textAppearance=\u0026#34;?attr/textAppearanceHeadline5\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            android:textColor=\u0026#34;@color/sunflower_white\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            android:textSize=\u0026#34;30sp\u0026#34; /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;com.google.android.material.tabs.TabLayout\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            android:id=\u0026#34;@+id/tab_layout\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            android:layout_width=\u0026#34;match_parent\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            android:layout_height=\u0026#34;60dp\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            style=\u0026#34;@style/Widget.MaterialComponents.TabLayout.Colored\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            app:tabIconTint=\u0026#34;@drawable/tab_icon_color_selector\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            app:tabTextColor=\u0026#34;?attr/colorPrimaryDark\u0026#34; /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;androidx.viewpager2.widget.ViewPager2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            android:id=\u0026#34;@+id/view_pager\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            android:layout_width=\u0026#34;match_parent\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            android:layout_height=\u0026#34;match_parent\u0026#34; /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;/LinearLayout\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e为了方便，直接使用了线性布局。\u003c/p\u003e","title":"Android Learning 8"},{"content":"今天学习Repository和WorkManager\nRepository Repository pattern也是一种设计模式，叫做存储库模式。看一下官方的原文：\nA repository mediates between data sources (such as persistent models, web services, and caches) and the rest of the app.\n大意就是一个Repository相当于在数据源(持久化实体类，网络服务，缓存)和app其余的服务之间的中间层。简而言之，就是提供一个数据操作代理层。调用者不需要知道数据是从哪来，如何处理，只需要使用数据即可。这样有几个好处：\n代码更容易维护，切换数据源的时候业务代码不需要更改\n数据处理逻辑和业务逻辑分离，可以对这两个代码分别进行测试\n减少代码重复\n降低代码出错的几率\n为什么要有Repository 经过前几天的学习，我们已经学习了ROOM以及DAO层数据的访问，那么还需要Repository干什么呢？通过上面的优点我们可以知道，避免直接访问数据。同事也解决了多数据源的问题，一个App的数据源可以是多个，数据库，接口等等。Repository对这两种情况进行封装，可以以一种统一的方式进行数据的拉取。\n所以Repository其实是一种代码规范，并不是组件。\nRepository例子 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @Singleton class PlantRepository @Inject constructor(private val plantDao: PlantDao) { // use the dao fun getPlants() = plantDao.getPlants() fun getPlant(plantId: String) = plantDao.getPlant(plantId) fun getPlantsWithGrowZoneNumber(growZoneNumber: Int) = plantDao.getPlantsWithGrowZoneNumber(growZoneNumber) // use the network service fun requestApi(): Plant } 项目中的实际运用 在市局测温项目中，实际上对Repository的使用更为复杂，整体的结构为首先定义一层datasource的接口类，然后在定义datasource的实现类，这里仅仅定义了一个remotedatasource的实现类，根据命名我感觉原本的架构想法应该是对于数据调接口一个实现类，数据库操作一个实现类。\n但是实际的写法是调接口获取数据和从数据库中获取数据都在remotedatasource实现类中实现了。\n最后定义了Repository类去实现datasource的接口类，在Repository实现类中调用了remotedatasource实现类。\n整体一共需要三个类才能完成Repository中间层的设计。\n市局测温项目整体上都采用了Repository的设计模式，但是在代码的清晰度方面有所下降，刚看代码的时候如果不了解Repository，那么对于一个获取数据为什么要设计的如此复杂就会充满疑惑。\n官方给的样例中只需要一个Repository就完成了中间层的设计，对于未来代码的编写，我认为可以跟着官方的思路走，让代码更清洗一点，Repository就作为一个实现类，引入Dao层或者Web Service层去实现数据的获取。\nWorkManager WorkManager说白了就是来管理后台任务的。\nWorkManager比较优秀的点在于能保证任务一定会被执行，及时app不运行，哪怕设备重启，也能在适当的时候被执行。WorkManager有自己的数据库，所以能一定被执行。\n上面这个特性也广泛运用于其它程序中，比如datai推数据，如果要保证数据的正常推送，避免因为宕机等因素造成的数据推送紊乱。除了简单的使用标志位外，还可以使用一张表来记录数据的推送，这样及时数据推送失败，那么下一次依然能够完整的推送数据。\nWorkManager的使用 集成Worker()类来完成work的定义，doWork()执行任务。\n1 2 3 4 5 6 7 8 9 10 11 class UploadWorker(appContext: Context, workerParams: WorkerParameters): Worker(appContext, workerParams) { override fun doWork(): Result { // Do the work here--in this case, upload the images. uploadImages() // Indicate whether the work finished successfully with the Result return Result.success() } } 定义完work后，还需要来调度work，创建WorkRequest来调度任务。下面就是一个一次性任务的调度。\n1 2 3 val uploadWorkRequest: WorkRequest = OneTimeWorkRequestBuilder\u0026lt;UploadWorker\u0026gt;() .build() 最后需要将WorkRequest提交到WorkManager\n1 2 3 WorkManager .getInstance(myContext) .enqueue(uploadWorkRequest) 这只是一个简单的WorkManager的使用。\n更多的使用方法直接看官方文档的使用指南。\nhttps://developer.android.google.cn/topic/libraries/architecture/workmanager?hl=zh-cn\n","permalink":"https://isyuanpeng.github.io/posts/tech/android-learning-7/","summary":"\u003cp\u003e今天学习Repository和WorkManager\u003c/p\u003e\n\u003ch2 id=\"repository\"\u003eRepository\u003c/h2\u003e\n\u003cp\u003eRepository pattern也是一种设计模式，叫做存储库模式。看一下官方的原文：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA repository mediates between data sources (such as persistent models, web services, and caches) and the rest of the app.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e大意就是一个Repository相当于在数据源(持久化实体类，网络服务，缓存)和app其余的服务之间的中间层。简而言之，就是提供一个数据操作代理层。调用者不需要知道数据是从哪来，如何处理，只需要使用数据即可。这样有几个好处：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e代码更容易维护，切换数据源的时候业务代码不需要更改\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e数据处理逻辑和业务逻辑分离，可以对这两个代码分别进行测试\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e减少代码重复\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e降低代码出错的几率\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"为什么要有repository\"\u003e为什么要有Repository\u003c/h3\u003e\n\u003cp\u003e经过前几天的学习，我们已经学习了ROOM以及DAO层数据的访问，那么还需要Repository干什么呢？通过上面的优点我们可以知道，避免直接访问数据。同事也解决了多数据源的问题，一个App的数据源可以是多个，数据库，接口等等。Repository对这两种情况进行封装，可以以一种统一的方式进行数据的拉取。\u003c/p\u003e\n\u003cp\u003e所以Repository其实是一种代码规范，并不是组件。\u003c/p\u003e\n\u003ch3 id=\"repository例子\"\u003eRepository例子\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eSingleton\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e PlantRepository \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eInject constructor(private val plantDao: PlantDao) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e//\u003c/span\u003e use the dao\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fun getPlants() \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e plantDao\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003egetPlants()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fun getPlant(plantId: \u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e plantDao\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003egetPlant(plantId)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fun getPlantsWithGrowZoneNumber(growZoneNumber: Int) \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        plantDao\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003egetPlantsWithGrowZoneNumber(growZoneNumber)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e//\u003c/span\u003e use the network service\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fun requestApi(): Plant\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"项目中的实际运用\"\u003e项目中的实际运用\u003c/h3\u003e\n\u003cp\u003e在市局测温项目中，实际上对Repository的使用更为复杂，整体的结构为首先定义一层datasource的接口类，然后在定义datasource的实现类，这里仅仅定义了一个remotedatasource的实现类，根据命名我感觉原本的架构想法应该是对于数据调接口一个实现类，数据库操作一个实现类。\u003c/p\u003e","title":"Android Learning 7"},{"content":"昨日主要学习了ROOM和协程，今天补充一些协程的知识，并且学习RecyclerView, Adapter和WorkManager。\nRecyclerView 在app中，有很多地方都需要用到列表来展示多个item，android提供了RecyclerView来支持大型列表，并且RecyclerView支持滑动，在显示有限个数量的item后，剩下的item需要滑动来获取。今天在昨天的睡眠质量的app的基础上将首页的历史记录改成使用RecyclerView来展示。\nAdapter 适配器模式 在Android的学习中，有很多的设计模式可以学习，这次来到了适配器模式。\n定义：用包装类来包装不兼容的对象，将一个类的接口转换成客户希望的另外一个接口。 举一个所有博文中都会举的一个例子，比如说在国际旅行的时候，在不同的国家充电器的规格都不一样，如果想要充电的话就需要转换器，那么这个转换器就相当于一个中间层，这个中间层就是Adapter层，通过这层来进行一个接口的转换达到兼容的目的。\n关于具体的思想在下面的慢慢使用中体会\nRecyclerView的使用 Step 1: 将所需要使用RecyclerView的布局添加RecyclerView\n1 2 3 4 5 6 7 8 9 \u0026lt;androidx.recyclerview.widget.RecyclerView android:id=\u0026#34;@+id/sleep_list\u0026#34; android:layout_width=\u0026#34;0dp\u0026#34; android:layout_height=\u0026#34;0dp\u0026#34; app:layout_constraintBottom_toTopOf=\u0026#34;@+id/clear_button\u0026#34; app:layout_constraintEnd_toEndOf=\u0026#34;parent\u0026#34; app:layout_constraintStart_toStartOf=\u0026#34;parent\u0026#34; app:layout_constraintTop_toBottomOf=\u0026#34;@+id/stop_button\u0026#34; app:layoutManager=\u0026#34;androidx.recyclerview.widget.LinearLayoutManager\u0026#34;/\u0026gt; Step 2：创建单个的Item的View，这里是TextView\n1 2 3 4 5 6 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;TextView xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; android:textSize=\u0026#34;24sp\u0026#34; android:paddingStart=\u0026#34;16dp\u0026#34; android:paddingEnd=\u0026#34;16dp\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; /\u0026gt; Step 3: 创建ViewHolder和Adapter，这里有必要说一下ViewHolder，ViewHolder用来绑定Adapter，主要是绑定Adapter和Adapter的布局文件，以及将item中的数据填充到Adapter中的布局文件，具体看代码吧。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 package com.example.android.trackmysleepquality.sleeptracker import android.view.LayoutInflater import android.view.View import android.view.ViewGroup import android.widget.ImageView import android.widget.TextView import androidx.recyclerview.widget.RecyclerView import com.example.android.trackmysleepquality.R import com.example.android.trackmysleepquality.convertDurationToFormatted import com.example.android.trackmysleepquality.convertNumericQualityToString import com.example.android.trackmysleepquality.database.SleepNight class SleepNightAdapter: RecyclerView.Adapter\u0026lt;SleepNightAdapter.ViewHolder\u0026gt;() { var data = listOf\u0026lt;SleepNight\u0026gt;() set(value) { field = value notifyDataSetChanged() } override fun getItemCount() = data.size override fun onBindViewHolder(holder: ViewHolder, position: Int) { val item = data[position] holder.bind(item) } override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder { return ViewHolder.from(parent) } class ViewHolder private constructor(itemView: View) : RecyclerView.ViewHolder(itemView){ val sleepLength: TextView = itemView.findViewById(R.id.sleep_length) val quality: TextView = itemView.findViewById(R.id.quality_string) val qualityImage: ImageView = itemView.findViewById(R.id.quality_image) fun bind(item: SleepNight) { val res = itemView.context.resources sleepLength.text = convertDurationToFormatted(item.startTimeMilli, item.endTimeMilli, res) quality.text = convertNumericQualityToString(item.sleepQuality, res) qualityImage.setImageResource(when (item.sleepQuality) { 0 -\u0026gt; R.drawable.ic_sleep_0 1 -\u0026gt; R.drawable.ic_sleep_1 2 -\u0026gt; R.drawable.ic_sleep_2 3 -\u0026gt; R.drawable.ic_sleep_3 4 -\u0026gt; R.drawable.ic_sleep_4 5 -\u0026gt; R.drawable.ic_sleep_5 else -\u0026gt; R.drawable.ic_sleep_active }) } companion object { fun from(parent: ViewGroup): ViewHolder { val layoutInflater = LayoutInflater.from(parent.context) val view = layoutInflater .inflate(R.layout.list_item_sleep_night, parent, false) return ViewHolder(view) } } } } Step 4：绑定RecyclerView和Adapter，绑定就比较简单，RecyclerView有adapter属性，然后创建一个Adpater赋值即可，如果数据有概统则更新adapter的数据。\n1 2 3 4 5 6 7 8 val adapter = SleepNightAdapter() binding.sleepList.adapter = adapter sleepTrackerViewModel.nights.observe(viewLifecycleOwner, Observer { it?.let { adapter.data = it } }) 整体就完成了RecyclerView的创建，虽然能够使用，但是对于其原理还是一知半解，所以下面进行RecyclerView的原理剖析。\nRecyclerView原理 这里是直接看的博文，说的还是很清楚，下面在总结一下，同样也将之前有些模糊的地方在学习一下。\nhttps://www.jianshu.com/p/c52b947fe064\n","permalink":"https://isyuanpeng.github.io/posts/tech/android-learning-6/","summary":"\u003cp\u003e昨日主要学习了ROOM和协程，今天补充一些协程的知识，并且学习RecyclerView, Adapter和WorkManager。\u003c/p\u003e\n\u003ch2 id=\"recyclerview\"\u003eRecyclerView\u003c/h2\u003e\n\u003cp\u003e在app中，有很多地方都需要用到列表来展示多个item，android提供了RecyclerView来支持大型列表，并且RecyclerView支持滑动，在显示有限个数量的item后，剩下的item需要滑动来获取。今天在昨天的睡眠质量的app的基础上将首页的历史记录改成使用RecyclerView来展示。\u003c/p\u003e\n\u003ch3 id=\"adapter\"\u003eAdapter\u003c/h3\u003e\n\u003ch4 id=\"适配器模式\"\u003e适配器模式\u003c/h4\u003e\n\u003cp\u003e在Android的学习中，有很多的设计模式可以学习，这次来到了适配器模式。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e定义：用包装类来包装不兼容的对象，将一个类的接口转换成客户希望的另外一个接口。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e举一个所有博文中都会举的一个例子，比如说在国际旅行的时候，在不同的国家充电器的规格都不一样，如果想要充电的话就需要转换器，那么这个转换器就相当于一个中间层，这个中间层就是Adapter层，通过这层来进行一个接口的转换达到兼容的目的。\u003c/p\u003e\n\u003cp\u003e关于具体的思想在下面的慢慢使用中体会\u003c/p\u003e\n\u003ch3 id=\"recyclerview的使用\"\u003eRecyclerView的使用\u003c/h3\u003e\n\u003cp\u003eStep 1: 将所需要使用RecyclerView的布局添加RecyclerView\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eandroidx\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erecyclerview\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewidget\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eRecyclerView\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        android:id\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;@+id/sleep_list\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        android:layout_width\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;0dp\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        android:layout_height\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;0dp\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        app:layout_constraintBottom_toTopOf\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;@+id/clear_button\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        app:layout_constraintEnd_toEndOf\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;parent\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        app:layout_constraintStart_toStartOf\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;parent\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        app:layout_constraintTop_toBottomOf\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;@+id/stop_button\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        app:layoutManager\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;androidx.recyclerview.widget.LinearLayoutManager\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eStep 2：创建单个的Item的View，这里是TextView\u003c/p\u003e","title":"Android Learning 6"},{"content":"今天学习android的数据库和协程\nROOM ROOM类似于JPA，能够定义DAO层使用预置的方法进行数据的操作。ROOM主要包含下面三个组件：\nDatabase数据库类: 用于保存数据库并作为应用持久性数据底层连接的主要访问点。其实我感觉Database的类就是提供了Dao层的实例。\nEntity实体类：用于表示应用的数据库中的表。\nDao类：提供您的应用可用于查询、更新、插入和删除数据库中的数据的方法。类似于Spring中的Dao层，定义了操作数据库的方法。\nEntity 实体类就是我们常见的实体类，使用的注解也和JPA类似\n@Entity(tableName = \u0026ldquo;users\u0026rdquo;)：该注解说明该类是一个实体类，并且关联了users的表\n@PrimaryKey：用于字段上，说明该字段是主键\n@ColumnInfo(name = \u0026ldquo;last_name\u0026rdquo;)：用于字段上，绑定实体类中的属性和表中的字段\n1 2 3 4 5 6 @Entity(tableName = \u0026#34;users\u0026#34;) data class User ( @PrimaryKey val id: Int, @ColumnInfo(name = \u0026#34;first_name\u0026#34;) val firstName: String?, @ColumnInfo(name = \u0026#34;last_name\u0026#34;) val lastName: String? ) Dao 在Dao类中定义方法来操作数据库。下面是一个简单样例：\n1 2 3 4 5 6 7 8 9 10 11 @Dao interface UserDao { @Insert fun insertAll(vararg users: User) @Delete fun delete(user: User) @Query(\u0026#34;SELECT * FROM user\u0026#34;) fun getAll(): List\u0026lt;User\u0026gt; } 可以看到提供了Insert和Delete的注解，不需要编码sql语句即可完成数据库操作，和JPA类似。\n@Insert 和 @Update: insert和update就是插入和更新，参数为实体类\n@Delete: 以实体类为参数删除实体，实体类中必须包含主键\n@Query: query就直接可以写原生的sql去查询或者去进行数据库的操作\nDatabase 关于Database类有点不太理解，已经有了Dao层去完成数据库操作，只需要在ViewModel中去引入Dao层然后操作即可，为什么还有要Database呢？下面是官方的样例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 @Database(entities = [SleepNight::class], version = 1, exportSchema = false) abstract class SleepDatabase : RoomDatabase() { abstract val sleepDatabaseDao: SleepDatabaseDao companion object { @Volatile private var INSTANCE: SleepDatabase? = null fun getInstance(context: Context): SleepDatabase { synchronized(this) { var instance = INSTANCE if (instance == null) { instance = Room.databaseBuilder( context.applicationContext, SleepDatabase::class.java, \u0026#34;sleep_history_database\u0026#34; ) .fallbackToDestructiveMigration() .build() INSTANCE = instance } return instance } } } }// Song and Album are classes annotated with @Entity. @Database(version = 1, entities = {Song.class, Album.class}) abstract class MusicDatabase : RoomDatabase { // SongDao is a class annotated with @Dao. abstract fun getSongDao(): SongDao // AlbumDao is a class annotated with @Dao. abstract fun getArtistDao(): ArtistDao // SongAlbumDao is a class annotated with @Dao. abstract fun getSongAlbumDao(): SongAlbumDao } 可以看到使用了@Database的注解，包含了版本号，以及实体类，这里的实体类比较好理解，是下面引用的Dao类的实体类。那么版本号呢？\n版本号用户数据库表结构的更新，如果数据库表结构变更了，则需要变更版本号，然后设置Database的实例创建增加fallbackToDestructiveMigration配置就可以了。\n但是这样做会有缺点，所有的数表都会被删掉，所以需要使用迁移功能。\n迁移功能在更新版本号的同事还需要重写migrate方法然后将表结构更改的语句加上即可，如下.\n1 2 3 4 5 6 7 8 static final Migration MIGRATION_1_2 = new Migration(1, 2) { @Override public void migrate(SupportSQLiteDatabase database) { //此处对于数据库中的所有更新都需要写下面的代码 database.execSQL(\u0026#34;ALTER TABLE users \u0026#34; + \u0026#34; ADD COLUMN last_update INTEGER\u0026#34;); } }; 加完之后database的实例加上.addMigrations(MIGRATION_1_2)就完成了。\n协程 一般java使用多线程来处理业务量比较大的操作，那么在android+kotlin里面使用协程来操作。\n如果一个应用必须等待某项任务完成后才能继续，那么系统可能会阻止其正常执行。例如，读取大文件或执行冗长的数据库调用就是可能会阻止或“阻塞”整个应用执行的任务。这样不仅会降低应用对用户的响应能力，而且也不能高效地利用硬件。执行长时间运行的任务而不阻塞主线程的一种模式是使用回调。这是一种有用的模式，但它有一些缺点。有关这些概念的介绍，请参阅多线程和回调入门指南。\n有关于协程的知识，官方解释的很清楚：\n在 Kotlin 中，使用协程来顺畅且高效地处理长时间运行的任务，而不是回调。Kotlin 协程使您能够将基于回调的代码转换为顺序代码。顺序编写的代码通常更易于阅读和维护。与回调不同，协程可以安全地使用有价值的语言功能，如异常。最重要的是，协程具有更高程度的可维护性和灵活性。最后，协程和回调执行相同的功能：它们都能够处理应用中可能长时间运行的异步任务。\n简而言之，对于需要回调的方法来说，使用协程可以不等回调，顺序执行。\n有关协程的操作可以看官方文档:\nhttps://kotlinlang.org/docs/coroutines-guide.html\n协程在android中的使用 如room中的操作，对于数据库的操作完全可以使用协程后台操作。所以上述的简单样例可以改成这样：\n1 2 3 4 5 6 7 8 9 10 11 @Dao interface UserDao { @Insert suspend fun insertAll(vararg users: User) @Delete suspend delete(user: User) @Query(\u0026#34;SELECT * FROM user\u0026#34;) suspend getAll(): List\u0026lt;User\u0026gt; } 更多的协程的知识，请看系列博文：\nhttps://juejin.cn/post/6953441828100112392\n","permalink":"https://isyuanpeng.github.io/posts/tech/android-learning-5/","summary":"\u003cp\u003e今天学习android的数据库和协程\u003c/p\u003e\n\u003ch2 id=\"room\"\u003eROOM\u003c/h2\u003e\n\u003cp\u003eROOM类似于JPA，能够定义DAO层使用预置的方法进行数据的操作。ROOM主要包含下面三个组件：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eDatabase数据库类: 用于保存数据库并作为应用持久性数据底层连接的主要访问点。其实我感觉Database的类就是提供了Dao层的实例。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eEntity实体类：用于表示应用的数据库中的表。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDao类：提供您的应用可用于查询、更新、插入和删除数据库中的数据的方法。类似于Spring中的Dao层，定义了操作数据库的方法。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"entity\"\u003eEntity\u003c/h3\u003e\n\u003cp\u003e实体类就是我们常见的实体类，使用的注解也和JPA类似\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e@Entity(tableName = \u0026ldquo;users\u0026rdquo;)：该注解说明该类是一个实体类，并且关联了users的表\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e@PrimaryKey：用于字段上，说明该字段是主键\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e@ColumnInfo(name = \u0026ldquo;last_name\u0026rdquo;)：用于字段上，绑定实体类中的属性和表中的字段\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@Entity(tableName = \u0026#34;users\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edata class User (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @PrimaryKey val id: Int,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @ColumnInfo(name = \u0026#34;first_name\u0026#34;) val firstName: String?,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @ColumnInfo(name = \u0026#34;last_name\u0026#34;) val lastName: String?\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"dao\"\u003eDao\u003c/h3\u003e\n\u003cp\u003e在Dao类中定义方法来操作数据库。下面是一个简单样例：\u003c/p\u003e","title":"Android Learning 5"},{"content":"技术学习 今日的技术学习内容为ViewModel和LiveData，这部分的内容相当于就是Android的架构学习，了解一个Android项目由哪些部分组成，如何去按照规范分层编写代码。\nAndroid架构 MVVM(Model-View-ViewModel) Google 2015年I/O大会上推出了DataBinding的框架，使用了MVVM的模式，MVVM的思想就是从APP的业务逻辑中分离数据持久层。\nModel: 实体类模型。Model提供了数据提取接口供ViewModel使用，经过数据转换和操作最终映射绑定到View层的某个UI元素的属性上。\nView: 对应Activity和XML布局文件。不进行业务代码的编码，主要作用初始化控件，处理事件。简单地说：View层不做任何业务逻辑、不涉及操作数据、不处理数据，UI和数据严格的分开。\nViewModel: 负责完成View和Model之间的交互。ViewModel只做和业务逻辑和业务数据相关的事，不做任何和UI相关的事情，ViewModel 层不会持有任何控件的引用，更不会在ViewModel中通过UI控件的引用去做更新UI的事情。\nhttps://tech.meituan.com/2016/11/11/android-mvvm.html\nAAC(Android Architecture Components) Google 2017年I/O大会上发布了AAC，个人感觉就是在上述MVVM的基础上封装好了所有实现的组件，开发者仅需调用即可。其包含一下框架或者组件:\nROOM: 类似于JPA的持久层框架，用于数据的持久化解决方案。 WorkManager: 管理后台任务，类似于一个框架去管理后台的Service。 Lifecycle: 存储生命周期状态并且允许其它组件访问。 ViewModel: 上面MVVM架构中的ViewModel的实现，专注于业务的处理。 LiveData: 使用LiveData构建数据对象，在数据改变的时候，UI改变。 Navigation：导航，负责页面的跳转。 重点在于Room、ViewModel、LiveData、Navigation的使用，前面已经学习了Navigation，主要用于Fragment的跳转，可以定义不同的action，执行去执行该Action来进行不同Fragment的跳转。下面学习比较重要的ViewModel和LiveData。\nLiveData 观察者模式 之前一直没有领悟到观察者模式的精髓，在Android中有很多地方都使用了观察者模式，比如，监听点击事件。对于观察者来说，它并不关心观察对象的数据是如何过来的，而只关心数据过来后进行怎样的处理。\nLiveData格式 在写代码的时候根据固定的格式可以很轻松的写出LiveData的数据观察，ViewModel中定义LiveData，Fragment或者Activity中绑定ViewModel，然后监听LiveData的改变。\n1 2 3 4 5 6 7 8 9 10 11 12 // viewModel中定义LiveData 以及LiveData改变的处理逻辑 // 下面这段代码就是定义了一个游戏结束的flag， private val _eventGameFinish = MutableLiveData\u0026lt;Boolean\u0026gt;() val eventGameFinish: LiveData\u0026lt;Boolean\u0026gt; get() = _eventGameFinish // 然后在fragment中监听LiveData的更新 根据LiveData中存储的flag进行不同的页面处理 viewModel.eventGameFinish.observe(viewLifecycleOwner, Observer { hasFinished -\u0026gt; if (hasFinished) { gameFinished() } }) 在其中有几个点需要明确一下:\nMutableLiveData: 父类LiveData\nLiveData中的类型如果是实体类则可以指定某个字段的数据更新，而MutableLiveData则要整个实体类或者基础数据类型的值发生改变话才会通知，不会具体到细节。 LiveData不可变，MutableLiveData可变。重点说下可变和不可变，LiveData的属性为protected，而MutableLiveData为public viewLifecycleOwner: 这里的为什么不用this，下面这篇博文讲的很好。\nhttps://juejin.cn/post/6915222252506054663\nLiveData原理 原理直接看博文吧，这个博主的系列都值得一看。\nhttps://juejin.cn/post/6844903748574117901\nViewModel ViewModel将数据的处理和View层剥离开来，专注于数据的处理。这部分的代码比较容易理解，具体直接看官方文档的ViewModel即可。\nhttps://developer.android.com/topic/libraries/architecture/viewmodel?hl=zh-cn\n","permalink":"https://isyuanpeng.github.io/posts/tech/android-learning-4/","summary":"\u003ch2 id=\"技术学习\"\u003e技术学习\u003c/h2\u003e\n\u003cp\u003e今日的技术学习内容为ViewModel和LiveData，这部分的内容相当于就是Android的架构学习，了解一个Android项目由哪些部分组成，如何去按照规范分层编写代码。\u003c/p\u003e\n\u003ch3 id=\"android架构\"\u003eAndroid架构\u003c/h3\u003e\n\u003ch4 id=\"mvvmmodel-view-viewmodel\"\u003eMVVM(Model-View-ViewModel)\u003c/h4\u003e\n\u003cp\u003eGoogle 2015年I/O大会上推出了DataBinding的框架，使用了MVVM的模式，MVVM的思想就是从APP的业务逻辑中分离数据持久层。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eModel: 实体类模型。Model提供了数据提取接口供ViewModel使用，经过数据转换和操作最终映射绑定到View层的某个UI元素的属性上。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eView: 对应Activity和XML布局文件。不进行业务代码的编码，主要作用初始化控件，处理事件。简单地说：View层不做任何业务逻辑、不涉及操作数据、不处理数据，UI和数据严格的分开。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eViewModel: 负责完成View和Model之间的交互。ViewModel只做和业务逻辑和业务数据相关的事，不做任何和UI相关的事情，ViewModel 层不会持有任何控件的引用，更不会在ViewModel中通过UI控件的引用去做更新UI的事情。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://tech.meituan.com/2016/11/11/android-mvvm.html\"\u003ehttps://tech.meituan.com/2016/11/11/android-mvvm.html\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch4 id=\"aacandroid-architecture-components\"\u003eAAC(Android Architecture Components)\u003c/h4\u003e\n\u003cp\u003eGoogle 2017年I/O大会上发布了AAC，个人感觉就是在上述MVVM的基础上封装好了所有实现的组件，开发者仅需调用即可。其包含一下框架或者组件:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eROOM: 类似于JPA的持久层框架，用于数据的持久化解决方案。\u003c/li\u003e\n\u003cli\u003eWorkManager: 管理后台任务，类似于一个框架去管理后台的Service。\u003c/li\u003e\n\u003cli\u003eLifecycle: 存储生命周期状态并且允许其它组件访问。\u003c/li\u003e\n\u003cli\u003eViewModel: 上面MVVM架构中的ViewModel的实现，专注于业务的处理。\u003c/li\u003e\n\u003cli\u003eLiveData: 使用LiveData构建数据对象，在数据改变的时候，UI改变。\u003c/li\u003e\n\u003cli\u003eNavigation：导航，负责页面的跳转。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e重点在于Room、ViewModel、LiveData、Navigation的使用，前面已经学习了Navigation，主要用于Fragment的跳转，可以定义不同的action，执行去执行该Action来进行不同Fragment的跳转。下面学习比较重要的ViewModel和LiveData。\u003c/p\u003e\n\u003ch3 id=\"livedata\"\u003eLiveData\u003c/h3\u003e\n\u003ch4 id=\"观察者模式\"\u003e观察者模式\u003c/h4\u003e\n\u003cp\u003e之前一直没有领悟到观察者模式的精髓，在Android中有很多地方都使用了观察者模式，比如，监听点击事件。对于观察者来说，它并不关心观察对象的数据是如何过来的，而只关心数据过来后进行怎样的处理。\u003c/p\u003e\n\u003ch4 id=\"livedata格式\"\u003eLiveData格式\u003c/h4\u003e\n\u003cp\u003e在写代码的时候根据固定的格式可以很轻松的写出LiveData的数据观察，ViewModel中定义LiveData，Fragment或者Activity中绑定ViewModel，然后监听LiveData的改变。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    // viewModel中定义LiveData 以及LiveData改变的处理逻辑\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    // 下面这段代码就是定义了一个游戏结束的flag，\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    private val _eventGameFinish = MutableLiveData\u0026lt;Boolean\u0026gt;()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    val eventGameFinish: LiveData\u0026lt;Boolean\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        get() = _eventGameFinish\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    // 然后在fragment中监听LiveData的更新 根据LiveData中存储的flag进行不同的页面处理\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    viewModel.eventGameFinish.observe(viewLifecycleOwner, Observer { hasFinished -\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        if (hasFinished) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            gameFinished()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    })\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e在其中有几个点需要明确一下:\u003c/p\u003e","title":"Android Learning 4"},{"content":"Android学习的第三篇文章，跟着google的官方教程来到了lesson2，开始进行Layout的学习。\nViewGroups view的集合，构成了布局的结构。layout的构建使用有层级的View和ViewGroup对象。layout的结构如下：\nLinearLayout 线性布局，UI元素被水平或者垂直摆放。\nandroid:orientation: 布局方向，设置为水平或者垂直布局\nhorizontal: 水平，默认方向 vertical：垂直 android:layout_gravity: 子控件在父控件上的对齐方式\nandroid:gravity: 控件内部的元素的对齐方式，支持多个方向，示例如下，下面的TextView中的text就在整个TextView的居中靠下的方向:\n1 2 3 4 5 6 7 \u0026lt;TextView android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:layout_weight=\u0026#34;1\u0026#34; android:gravity=\u0026#34;bottom|center\u0026#34; android:text=\u0026#34;TEST GRAVITY\u0026#34; android:textSize=\u0026#34;50sp\u0026#34;/\u0026gt; android:layout_weight: 子控件在父控件中的权重，说白了就是占多大，比如说一个LinearLayout有5个button，每个button的weight都是1，那么其orientation方向上均分5分，每个button占1/5\n其它的参数例如margin，padding等等和其它控件都是相同的，不赘述\nRelativeLayout 相对布局，以相对位置显示子控件。说白了，就是可以指定子控件相对于其它控件的位置，比如说有两个buttonA和buttonB，如果想要buttonB布局在buttonA的右下方45度的未知，那么直接可以用两行就可以解决了，不需要嵌套多个LinearLayout。\n1 2 android:layout_below=\u0026#34;@+id/buttonA\u0026#34; android:layout_centerHorizontal=\u0026#34;true\u0026#34; alignParentXx: 这个系列的参数都是相较于父控件而言的，相对于父控件停靠在哪个位置，Top, Bottom, left, right\nalignXx: 这个系列的参数都是与周围的空间边界对其，同样是上下左右。\ncenterXx: 相对于父控件居中\n具体的参数直接试一把就知道了是如何相对布局的了，下面是测试代码。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 \u0026lt;RelativeLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34;\u0026gt; \u0026lt;!-- @+id新定义id 在R类中新定义一个整数常量 如果常量已存在就引用现有常量 @id引用id 在引用id时也可以使用@+id 但是如果写错的已存在的id就会新创建一个整数常量 所以为了严谨应该用@id --\u0026gt; \u0026lt;Button android:id=\u0026#34;@+id/button1\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;btn1\u0026#34; /\u0026gt; \u0026lt;Button android:id=\u0026#34;@+id/button2\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:layout_alignParentTop=\u0026#34;true\u0026#34; android:layout_centerHorizontal=\u0026#34;true\u0026#34; android:text=\u0026#34;btn2\u0026#34; /\u0026gt; \u0026lt;Button android:id=\u0026#34;@+id/button3\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:layout_alignParentTop=\u0026#34;true\u0026#34; android:layout_alignParentRight=\u0026#34;true\u0026#34; android:text=\u0026#34;btn3\u0026#34; /\u0026gt; \u0026lt;Button android:id=\u0026#34;@+id/button4\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:layout_alignParentLeft=\u0026#34;true\u0026#34; android:layout_centerVertical=\u0026#34;true\u0026#34; android:text=\u0026#34;btn4\u0026#34; /\u0026gt; \u0026lt;Button android:id=\u0026#34;@+id/button5\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:layout_centerInParent=\u0026#34;true\u0026#34; android:text=\u0026#34;btn5\u0026#34; /\u0026gt; \u0026lt;Button android:id=\u0026#34;@+id/button6\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:layout_alignParentRight=\u0026#34;true\u0026#34; android:layout_centerVertical=\u0026#34;true\u0026#34; android:text=\u0026#34;btn6\u0026#34; /\u0026gt; \u0026lt;Button android:id=\u0026#34;@+id/button7\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:layout_alignParentLeft=\u0026#34;true\u0026#34; android:layout_alignParentBottom=\u0026#34;true\u0026#34; android:text=\u0026#34;btn7\u0026#34; /\u0026gt; \u0026lt;Button android:id=\u0026#34;@+id/button8\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:layout_alignParentBottom=\u0026#34;true\u0026#34; android:layout_centerHorizontal=\u0026#34;true\u0026#34; android:text=\u0026#34;btn8\u0026#34; /\u0026gt; \u0026lt;Button android:id=\u0026#34;@+id/button9\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:layout_alignParentRight=\u0026#34;true\u0026#34; android:layout_alignParentBottom=\u0026#34;true\u0026#34; android:text=\u0026#34;btn9\u0026#34; /\u0026gt; \u0026lt;Button android:id=\u0026#34;@+id/button10\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:layout_above=\u0026#34;@id/button4\u0026#34; android:layout_below=\u0026#34;@id/button1\u0026#34; android:layout_alignRight=\u0026#34;@id/button2\u0026#34; android:layout_toRightOf=\u0026#34;@id/button1\u0026#34; android:text=\u0026#34;btn10\u0026#34; /\u0026gt; \u0026lt;Button android:id=\u0026#34;@+id/button11\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:layout_above=\u0026#34;@id/button7\u0026#34; android:layout_alignTop=\u0026#34;@id/button4\u0026#34; android:layout_toLeftOf=\u0026#34;@id/button5\u0026#34; android:layout_toRightOf=\u0026#34;@id/button4\u0026#34; android:text=\u0026#34;btn11\u0026#34; /\u0026gt; \u0026lt;Button android:id=\u0026#34;@+id/button12\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:layout_alignBaseline=\u0026#34;@id/button11\u0026#34; android:layout_toLeftOf=\u0026#34;@id/button6\u0026#34; android:layout_toRightOf=\u0026#34;@id/button11\u0026#34; android:text=\u0026#34;btn12\u0026#34; /\u0026gt; \u0026lt;/RelativeLayout\u0026gt; Activity and Intent Activity https://developer.android.com/guide/components/activities/intro-activities\n其实Activity就两个作用：\n展示页面内容\n响应用户交互\n重点在于Activity的生命周期，因为用户在使用APP期间，Activity并不是一成不变的，需要根据用户的操作来进行不同的变化。Activity会提供很多回调类，这些回调让Activity知道状态正在改变。\n在生命周期回调方法中，您可以声明用户离开和再次进入 Activity 时 Activity 的行为方式。例如，如果您正构建流媒体视频播放器，当用户切换至另一应用时，您可能要暂停视频或终止网络连接。当用户返回时，您可以重新连接网络并允许用户从同一位置继续播放视频。换言之，每个回调都支持您执行适合给定状态变更的特定作业。在合适的时间执行正确的作业，并妥善处理转换，这将提升应用的稳健性和性能。\n生命周期 简单来说，Activity归属于task管理(每个app一个task)，task中使用stack来保存Activity，用户在页面上进行操作切换Activity的时候相当于这些Activity在出栈和入栈，那么既然Activity在不停的变化，那么它整个从产生到变化到销毁的过程就会有个生命周期来定义。对于生命周期，讲解的比较多，直接看文档就行。\nhttps://developer.android.google.cn/guide/components/activities/activity-lifecycle\nonCreate(): activity init\nonStart(): app becomes visble on the screem\nonResume(): app gains the user focus\nonPause(): focus is lost\nonStop(): no longerr visible\nonDestory(): destroy activity\n启动模式 在manifest文件中我们添加新的Activity，同样可以为它设置启动模式，android:launchMode=，这个配置用来处理Activity和task的关系，task处理Activity的逻辑\nstandard: 默认模式，系统在启动该 Activity 的任务中创建 Activity 的新实例，并将 intent 传送给该实例。Activity 可以多次实例化，每个实例可以属于不同的任务，一个任务可以拥有多个实例。\nsingleTop：如果当前任务的顶部已存在 Activity 的实例，则系统会通过调用其 onNewIntent() 方法来将 intent 转送给该实例，而不是创建 Activity 的新实例。Activity 可以多次实例化，每个实例可以属于不同的任务，一个任务可以拥有多个实例（但前提是返回堆栈顶部的 Activity 不是该 Activity 的现有实例）。\n例如，假设任务的返回堆栈包含根 Activity A 以及 Activity B、C 和位于顶部的 D（堆栈为 A-B-C-D；D 位于顶部）。收到以 D 类型 Activity 为目标的 intent。如果 D 采用默认的 \u0026ldquo;standard\u0026rdquo; 启动模式，则会启动该类的新实例，并且堆栈将变为 A-B-C-D-D。但是，如果 D 的启动模式为 \u0026ldquo;singleTop\u0026rdquo;，则 D 的现有实例会通过 onNewIntent() 接收 intent，因为它位于堆栈顶部，堆栈仍为 A-B-C-D。但是，如果收到以 B 类型 Activity 为目标的 intent，则会在堆栈中添加 B 的新实例，即使其启动模式为 \u0026ldquo;singleTop\u0026rdquo; 也是如此。\nsingleTask: 系统会创建新任务，并实例化新任务的根 Activity。但是，如果另外的任务中已存在该 Activity 的实例，则系统会通过调用其 onNewIntent() 方法将 intent 转送到该现有实例，而不是创建新实例。Activity 一次只能有一个实例存在。\nsingleInstance: 与 \u0026ldquo;singleTask\u0026rdquo; 相似，唯一不同的是系统不会将任何其他 Activity 启动到包含该实例的任务中。该 Activity 始终是其任务唯一的成员；由该 Activity 启动的任何 Activity 都会在其他的任务中打开。\nActivity跳转 startActivity(): 从一个Activity启动另一个Activity，没有返回结果 1 2 3 4 bind.buttonGuessWord.setOnClickListener { val intent2 = Intent(this, GuessTheWordActivity::class.java) startActivity(intent2) } startActivityForResult(): 跳转Activity带结果 Intent 一个Activity的启动伴随着一个intent，一个Intent是一个异步的消息在不同的Activity中传递。\nIntent分为显性和隐性的：\nexplicit 显性: 明确知道intent的target，已经知道明确的Activity的class名称。 implicit 隐性：通用的，并没有明确的目标。 具体作用 启动Activity，通过传递intent给startActivity()可以切换Activity。\n启动Service，通过将intent传递给startService()来启动服务执行一次性操作。\n传递广播，通过将intent传递给sendBroadcast()来将广播传递给其它应用。\nServices Service是一种可以在后台执行长时间运行操作而不提供界面的应用组件。需要注意的是Service运行在主线程中，如果要在主线程之外操作，则创建线程。\n分类 前台服务：前台服务执行一些用户能注意到的操作。例如，音频应用会使用前台服务来播放音频曲目。前台服务必须显示通知。即使用户停止与应用的交互，前台服务仍会继续运行。\n后台服务：后台服务执行用户不会直接注意到的操作。例如，如果应用使用某个服务来压缩其存储空间，则此服务通常是后台服务。\n绑定服务：当应用组件通过调用 bindService() 绑定到服务时，服务即处于绑定状态。绑定服务会提供客户端-服务器接口，以便组件与服务进行交互、发送请求、接收结果，甚至是利用进程间通信 (IPC) 跨进程执行这些操作。仅当与另一个应用组件绑定时，绑定服务才会运行。多个组件可同时绑定到该服务，但全部取消绑定后，该服务即会被销毁。\nService的方法 onStartCommand(): 启动服务后会调用该方法并在后台无限期运行，此方法返回整型数，返回的标识如下：\nSTART_NOT_STICKY：返回后终止服务 START_STICKY：无限期运行 START_REDELIVER_INTENT：主动执行后立即恢复的 onBind()：另外一个组件想和服务绑定，使用该方法\nonCreate()：首次创建服务，调用 onStartCommand() 或 onBind() 之前调用，执行初始化\nonDestroy()：不再使用服务，销毁时使用\nContent Provider 多个APP之间共享数据。相当于有一个Provider APP提供数据的操作，其它的APP可以访问Provider存的数据。\n整体的数据访问依靠约定的URI，具体如何操作看\nhttps://github.com/linsir6/AndroidNote/blob/master/AndroidNote/Android%E5%9F%BA%E7%A1%80/ContentProvider%E5%AE%9E%E4%BE%8B%E8%AF%A6%E8%A7%A3.md\nBroadcastReceiver 主要用来监听系统或者应用发出的广播消息，然后监听该广播消息进行相应的逻辑的处理。\nhttps://github.com/linsir6/AndroidNote/blob/master/AndroidNote/Android%E5%9F%BA%E7%A1%80/BroadcastReceiver%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90.md\n","permalink":"https://isyuanpeng.github.io/posts/tech/android-learning-3/","summary":"\u003cp\u003eAndroid学习的第三篇文章，跟着google的官方教程来到了lesson2，开始进行Layout的学习。\u003c/p\u003e\n\u003ch2 id=\"viewgroups\"\u003eViewGroups\u003c/h2\u003e\n\u003cp\u003eview的集合，构成了布局的结构。layout的构建使用有层级的\u003cem\u003eView\u003c/em\u003e和\u003cem\u003eViewGroup\u003c/em\u003e对象。layout的结构如下：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://developer.android.com/images/viewgroup_2x.png\" alt=\"layout\"  title=\"Layout\"  /\u003e\n\u003c/p\u003e\n\u003ch3 id=\"linearlayout\"\u003eLinearLayout\u003c/h3\u003e\n\u003cp\u003e线性布局，UI元素被水平或者垂直摆放。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://developer.android.com/codelabs/kotlin-android-training-linear-layout/img/6ad9b15635c00d6.png\" alt=\"LinearLayout\"  title=\"LinearLayout\"  /\u003e\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eandroid:orientation: 布局方向，设置为水平或者垂直布局\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ehorizontal: 水平，默认方向\u003c/li\u003e\n\u003cli\u003evertical：垂直\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eandroid:layout_gravity: 子控件在父控件上的对齐方式\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eandroid:gravity: 控件内部的元素的对齐方式，支持多个方向，示例如下，下面的TextView中的text就在整个TextView的居中靠下的方向:\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;TextView\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        android:layout_width=\u0026#34;match_parent\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        android:layout_height=\u0026#34;wrap_content\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        android:layout_weight=\u0026#34;1\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        android:gravity=\u0026#34;bottom|center\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        android:text=\u0026#34;TEST GRAVITY\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        android:textSize=\u0026#34;50sp\u0026#34;/\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eandroid:layout_weight: 子控件在父控件中的权重，说白了就是占多大，比如说一个LinearLayout有5个button，每个button的weight都是1，那么其orientation方向上均分5分，每个button占1/5\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e其它的参数例如margin，padding等等和其它控件都是相同的，不赘述\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"relativelayout\"\u003eRelativeLayout\u003c/h3\u003e\n\u003cp\u003e相对布局，以相对位置显示子控件。说白了，就是可以指定子控件相对于其它控件的位置，比如说有两个buttonA和buttonB，如果想要buttonB布局在buttonA的右下方45度的未知，那么直接可以用两行就可以解决了，不需要嵌套多个LinearLayout。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    android:layout_below=\u0026#34;@+id/buttonA\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    android:layout_centerHorizontal=\u0026#34;true\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003ealignParentXx: 这个系列的参数都是相较于父控件而言的，相对于父控件停靠在哪个位置，Top, Bottom, left, right\u003c/p\u003e","title":"Android Learning 3"},{"content":"今天先创建第一个app，跟的课程是google推荐的Developing Android Apps with Kotlin https://classroom.udacity.com/courses/ud9012\n由于上面这个课程都是视频，所以也跟着google的kotlin android training get started补充理论知识\n1. Explore Android Studio 上一篇文章已经讲过了gradle在项目中的结构，除了gradle外，其它的代码文件的分布也和java的项目类似，主要说一下其它文件夹。\nres/layout android的布局文件夹，每一个Activity对应一个xml布局文件，在布局文件里面可以看到Activity的页面UI显示。\nAndroidManifest.xml 一直以为是mainfest，结果是manifest(清单)，列举了android系统运行app所需要的清单(Activity列表和权限)。\n2. Anatomy(剖析) of Basic Android Project 下面就开始进行第一个app的开发，app叫dice roller(投色子)，创建一个空项目后打开运行可以看到Hello World，就证明整个环境是通的。下面看代码。\nMainActivity 首先看到的类是MainActivity，MainActivity就是Hello world这个页面的Activity。而页面的layout就是res/layout下的activity_main.xml，layout命名规则名称后置。对于Activity和layout中的xml的理解，和前端的html和js的关系类似，js处理交互逻辑，html显示页面UI，这里就是Activity处理交互逻辑，xml文件显示页面UI。\n1 class MainActivity : AppCompatActivity() { ... 可以看到MainActicity继承自AppCompatActivity，AppCompatAcitvity是Activity的一个子类，兼容性和新特性都很好。\nonCreate() 1 2 3 4 override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) } Activity不用构造器去初始化对象，而是用生命周期函数，onCreate()就是一个生命周期函数，它是Activity生命周期中的开始。\nsetContentView()用来绑定当前Activity和layout的xml文件。R.layout.activity_main，这里绑定的layout xml文件使用了R class，R class包含了app在res下所有的静态资源，R.layout就相当于res下的layout文件夹。\nactivity_main.xml 下面来看一下layout的xml文件，前面已经解释过了xml文件的作用，下面就看一下代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;LinearLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; xmlns:tools=\u0026#34;http://schemas.android.com/tools\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; tools:context=\u0026#34;.MainActivity\u0026#34; \u0026gt; \u0026lt;TextView android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;Hello World!\u0026#34; /\u0026gt; \u0026lt;/LinearLayout\u0026gt; 顶级的标签是 是android中比较常用的布局，顾名思义，线性布局，在水平或者垂直方向上一个接一个排列。点进去可以看到 LinearLayout 继承自 ViewGroup，可以包含其它多个views并且指定view的在屏幕上的定位。\n作用是展示text，*android:text=\u0026ldquo;Hello World!\u0026quot;*是展示的text。\nlayout xml文件和activity联动 按照教程上所说，添加一个button，具体按照教程走，主要是添加完button后，为 添加一个id android:id=\u0026rdquo;@+id/roll_button\u0026quot;，就相当于为当前的控件添加一个唯一的id，然后我们在Activity中通过R class获取到该控件进行相关的操作。rollButton.setOnClickListener { rollDice() }点击事件的监听方法，当触发点击时间后，进行相关的操作。\n1 2 val rollButton: Button = findViewById(R.id.roll_button) rollButton.setOnClickListener { rollDice() } 通过点击button，我们可以改变之前的 **的text，很好理解。\n如果我们把 换成 我们就可以根据buttom去切换图片，代码如下，教程代码。\n1 2 3 4 5 6 7 8 9 10 11 12 13 private fun rollDice() { val randomInt = Random().nextInt(6) + 1; val diceImage: ImageView = findViewById(R.id.dice_view) val drawableResource = when (randomInt) { 1 -\u0026gt; R.drawable.dice_1 2 -\u0026gt; R.drawable.dice_2 3 -\u0026gt; R.drawable.dice_3 4 -\u0026gt; R.drawable.dice_4 5 -\u0026gt; R.drawable.dice_5 else -\u0026gt; R.drawable.dice_6 } diceImage.setImageResource(drawableResource) } 至此，就完成了第一个投色子的app，下面就是在项目过程中遇到问题。\n3. 创建第一个项目中遇到的问题 Installed Build Tools revision 31.0.0 is corrupted. Remove and install again using the SDK Manager 构建工具的版本冲突，使用sdk管理工具删除重新安装。可以尝试删除重新安装tools，或者直接在Project Structure -\u0026gt; Moudules选择个低版本的，我使用的是第二种方法。\nApps targeting Android 12 and higher are required to specify an explicit value for android:exported android12以上的app需要去指定一个属性android:exported，如果使用了intent过滤器，则必须要显示声明该属性。\n1 2 3 4 5 6 7 \u0026lt;activity android:name=\u0026#34;.MainActivity\u0026#34; android:exported=\u0026#34;false\u0026#34;\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026#34;android.intent.action.MAIN\u0026#34; /\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.LAUNCHER\u0026#34; /\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/activity\u0026gt; Failed to calculate the value of task \u0026lsquo;:app:mergeLibDexDebug\u0026rsquo; property \u0026rsquo;numberOfBuckets\u0026rsquo; \u0026gt; Expected minSdkVersion \u0026gt;= 21 but found 1 这个是创建模拟器的问题，生成新的模拟器后无此问题。\n","permalink":"https://isyuanpeng.github.io/posts/tech/android-learning-2/","summary":"\u003cp\u003e今天先创建第一个app，跟的课程是google推荐的Developing Android Apps with Kotlin \u003ca href=\"https://classroom.udacity.com/courses/ud9012\"\u003ehttps://classroom.udacity.com/courses/ud9012\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e由于上面这个课程都是视频，所以也跟着google的kotlin android training get started补充理论知识\u003c/p\u003e\n\u003ch2 id=\"1-explore-android-studio\"\u003e1. Explore Android Studio\u003c/h2\u003e\n\u003cp\u003e上一篇文章已经讲过了gradle在项目中的结构，除了gradle外，其它的代码文件的分布也和java的项目类似，主要说一下其它文件夹。\u003c/p\u003e\n\u003ch3 id=\"reslayout\"\u003eres/layout\u003c/h3\u003e\n\u003cp\u003eandroid的布局文件夹，每一个Activity对应一个xml布局文件，在布局文件里面可以看到Activity的页面UI显示。\u003c/p\u003e\n\u003ch3 id=\"androidmanifestxml\"\u003eAndroidManifest.xml\u003c/h3\u003e\n\u003cp\u003e一直以为是mainfest，结果是manifest(清单)，列举了android系统运行app所需要的清单(Activity列表和权限)。\u003c/p\u003e\n\u003ch2 id=\"2-anatomy剖析-of-basic-android-project\"\u003e2. Anatomy(剖析) of Basic Android Project\u003c/h2\u003e\n\u003cp\u003e下面就开始进行第一个app的开发，app叫dice roller(投色子)，创建一个空项目后打开运行可以看到Hello World，就证明整个环境是通的。下面看代码。\u003c/p\u003e\n\u003ch3 id=\"mainactivity\"\u003eMainActivity\u003c/h3\u003e\n\u003cp\u003e首先看到的类是MainActivity，MainActivity就是Hello world这个页面的Activity。而页面的layout就是res/layout下的activity_main.xml，layout命名规则名称后置。对于Activity和layout中的xml的理解，和前端的html和js的关系类似，js处理交互逻辑，html显示页面UI，这里就是Activity处理交互逻辑，xml文件显示页面UI。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eclass MainActivity : AppCompatActivity() { ...\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e可以看到MainActicity继承自AppCompatActivity，AppCompatAcitvity是Activity的一个子类，兼容性和新特性都很好。\u003c/p\u003e\n\u003ch3 id=\"oncreate\"\u003eonCreate()\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eoverride fun onCreate(savedInstanceState: Bundle?) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   super.onCreate(savedInstanceState)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   setContentView(R.layout.activity_main)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eActivity不用构造器去初始化对象，而是用生命周期函数，onCreate()就是一个生命周期函数，它是Activity生命周期中的开始。\u003c/p\u003e","title":"Android Learning 2"},{"content":"2021年10月份成为兼职Android开发，之前一直没正式系统学习，现在开一个series来记录Android的学习。\nGradle 开始学习android的时候，相信gradle是大家绕不开的一个地方，因为android的环境很难调通，很多依赖下载也是状况百出。但是即使这样，很多人也是选择解决问题后就不去深究背后的原理，选择直接绕过gradle直接写项目，遂在android学习的第一章先学习gradle。 题外话，最新版的springboot已经由maven改为使用gradle来进行构建项目。\n什么是Gradle gradle本质上是个打包工具，结合了ant和maven的优点(没感觉出来)\nhttps://www.zhihu.com/question/30432152\n先把普通的gradle目录结构放出来，便于后面的理解。\n1 2 3 4 5 6 7 8 9 root: gradle: wrapper: - gradle-wrapper.properties # 指定gradle版本号 - gradle-wrapper.jar # 安装部署gradle包 - build.gradle # 构建脚本 - settings.gradle # 指定工程名 - gradlew.bat # windows安装gradle命令 去执行jar包 - gradlew # linux安装gradle命令 去执行jar包 Gradle Wrapper(gradlew) 直到现在见到Gradle Wrapper(包装纸)也很迷惑，不知道这是什么，有什么作用。下面先从官方的解释开始看起：\nThe Wrapper is a script that invokes a declared version of Gradle, downloading it beforehand if necessary. As a result, developers can get up and running with a Gradle project quickly without having to follow manual installation processes saving your company time and money.\n大意就是Wrapper就是一个invokes(调用)gradle版本号，如果有必要先下载该版本gradle的脚本，解决了手动安装gradle的过程。\ngradlew的生成很简单，安装完gradle后执行 gradle wrapper, 生成完wrapper后我们可以看到目录下多了个这样的结构:\n1 2 3 4 5 6 7 root: gradle: wrapper: - gradle-wrapper.properties - gradle-wrapper.jar - gradlew.bat - gradlew gradle-wrapper.properties: 顾名思义，gradlew的配置项 GRADLE_USER_HOME 默认~/.gradle/，如果启动时指定其它的则重新下载所有到新目录\n1 2 3 4 5 distributionBase=GRADLE_USER_HOME distributionPath=wrapper/dists distributionUrl=https\\://services.gradle.org/distributions/gradle-6.7.1-bin.zip zipStoreBase=GRADLE_USER_HOME zipStorePath=wrapper/dists + distributionBase: 下载的Gradle压缩包后解压存储的主目录 + distributionPath: Gradle的压缩包的路径 + distributionUrl: Gradle下载地址 + zipStoreBase: 存放zip压缩包 + zipStorePath: 存放zip压缩包 gradle-wrapper.jar: 安装gradle的jar包\ngradlew.bat: windows下生成bat文件，这个bat文件里的脚本就是去执行jar包完成gradle的安装和部署。\ngradlew：linux/mac下的执行文件\nsettings.gradle settings.gralde用来配置项目的模块，下面是一个真实的setting.gradle:\n1 include \u0026#39;:app\u0026#39;, \u0026#39;:sdk\u0026#39; gradle支持多模块构建，settings.gradle配置模块\nsettings文件在初始化阶段执行，创建Settings对象，在执行脚本时调用该对象的方法 Settings.include(String\u0026hellip; projectPath)\n\u0026lsquo;:app\u0026rsquo; = \u0026lsquo;./app\u0026rsquo; build.gradle build.gradle配置文件分为两个级别的，一个是项目级别的，一个是模块级别的。先看项目级别的：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // Top-level build file where you can add configuration options common to all sub-projects/modules. buildscript { ext.kotlin_version = \u0026#34;1.5.0\u0026#34; repositories { google() mavenCentral() } dependencies { classpath \u0026#34;com.android.tools.build:gradle:4.2.1\u0026#34; classpath \u0026#34;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\u0026#34; // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files } } allprojects { repositories { google() mavenCentral() } } task clean(type: Delete) { delete rootProject.buildDir } 注意第一行的注释，这是一个顶层的构建文件，包含了一些通用的配置对所有的模块。\nbuildScript: 包含了kotlin的版本和kotlin的依赖\nallProjects: 引入了所有的模块都使用的通用的依赖\ntask clean: 这里需要注意的是gradle的编译和构建由一个个命令组成，我们在build的时候也可以看到，每个task具体的作用这里不深究，这里的clean的task实际上就是实现了maven clear同样的作用。如果自己需要其它的task，也可以直接在build.gradle里面编写，具体的语法是groovy。\n再看模块级别的build.gradle\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 plugins { id \u0026#39;com.android.application\u0026#39; id \u0026#39;kotlin-android\u0026#39; } android { compileSdkVersion 31 buildToolsVersion \u0026#39;30.0.2\u0026#39; defaultConfig { applicationId \u0026#34;com.example.android.diceroller\u0026#34; minSdkVersion 24 targetSdkVersion 31 versionCode 1 versionName \u0026#34;1.0\u0026#34; testInstrumentationRunner \u0026#34;androidx.test.runner.AndroidJUnitRunner\u0026#34; } buildTypes { release { minifyEnabled false proguardFiles getDefaultProguardFile(\u0026#39;proguard-android-optimize.txt\u0026#39;), \u0026#39;proguard-rules.pro\u0026#39; } } compileOptions { sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 } kotlinOptions { jvmTarget = \u0026#39;1.8\u0026#39; } ndkVersion \u0026#39;23.1.7779620\u0026#39; } dependencies { implementation \u0026#34;org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\u0026#34; implementation \u0026#39;androidx.core:core-ktx:+\u0026#39; implementation \u0026#39;androidx.appcompat:appcompat:+\u0026#39; implementation \u0026#39;com.google.android.material:material:+\u0026#39; implementation \u0026#39;androidx.constraintlayout:constraintlayout:+\u0026#39; testImplementation \u0026#39;junit:junit:4.+\u0026#39; androidTestImplementation \u0026#39;androidx.test.ext:junit:+\u0026#39; androidTestImplementation \u0026#39;androidx.test.espresso:espresso-core:+\u0026#39; } plugins: android插件，具体插件的作用不详解。\n应用程序插件，插件id为com.android.application，会生成一个APK。 库插件，插件id为com.android.library，会生成一个AAR，提供给其他应用程序模块用。 kotlin插件，已经被弃用了，主要用来从xml中获取id。 android: 配置了android构建的所有的配置。大部分都是顾名思义的配置，具体的可以百度。\ndependencies: 模块中使用的依赖，具体的命令的详解在下方的资料中。\n资料:\nhttps://www.cnblogs.com/wenjiang/p/6638927.html https://www.jianshu.com/p/f34c179bc9d0 https://www.cnblogs.com/baiqiantao/p/10854312.html#implementation ","permalink":"https://isyuanpeng.github.io/posts/tech/android-learning-1/","summary":"\u003cp\u003e2021年10月份成为兼职Android开发，之前一直没正式系统学习，现在开一个series来记录Android的学习。\u003c/p\u003e\n\u003ch2 id=\"gradle\"\u003eGradle\u003c/h2\u003e\n\u003cp\u003e开始学习android的时候，相信gradle是大家绕不开的一个地方，因为android的环境很难调通，很多依赖下载也是状况百出。但是即使这样，很多人也是选择解决问题后就不去深究背后的原理，选择直接绕过gradle直接写项目，遂在android学习的第一章先学习gradle。\n题外话，最新版的springboot已经由maven改为使用gradle来进行构建项目。\u003c/p\u003e\n\u003ch3 id=\"什么是gradle\"\u003e什么是Gradle\u003c/h3\u003e\n\u003cp\u003egradle本质上是个打包工具，结合了ant和maven的优点(没感觉出来)\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://www.zhihu.com/question/30432152\"\u003ehttps://www.zhihu.com/question/30432152\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e先把普通的gradle目录结构放出来，便于后面的理解。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eroot:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  gradle:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    wrapper:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - gradle-wrapper.properties # 指定gradle版本号\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - gradle-wrapper.jar # 安装部署gradle包\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - build.gradle # 构建脚本\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - settings.gradle # 指定工程名\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - gradlew.bat # windows安装gradle命令 去执行jar包\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - gradlew # linux安装gradle命令 去执行jar包\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"gradle-wrappergradlew\"\u003eGradle Wrapper(gradlew)\u003c/h3\u003e\n\u003cp\u003e直到现在见到Gradle Wrapper(包装纸)也很迷惑，不知道这是什么，有什么作用。下面先从官方的解释开始看起：\u003c/p\u003e","title":"Android Learning 1"},{"content":"环境变量CLASSPATH 在安装Java环境的时候，我们需要配置PATH和CLASSPATH。\nPATH：PATH比较好理解，我们在命令行需要执行某个命令的时候如python的时候，如果没有配置PATH，则需要进入python.exe所在的文件夹下，然后执行python。那配置PATH中的python所在路径，其实就相当于简化了这个过程，当配置完成后再执行python，首先去PATH中从左到右搜索所有的路径，直到搜索到python.exe，然后利用该路径执行命令，如果找不到则提示该命令不存在。\nCLASSPATH：CLASSPATH其实也很好理解，这里来一段Java官方文档的解释：\nThe CLASSPATH variable is one way to tell applications, including the JDK tools, * where to look for user classes *. (Classes that are part of the JRE, JDK platform, and extensions should be defined through other means, such as the bootstrap class path or the extensions directory.)\n名如其人，classpath就是classes所在的path，那设置CLASSPATH的作用就是指定java类所在的目录，当我们执行java命令的时候，java需要去哪里找class文件呢，这时候就需要设置classpath，我们可以输出当前环境的classpath查看: * echo %CLASSPATH% *\n1 .;C:\\Program Files\\Java\\jdk1.8.0_181\\lib;C:\\Program Files\\Java\\jdk1.8.0_181\\lib\\tools.jar CLASSPATH的扫描同样是从左向右的。我们可以看到参数以 ; 分割，那么第一个参数 *.*指代的就是当前目录，意思是java去当前目录下寻找class文件进行执行。\nSpring中的classpath 我们在很多的项目代码的config代码中都可以看到 @PropertySource(value = \u0026quot;classpath:map-config.yaml\u0026quot;) 类似的代码，在这里也用到了classpath，这里的classpath什么作用呢？\n答案 你猜的没错，和环境变量的CLASSPATH作用相同，找class文件，上述例子中是寻找配置文件，CLASSPATH可以在启动命令上进行配置，配置完成后代码中会去扫描设置的CLASSPATH来寻找指定的配置文件。\n例子 以组件的__service为例，这里面放的是Java的启动命令，在这里，我们可以找到关于CLASSPATH的使用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #!/bin/bash _ServerName=placeholder JAVA_HOME=${JDK_PATH} CLASSPATH=.:${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jar _Xms=4096M _Xmx=8192M _Xmn=2048M _MetaspaceSize=2048M _MaxMetaspaceSize=4096M _DIR=\u0026#34;$( cd \u0026#34;$(dirname \u0026#34;$0\u0026#34;)\u0026#34; \u0026amp;\u0026amp; pwd )\u0026#34; _HOME_DIR=$(dirname \u0026#34;$_DIR\u0026#34;) _JSVC=${_HOME_DIR}/bin/linux/Jsvc _Classpath=${CLASSPATH}:\u0026#34;${_HOME_DIR}/config\u0026#34;:\u0026#34;${_HOME_DIR}/../../conf\u0026#34;:\u0026#34;${_HOME_DIR}/lib/*\u0026#34; _MainClass=com.xxx.xxx.Bootstrap _StarCLASS=com.xxx.JsvcLauncher _Pid=${_HOME_DIR}/temp/${_ServerName}.pid #_LogOut=${_HOME_DIR}/logs/${_ServerName}.log _LogOut=/dev/null _LogErr=${_HOME_DIR}/logs/Jsvc.log echo \u0026#34;service name: $_ServerName\u0026#34; do_exec() { $_JSVC -D${_ServerName} -home $JAVA_HOME -cwd ${_HOME_DIR}/config -Djava.net.preferIPv4Stack=true -Dcom.sun.jndi.ldap.connect.pool.protocol=\u0026#34;plain ssl\u0026#34; -XX:MetaspaceSize=${_MetaspaceSize} -XX:MaxMetaspaceSize=${_MaxMetaspaceSize} -Xms${_Xms} -Xmx${_Xmx} -Xmn${_Xmn} -XX:SurvivorRatio=8 -XX:+HeapDumpOnOutOfMemoryError -XX:+DisableExplicitGC -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -Xloggc:${_HOME_DIR}/logs/gc.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=8M -Djava.io.tmpdir=${_HOME_DIR}/temp -Dloader.main=${_MainClass} -wait 60 -pidfile $_Pid -outfile ${_LogOut} -errfile ${_LogErr} -cp ${_Classpath} $1 ${_StarCLASS} } .... 上述代码中有关CLASSPATH的部分为下面的代码\n1 2 3 CLASSPATH=.:${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jar _Classpath=${CLASSPATH}:\u0026#34;${_HOME_DIR}/config\u0026#34;:\u0026#34;${_HOME_DIR}/../../conf\u0026#34;:\u0026#34;${_HOME_DIR}/lib/*\u0026#34; ${_Classpath} 第一行的CLASSPATH其实就是我们配置的环境变量CLASSPATH 第二行的_Classpath在引用了第一行的CLASSPATH的基础上又增加了三个 ${_HOME_DIR}/config 用来读取组件壳bin/xxx/config下的配置文件，如application.properties ${_HOME_DIR}/../../conf 读取组件壳生成的config.properties等文件 ${_HOME_DIR}/lib/ 读取组件壳/bin/xxx/lib下的jar包 第三行是启动服务的时候添加的参数，将上述的_Classpath作为参数启动 实际案例解决 在启动xxx过程中，发现启动报错，找不到config.properties，排查发现，有引用的依赖的jar包中含有config.properties同名文件，其在/bin/xxx/lib目录下，而__service文件中，conf的设置顺序在config后，所以将conf的设置提前(根据从左向右扫描的顺序)，至此解决问题。\n","permalink":"https://isyuanpeng.github.io/posts/tech/spring-classpath/","summary":"\u003ch2 id=\"环境变量classpath\"\u003e环境变量CLASSPATH\u003c/h2\u003e\n\u003cp\u003e在安装Java环境的时候，我们需要配置PATH和CLASSPATH。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003ePATH：PATH比较好理解，我们在命令行需要执行某个命令的时候如python的时候，如果没有配置PATH，则需要进入python.exe所在的文件夹下，然后执行python。那配置PATH中的python所在路径，其实就相当于简化了这个过程，当配置完成后再执行python，首先去PATH中从左到右搜索所有的路径，直到搜索到python.exe，然后利用该路径执行命令，如果找不到则提示该命令不存在。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCLASSPATH：CLASSPATH其实也很好理解，这里来一段Java官方文档的解释：\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe CLASSPATH variable is one way to tell applications, including the JDK tools, * where to look for user classes *. (Classes that are part of the JRE, JDK platform, and extensions should be defined through other means, such as the bootstrap class path or the extensions directory.)\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e名如其人，classpath就是classes所在的path，那设置CLASSPATH的作用就是指定java类所在的目录，当我们执行java命令的时候，java需要去哪里找class文件呢，这时候就需要设置classpath，我们可以输出当前环境的classpath查看: * echo %CLASSPATH% *\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e;C:\\Program Files\\Java\\jdk1\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e8.0\u003c/span\u003e_181\\lib;C:\\Program Files\\Java\\jdk1\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e8.0\u003c/span\u003e_181\\lib\\tools\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejar\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eCLASSPATH的扫描同样是从左向右的。我们可以看到参数以 \u003cem\u003e;\u003c/em\u003e 分割，那么第一个参数 *.*指代的就是当前目录，意思是java去当前目录下寻找class文件进行执行。\u003c/p\u003e\n\u003ch2 id=\"spring中的classpath\"\u003eSpring中的classpath\u003c/h2\u003e\n\u003cp\u003e我们在很多的项目代码的config代码中都可以看到 \u003ccode\u003e@PropertySource(value = \u0026quot;classpath:map-config.yaml\u0026quot;)\u003c/code\u003e 类似的代码，在这里也用到了classpath，这里的classpath什么作用呢？\u003c/p\u003e","title":"揭秘Classpath"},{"content":"策略模式概念 https://refactoringguru.cn/design-patterns/strategy\n实战应用 背景 健康码组件对接的前端门禁设备都多种开门的方式，刷证，人脸，二维码等。对于每一种开门方式，其需要的返回结果是一样的，只是内部的处理方式不一样。所以这里使用策略模式+工厂模式来实现，通过一个入口以及不同的type来实现调用不同的实现类。具体代码如下。\n代码 1. 创建一个Handler接口类 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 /** * @Author Yuanpeng * @Description 处理健康码请求携带参数的类 根据不同的类型进行 不同的处理 * @Date 2022/1/10 */ public interface HealthCodeHandler { /** * 处理健康码信息的逻辑 * @param query 前置信息 * @return 处理的结果 包括开门信息 健康码信息 核酸信息 疫苗信息等 */ HealthCodeResult handle(HealthCodeQuery query); /** * 获取请求的类型 1.人员唯一标识 personId 2.身份证号 3.二维码 4.人员卡号 5.人脸图片 6.市民卡 * @return 类型 */ Integer getType(); } 2. 创建不同的Handler实现类，这里以二维码的实现类举例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 /** * @Author Yuanpeng * @Description 处理二维码的实现类 * @Date 2022/1/10 */ @Service public class QrCodeHandler implements HealthCodeHandler { private static final Logger log = LoggerFactory.getLogger(QrCodeHandler.class); @Override public HealthCodeResult handle(HealthCodeQuery query) { HealthCodeResult result = ResultUtils.getDefaultHeathCodeResult(query, false); // logic code return result; } @Override public Integer getType() { return HealthCodeConstants.QR_CODE_TYPE; } 3. 将所有实现了Handler接口类的实例注入容器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 /** * @Author Yuanpeng * @Description 策略模式的工厂类 加载所有的HealthCodeHandler类 * @Date 2022/1/10 */ @Component public class HealthCodeHandlerFactory implements InitializingBean, ApplicationContextAware { private static final Map\u0026lt;Integer, HealthCodeHandler\u0026gt; HEALTH_CODE_HANDLER_MAP = new HashMap\u0026lt;\u0026gt;(6); private ApplicationContext appContext; /** * 根据健康码信息类型获取对应的处理器 * * @param type 健康码信息类型 * @return 健康码信息类型对应的处理器 */ public HealthCodeHandler getHandler(Integer type) { return HEALTH_CODE_HANDLER_MAP.get(type); } @Override public void afterPropertiesSet() { // 将 Spring 容器中所有的 HealthCodeHandler 注册到 FORM_SUBMIT_HANDLER_MAP appContext.getBeansOfType(HealthCodeHandler.class) .values() .forEach(handler -\u0026gt; HEALTH_CODE_HANDLER_MAP.put(handler.getType(), handler)); } @Override public void setApplicationContext(@NonNull ApplicationContext applicationContext) throws BeansException { appContext = applicationContext; } } 4. 入口处根据传参中的type进行不同类的调用 1 2 3 // 使用策略模式来实现对不同类型请求的处理，如果需要添加其它类型信息的处理 只需要实现相应的HealthCodeHandler即可 HealthCodeHandler handler = healthCodeHandlerFactory.getHandler(query.getCardNoType()); HealthCodeResult result = handler.handle(query); 至此，完成了业务上的需求，同时后期如果还有其它类型的开门方式，可以直接写实现类，不用改之前的代码，维护起来比较方便。\n","permalink":"https://isyuanpeng.github.io/posts/tech/design-pattern-strategy/","summary":"\u003ch2 id=\"策略模式概念\"\u003e策略模式概念\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://refactoringguru.cn/design-patterns/strategy\"\u003ehttps://refactoringguru.cn/design-patterns/strategy\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"实战应用\"\u003e实战应用\u003c/h2\u003e\n\u003ch3 id=\"背景\"\u003e背景\u003c/h3\u003e\n\u003cp\u003e健康码组件对接的前端门禁设备都多种开门的方式，刷证，人脸，二维码等。对于每一种开门方式，其需要的返回结果是一样的，只是内部的处理方式不一样。所以这里使用策略模式+工厂模式来实现，通过一个入口以及不同的type来实现调用不同的实现类。具体代码如下。\u003c/p\u003e\n\u003ch3 id=\"代码\"\u003e代码\u003c/h3\u003e\n\u003ch4 id=\"1-创建一个handler接口类\"\u003e1. 创建一个Handler接口类\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e * @Author Yuanpeng\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e * @Description 处理健康码请求携带参数的类 根据不同的类型进行 不同的处理\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e * @Date 2022/1/10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e */\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epublic interface HealthCodeHandler {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    /**\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * 处理健康码信息的逻辑\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * @param query 前置信息\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * @return 处理的结果 包括开门信息 健康码信息 核酸信息 疫苗信息等\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     */\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    HealthCodeResult handle(HealthCodeQuery query);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    /**\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * 获取请求的类型 1.人员唯一标识 personId 2.身份证号 3.二维码 4.人员卡号 5.人脸图片 6.市民卡\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * @return 类型\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     */\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Integer getType();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch4 id=\"2-创建不同的handler实现类这里以二维码的实现类举例\"\u003e2. 创建不同的Handler实现类，这里以二维码的实现类举例\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e * @Author Yuanpeng\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e * @Description 处理二维码的实现类\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e * @Date 2022/1/10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e */\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@Service\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epublic class QrCodeHandler implements HealthCodeHandler {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    private static final Logger log = LoggerFactory.getLogger(QrCodeHandler.class);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    public HealthCodeResult handle(HealthCodeQuery query) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        HealthCodeResult result = ResultUtils.getDefaultHeathCodeResult(query, false);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        // logic code\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        return result;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    public Integer getType() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        return HealthCodeConstants.QR_CODE_TYPE;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch4 id=\"3-将所有实现了handler接口类的实例注入容器\"\u003e3. 将所有实现了Handler接口类的实例注入容器\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e * @Author Yuanpeng\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e * @Description 策略模式的工厂类 加载所有的HealthCodeHandler类\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e * @Date 2022/1/10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e */\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@Component\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epublic class HealthCodeHandlerFactory implements InitializingBean, ApplicationContextAware {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    private static final Map\u0026lt;Integer, HealthCodeHandler\u0026gt; HEALTH_CODE_HANDLER_MAP = new HashMap\u0026lt;\u0026gt;(6);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    private ApplicationContext appContext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    /**\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * 根据健康码信息类型获取对应的处理器\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     *\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * @param type 健康码信息类型\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * @return 健康码信息类型对应的处理器\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     */\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    public HealthCodeHandler getHandler(Integer type) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        return HEALTH_CODE_HANDLER_MAP.get(type);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    public void afterPropertiesSet() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        // 将 Spring 容器中所有的 HealthCodeHandler 注册到 FORM_SUBMIT_HANDLER_MAP\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        appContext.getBeansOfType(HealthCodeHandler.class)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .values()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .forEach(handler -\u0026gt; HEALTH_CODE_HANDLER_MAP.put(handler.getType(), handler));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    public void setApplicationContext(@NonNull ApplicationContext applicationContext) throws BeansException {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        appContext = applicationContext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch4 id=\"4-入口处根据传参中的type进行不同类的调用\"\u003e4. 入口处根据传参中的type进行不同类的调用\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    // 使用策略模式来实现对不同类型请求的处理，如果需要添加其它类型信息的处理 只需要实现相应的HealthCodeHandler即可\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    HealthCodeHandler handler = healthCodeHandlerFactory.getHandler(query.getCardNoType());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    HealthCodeResult result = handler.handle(query);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e至此，完成了业务上的需求，同时后期如果还有其它类型的开门方式，可以直接写实现类，不用改之前的代码，维护起来比较方便。\u003c/p\u003e","title":"设计模式-策略模式实战"},{"content":"普通操作 更新多参数SQL 1 update table_a a set (col_a, col_b) = (select b.col_a, b.col_b from table_b b where a.col_c = b.col_c) where exists (select 1 from table_b b where a.col_c = b.col_c) 分组排序 1 select * from (select *, row_number() over(partition by col_a order by col_b) rn from table_a) t where rn = 1; 分组排序删除 1 delete from table_a where id in (select id from (select id, row_number() over(partition by col_a order by col_b) rn from table_a) t where rn != 1); 系统类 查看当前所有连接，连接个数 1 2 3 4 5 6 select * from pg_stat_activity; select count(1) from pg_stat_activity; # 查询最大连接数 show max_connections; ","permalink":"https://isyuanpeng.github.io/posts/tech/pg-common-sql/","summary":"\u003ch2 id=\"普通操作\"\u003e普通操作\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e更新多参数SQL\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eupdate table_a a set (col_a, col_b) = (select b.col_a, b.col_b from table_b b where a.col_c = b.col_c) where exists (select 1 from table_b b where a.col_c = b.col_c)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e分组排序\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eselect * from (select *, row_number() over(partition by col_a order by col_b) rn from table_a) t where rn = 1;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e分组排序删除\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edelete from table_a where id in (select id from (select id, row_number() over(partition by col_a order by col_b) rn from table_a) t where rn != 1);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"系统类\"\u003e系统类\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e查看当前所有连接，连接个数\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eselect * from pg_stat_activity;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eselect count(1) from pg_stat_activity;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e# 查询最大连接数\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eshow max_connections;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"Pg数据库常用SQL(持续更新)"},{"content":"问题描述 表中记录了图片的base64 表大概有200w数据 占用了300G左右的空间 问题解决 查询了wiki和咨询了总部的pg数据库的同事得知了pg数据库存在膨胀的问题，即垃圾清理问题。所以及时删除了数据，空间也不会得到释放，只有手动进行垃圾清理后空间才能够得到释放，所以根据总部同事提供的排查方案，首先进行数据膨胀的排查。\npg数据库膨胀的问题排查 通过排查后发现，真正大的表是pg_toast_oid表，并且根据排查也发现其dead_tup比较大，实际上这是pg数据库存储大型数据的逻辑toast，后面知识点归纳也会提到这一点。pg_toast_oid表我们分析可知为表中的base64图片的压缩切片存储。\n解决方案 大数据量的表VACUUM FULL很慢并且会锁表(VACUUM FULL的原理是复制新表，然后删除旧表)，所以直接在业务空闲期进行表的删除和重建。（由于数据已经实时的推送给了三方，在中间数据库中也有数据存储，所以这里没有进行备份，选择了直接删除。删除的时候对于这种大数据的表要进行批量删除，先将部分数据删除，然后在删除整个表，避免长时间的执行删除命令导致业务中断的时间过长。） 引申出来的一点关于数据库操作的建议：尽量避免长连接的操作，如果数据库的并发量比较高，长连接一直占用，将会导致数据库连接不够用，从而产生报错。 后续的过程中删除保留时间过长的数据，并且执行VACUUM FULL命令(kettle流程深夜执行) 此问题产生的思考 BASE64的图片不要存库。选择图片存储地址等方案。 所有的东西设计之初就要想好，并且日后有优化的想法时第一时间优化。 知识点总结归纳 https://juejin.cn/post/7016165148020703246\n事务特性-ACID 原子性（Atomicity）：对数据库的操作要么执行，要么不执行。 一致性（Consistency）：不管操作是否执行，数据保持不变。 隔离性（Isolation）：多个事务并发访问，相互隔离。 持久性（Durability）：事务操作完成后，将永久保存。 事务并发产生的问题 脏读: 一个事务读取到了另一个未提交事务修改过的数据 不可重复读：同一个事务内，前后多次读取，读取到的数据内容不一致 幻读: 如果一个事务先根据某些搜索条件查询出一些记录，在该事务未提交时，另一个事务写入了一些符合那些搜索条件的记录（如insert、delete、update），就意味着发生了幻读。 MVCC-Multi-Version Concurrency Control Multi-Version Concurrency Control，多版本并发控制\n通俗的讲，数据库中同时存在多个版本的数据，并不是整个数据库的多个版本，而是某一条记录的多个版本同时存在，在某个事务对其进行操作的时候，需要查看这一条记录的隐藏列事务版本id，比对事务id并根据事物隔离级别去判断读取哪个版本的数据。\nMVCC实现的关键点 事务版本号： 事务每次开启前，都会从数据库获得一个自增长的事务ID，可以从事务ID判断事务的执行先后顺序。这就是事务版本号。 + 有关版本号的经验和思考： 版本号多用于控制并发，常用于乐观锁来解决并发问题，如MySQL的乐观锁解决并发。其基本做法是在数据库的表中引入版本的字段(version)，数据每进行一次更新，version+1，当提交更新的时候，比对版本号+1是否相等，不相等则认为当前数据是过期数据。\n隐式字段：以MySQL为例，InnoDB存储引擎\ntrx_id: 记录操作数据事务的事务id roll_pointer: 指针，指向回滚的undo日志 row_id: 如果没主键和非NULL惟一键，有该主键列 undo log: 回滚日志\n版本链：通过roll_pointer来指向undo_log\n快照读和当前读：\n快照读：读的是记录数据的可见版本 当前读：读的是记录数据的最新版本 ReadView：事务执行SQL时产生的读视图\nPostgreSQL toast https://zhmin.github.io/posts/postgresql-toast/\ntoast说白了就是为了存储大型数据，表中的某个列的数据如果过大，则压缩，切分，放到toast表中，在之前问题的排查中，也可以看到真正数据量大的并不是数据存储的本表，而是pg_toast_oid表。\nPostgreSQL VACUUM https://www.cnblogs.com/dbadaily/p/vacuum1.html https://www.cnblogs.com/dbadaily/p/vacuum2.html https://www.cnblogs.com/dbadaily/p/vacuum3.html https://www.cnblogs.com/dbadaily/p/vacuum4.html https://www.cnblogs.com/dbadaily/p/vacuum5.html\n推荐阅读（我没读） https://www.interdb.jp/pg/ ","permalink":"https://isyuanpeng.github.io/posts/question/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%95%B0%E6%8D%AE%E5%BA%93%E8%86%A8%E8%83%80%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E8%BF%87%E7%A8%8B/","summary":"\u003ch2 id=\"问题描述\"\u003e问题描述\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e表中记录了图片的base64\u003c/li\u003e\n\u003cli\u003e表大概有200w数据\u003c/li\u003e\n\u003cli\u003e占用了300G左右的空间\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"问题解决\"\u003e问题解决\u003c/h2\u003e\n\u003cp\u003e查询了wiki和咨询了总部的pg数据库的同事得知了pg数据库存在膨胀的问题，即垃圾清理问题。所以及时删除了数据，空间也不会得到释放，只有手动进行垃圾清理后空间才能够得到释放，所以根据总部同事提供的排查方案，首先进行数据膨胀的排查。\u003c/p\u003e\n\u003ch3 id=\"pg数据库膨胀的问题排查\"\u003epg数据库膨胀的问题排查\u003c/h3\u003e\n\u003cp\u003e通过排查后发现，真正大的表是pg_toast_oid表，并且根据排查也发现其dead_tup比较大，实际上这是pg数据库存储大型数据的逻辑toast，后面知识点归纳也会提到这一点。pg_toast_oid表我们分析可知为表中的base64图片的压缩切片存储。\u003c/p\u003e\n\u003ch3 id=\"解决方案\"\u003e解决方案\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e大数据量的表VACUUM FULL很慢并且会锁表(VACUUM FULL的原理是复制新表，然后删除旧表)，所以直接在业务空闲期进行表的删除和重建。（由于数据已经实时的推送给了三方，在中间数据库中也有数据存储，所以这里没有进行备份，选择了直接删除。删除的时候对于这种大数据的表要进行批量删除，先将部分数据删除，然后在删除整个表，避免长时间的执行删除命令导致业务中断的时间过长。）\n\u003cul\u003e\n\u003cli\u003e引申出来的一点关于数据库操作的建议：尽量避免长连接的操作，如果数据库的并发量比较高，长连接一直占用，将会导致数据库连接不够用，从而产生报错。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e后续的过程中删除保留时间过长的数据，并且执行VACUUM FULL命令(kettle流程深夜执行)\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"此问题产生的思考\"\u003e此问题产生的思考\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eBASE64的图片不要存库。选择图片存储地址等方案。\u003c/li\u003e\n\u003cli\u003e所有的东西设计之初就要想好，并且日后有优化的想法时第一时间优化。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"知识点总结归纳\"\u003e知识点总结归纳\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://juejin.cn/post/7016165148020703246\"\u003ehttps://juejin.cn/post/7016165148020703246\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"事务特性-acid\"\u003e事务特性-ACID\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e原子性（Atomicity）：对数据库的操作要么执行，要么不执行。\u003c/li\u003e\n\u003cli\u003e一致性（Consistency）：不管操作是否执行，数据保持不变。\u003c/li\u003e\n\u003cli\u003e隔离性（Isolation）：多个事务并发访问，相互隔离。\u003c/li\u003e\n\u003cli\u003e持久性（Durability）：事务操作完成后，将永久保存。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"事务并发产生的问题\"\u003e事务并发产生的问题\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e脏读: 一个事务读取到了另一个未提交事务修改过的数据\u003c/li\u003e\n\u003cli\u003e不可重复读：同一个事务内，前后多次读取，读取到的数据内容不一致\u003c/li\u003e\n\u003cli\u003e幻读: 如果一个事务先根据某些搜索条件查询出一些记录，在该事务未提交时，另一个事务写入了一些符合那些搜索条件的记录（如insert、delete、update），就意味着发生了幻读。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"mvcc-multi-version-concurrency-control\"\u003eMVCC-Multi-Version Concurrency Control\u003c/h3\u003e\n\u003cp\u003eMulti-Version Concurrency Control，多版本并发控制\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e通俗的讲，数据库中同时存在多个版本的数据，并不是整个数据库的多个版本，而是某一条记录的多个版本同时存在，在某个事务对其进行操作的时候，需要查看这一条记录的隐藏列事务版本id，比对事务id并根据事物隔离级别去判断读取哪个版本的数据。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch4 id=\"mvcc实现的关键点\"\u003eMVCC实现的关键点\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003e事务版本号：\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003e事务每次开启前，都会从数据库获得一个自增长的事务ID，可以从事务ID判断事务的执行先后顺序。这就是事务版本号。\n+ 有关版本号的经验和思考：\n版本号多用于控制并发，常用于乐观锁来解决并发问题，如MySQL的乐观锁解决并发。其基本做法是在数据库的表中引入版本的字段(version)，数据每进行一次更新，version+1，当提交更新的时候，比对版本号+1是否相等，不相等则认为当前数据是过期数据。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003e\n\u003cp\u003e隐式字段：以MySQL为例，InnoDB存储引擎\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003etrx_id: 记录操作数据事务的事务id\u003c/li\u003e\n\u003cli\u003eroll_pointer: 指针，指向回滚的undo日志\u003c/li\u003e\n\u003cli\u003erow_id: 如果没主键和非NULL惟一键，有该主键列\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eundo log: 回滚日志\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e版本链：通过roll_pointer来指向undo_log\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e快照读和当前读：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e快照读：读的是记录数据的可见版本\u003c/li\u003e\n\u003cli\u003e当前读：读的是记录数据的最新版本\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eReadView：事务执行SQL时产生的读视图\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"postgresql-toast\"\u003ePostgreSQL toast\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://zhmin.github.io/posts/postgresql-toast/\"\u003ehttps://zhmin.github.io/posts/postgresql-toast/\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003etoast说白了就是为了存储大型数据，表中的某个列的数据如果过大，则压缩，切分，放到toast表中，在之前问题的排查中，也可以看到真正数据量大的并不是数据存储的本表，而是pg_toast_oid表。\u003c/p\u003e\n\u003ch3 id=\"postgresql-vacuum\"\u003ePostgreSQL VACUUM\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://www.cnblogs.com/dbadaily/p/vacuum1.html\"\u003ehttps://www.cnblogs.com/dbadaily/p/vacuum1.html\u003c/a\u003e\n\u003ca href=\"https://www.cnblogs.com/dbadaily/p/vacuum2.html\"\u003ehttps://www.cnblogs.com/dbadaily/p/vacuum2.html\u003c/a\u003e\n\u003ca href=\"https://www.cnblogs.com/dbadaily/p/vacuum3.html\"\u003ehttps://www.cnblogs.com/dbadaily/p/vacuum3.html\u003c/a\u003e\n\u003ca href=\"https://www.cnblogs.com/dbadaily/p/vacuum4.html\"\u003ehttps://www.cnblogs.com/dbadaily/p/vacuum4.html\u003c/a\u003e\n\u003ca href=\"https://www.cnblogs.com/dbadaily/p/vacuum5.html\"\u003ehttps://www.cnblogs.com/dbadaily/p/vacuum5.html\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"推荐阅读我没读\"\u003e推荐阅读（我没读）\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"https://www.interdb.jp/pg/\"\u003ehttps://www.interdb.jp/pg/\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e","title":"记一次数据库膨胀问题的解决过程"},{"content":"需求 对于增删改查类的代码，每次都要写很多重复的代码，所以考虑使用自动生成代码来减少重复工作。\n自动生成代码的现状 目前有多种方式可以自动生成代码:\n将模板引擎集成到项目中，通过代码的形式自动生成代码，此种方法和项目耦合度较高，对项目由侵入性\n在线网站自动生成代码，使用互联网，安全性较低\nIDEA+groovy方法，目前了解到生成的代码比较简单，定制化程度不高\nIDEA插件生成，一般插件也都是以模板引擎为基础，进行代码的生成\n最后选择了第四种，IDEA插件的方式，插件使用的是EasyCode, 基于velocity模板引擎。 \u0026gt; https://gitee.com/makejava/EasyCode\nVelocity(速度)语法 比较精简的一种语言，关键字不多，和代码混合使用。教程：https://www.cnblogs.com/hduwbf/p/6201731.html\nEasyCode 我的模板(具有个人风格，可以进行修改使用) Controller 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 ##导入宏定义 $!{init.vm} $!{define.vm} ##保存文件（宏定义） #save(\u0026#34;/controller/$!{workPath}\u0026#34;, \u0026#34;Controller.java\u0026#34;) ##包路径（宏定义） #setPackageSuffix(\u0026#34;controller$!{workPackage}\u0026#34;) $!{autoImport.vm} import io.swagger.annotations.ApiOperation; import $!{tableInfo.savePackageName}.service$!{workPackage}.$!{serviceType}; import $!{tableInfo.savePackageName}.dto$!{workPackage}.$!{dtoType}; import $!{tableInfo.savePackageName}.vo$!{workPackage}.$!{voType}; import org.springframework.web.bind.annotation.*; import io.swagger.annotations.Api; import org.apache.commons.lang3.StringUtils; import javax.annotation.Resource; import java.util.List; ##表注释（宏定义） #classNotes(\u0026#34;表控制层\u0026#34;) @Api(tags = \u0026#34;$!{tableInfo.comment}\u0026#34;) @RestController @RequestMapping(\u0026#34;$!entityName\u0026#34;) public class $!apiType { @Resource private $!serviceType $!serviceName; /** * 分页查询所有数据 * * @param query 查询实体 * @return 所有数据 */ @PostMapping(\u0026#34;/queryPage\u0026#34;) @ApiOperation(\u0026#34;按字段条件分页查询$!{tableInfo.comment}\u0026#34;) public BaseResult\u0026lt;PageVo\u0026lt;$!voType\u0026gt;\u0026gt; query$!{entityType}ByPage(@RequestBody $!{queryType} query) { return $!{serviceName}.queryByPage(query); } /** * 通过主键查询多条数据 * * @param query 查询实体 * @return 多条数据 */ @PostMapping(\u0026#34;/query\u0026#34;) @ApiOperation(\u0026#34;根据Id查询$!{tableInfo.comment}\u0026#34;) public BaseResult\u0026lt;List\u0026lt;$!voType\u0026gt;\u0026gt; query(@RequestBody $!{queryType} query) { return $!{serviceName}.queryByCondition(query); } /** * 新增数据 * * @param dto 实体对象 * @return 新增结果 */ @PostMapping(\u0026#34;/save\u0026#34;) @ApiOperation(\u0026#34;新增$!{tableInfo.comment}数据\u0026#34;) public BaseResult\u0026lt;Object\u0026gt; save(@RequestBody $!{dtoType} dto) { //数据校验 if (StringUtils.isBlank(dto.getName())) { return new BaseResult\u0026lt;\u0026gt;(ResponseEnum.NO_ARGS.getCode(), ResponseEnum.NO_ARGS.getMessage()); } if ($!{serviceName}.isExist(dto)) { return new BaseResult\u0026lt;\u0026gt;(ResponseEnum.REPEAT.getCode(), ResponseEnum.REPEAT.getMessage()); } return $!{serviceName}.save(dto); } /** * 修改数据 * * @param dto 实体对象 * @return 修改结果 */ @PostMapping(\u0026#34;/update\u0026#34;) @ApiOperation(\u0026#34;更新$!{tableInfo.comment}\u0026#34;) public BaseResult\u0026lt;Object\u0026gt; update($!{dtoType} dto) { //数据校验 if (StringUtils.isBlank(dto.getName())) { return new BaseResult\u0026lt;\u0026gt;(ResponseEnum.NO_ARGS.getCode(), ResponseEnum.NO_ARGS.getMessage()); } return $!{serviceName}.update(dto); } /** * 删除多条数据 * * @param ids 主键ids * @return 删除结果 */ @PostMapping(\u0026#34;/delete\u0026#34;) @ApiOperation(\u0026#34;根据Id软删除$!{tableInfo.comment}数据\u0026#34;) public BaseResult\u0026lt;List\u0026lt;SingleResult\u0026gt;\u0026gt; deleteByRowIds(List\u0026lt;Long\u0026gt; ids) { List\u0026lt;SingleResult\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); ids.forEach(x -\u0026gt; { // 数据校验 if (!$!{serviceName}.isExistById(x)) { result.add(SingleResult.successBuild(x.toString())); } else { result.add($!{serviceName}.deleteById(x)); } }); return BaseResult.success(result); } } Entity 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 $!{init.vm} $!{define.vm} ##保存文件（宏定义） #save(\u0026#34;/entity$!{workPath}\u0026#34;, \u0026#34;.java\u0026#34;) ##包路径（宏定义） #setPackageSuffix(\u0026#34;entity$!{workPackage}\u0026#34;) import io.swagger.annotations.ApiModel; import io.swagger.annotations.ApiModelProperty; import lombok.Data; import javax.persistence.*; import java.io.Serializable; import java.util.Date; ##表注释（宏定义） #classNotes(\u0026#34;\u0026#34;) @Data ##@ApiModel(value=\u0026#34;$tableInfo.savePackageName.replace(\u0026#34;.\u0026#34;,\u0026#34;-\u0026#34;)-entity$!{workCommon}-$!{entityType}\u0026#34;) @ApiModel(value=\u0026#34;$!{tableInfo.comment}\u0026#34;) @Table(name = \u0026#34;$!{tableInfo.obj.name}\u0026#34;) public class $!entityType implements Serializable { private static final long serialVersionUID = 1L; ## 主键列 #foreach($column in $tableInfo.pkColumn) /** * $!column.comment */ @Id @GeneratedValue(strategy=GenerationType.IDENTITY) @Column(name = \u0026#34;$!{column.obj.name}\u0026#34;) @ApiModelProperty(value = \u0026#34;$!column.comment\u0026#34;) private $!tool.getClsNameByFullName($column.type) $!column.name; #end ## 其他列 #foreach($column in $tableInfo.otherColumn) /** * $!{column.comment} */ @Column(name = \u0026#34;$!{column.obj.name}\u0026#34;) @ApiModelProperty(value = \u0026#34;$!column.comment\u0026#34;) private $!tool.getClsNameByFullName($!column.type) $!column.name; #end } Service 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 ##导入宏定义 $!{init.vm} $!{define.vm} ##保存文件（宏定义） #save(\u0026#34;/service$!{workPath}\u0026#34;, \u0026#34;Service.java\u0026#34;) ##包路径（宏定义） #setPackageSuffix(\u0026#34;service$!{workPackage}\u0026#34;) $!{autoimpot.vm} ##表注释（宏定义） #classNotes(\u0026#34;表服务接口\u0026#34;) public interface $!serviceType { BaseResult\u0026lt;PageVo\u0026lt;$!{voType}\u0026gt;\u0026gt; queryByPage($!{queryType} query); BaseResult\u0026lt;List\u0026lt;$!{voType}\u0026gt;\u0026gt; queryByCondition($!{queryType} query); BaseResult\u0026lt;Object\u0026gt; save($!{dtoType} dto); BaseResult\u0026lt;List\u0026lt;SingleResult\u0026gt;\u0026gt; saveBatch(List\u0026lt;$!{dtoType}\u0026gt; dtos); BaseResult\u0026lt;Object\u0026gt; update($!{dtoType} dto); BaseResult\u0026lt;List\u0026lt;SingleResult\u0026gt;\u0026gt; updateBatch(List\u0026lt;$!{dtoType}\u0026gt; dtos); SingleResult deleteById(Long id); boolean isExist($!{dtoType} dto); boolean isExistById(Long id); } ServiceImpl导入宏定义 $!{init.vm} $!{define.vm} ##保存文件（宏定义） #save(\u0026#34;/service/impl/$!{workPath}\u0026#34;, \u0026#34;ServiceImpl.java\u0026#34;) ##包路径（宏定义） #setPackageSuffix(\u0026#34;service.impl$!{workPackage}\u0026#34;) $!{autoimport.vm} import org.apache.commons.lang3.StringUtils; import javax.transaction.Transactional; import $!{tableInfo.savePackageName}.entity$!{workPackage}.$!{entityType}; import javax.persistence.criteria.Predicate; #classNotes(\u0026#34;表服务实现类\u0026#34;) @Service public class $!{serviceImplType} implements $!{serviceType} { @Resource private $!{repositoryType} $!{repositoryName}; /** * 查询多条数据 * * @param query 查询参数 * @return 实例对象 */ @Override public BaseResult\u0026lt;List\u0026lt;$!{voType}\u0026gt;\u0026gt; queryByCondition($!{queryType} query) { List\u0026lt;$!{tableInfo.name}\u0026gt; items = $!{repositoryName}.findAll(getWhereClause(query)); return BaseResult.success(BaseConverter.convertAll(items, $!{voType}.class)); } /** * 分页查询 * * @param query 筛选条件 * @return 查询结果 */ @Override public BaseResult\u0026lt;PageVo\u0026lt;$!voType\u0026gt;\u0026gt; queryByPage($!{queryType} query) { try { Sort sort = Sort.by(\u0026#34;desc\u0026#34;.equals(query.getSortOrder()) ? Sort.Direction.DESC : Sort.Direction.ASC, query.getSortField()); Pageable pageable = PageRequest.of(query.getPageNo() - 1, (query.getPageSize()), sort); Page\u0026lt;$!{tableInfo.name}\u0026gt; page = $!{repositoryName}.findAll(getWhereClause(query), pageable); return BaseResult.success(BaseConverter.convertPage(page, $!{voType}.class)); } catch (Exception e) { return new BaseResult\u0026lt;\u0026gt;(\u0026#34;-1\u0026#34;, \u0026#34;查询分页失败\u0026#34;); } } /** * 新增数据 * * @param dto dto对象 * @return vo $!voName */ @Override public BaseResult\u0026lt;Object\u0026gt; save($!dtoType dto) { try { $!{tableInfo.name} entity = BaseConverter.convert(dto, $!{tableInfo.name}.class); $!{repositoryName}.save(entity); } catch (Exception e) { return new BaseResult\u0026lt;\u0026gt;(\u0026#34;-1\u0026#34;, \u0026#34;保存失败\u0026#34;); } return new BaseResult\u0026lt;\u0026gt;(); } /** * 批量新增数据 * * @param dtos dto对象 * @return BaseResult */ @Override public BaseResult\u0026lt;List\u0026lt;SingleResult\u0026gt;\u0026gt; saveBatch(List\u0026lt;$!dtoType\u0026gt; dtos) { try { List\u0026lt;$!{tableInfo.name}\u0026gt; entitys = BaseConverter.convertAll(dtos, $!{tableInfo.name}.class); $!{repositoryName}.saveAll(entitys); } catch (Exception e) { return new BaseResult\u0026lt;\u0026gt;(\u0026#34;-1\u0026#34;, \u0026#34;保存失败\u0026#34;); } return new BaseResult\u0026lt;\u0026gt;(); } /** * 修改数据 * * @param dto dto对象 * @return BaseResult */ @Override @Transactional public BaseResult\u0026lt;Object\u0026gt; update($!dtoType dto) { try { $!{tableInfo.name} entity = BaseConverter.convert(dto, $!{tableInfo.name}.class); $!{repositoryName}.save(entity); } catch (Exception e) { return new BaseResult\u0026lt;\u0026gt;(\u0026#34;-1\u0026#34;, \u0026#34;更新失败\u0026#34;); } return new BaseResult\u0026lt;\u0026gt;(); } /** * 批量修改数据 * * @param dtos dto对象 * @return 实例对象 */ @Override @Transactional public BaseResult\u0026lt;List\u0026lt;SingleResult\u0026gt;\u0026gt; updateBatch(List\u0026lt;$!dtoType\u0026gt; dtos) { try { List\u0026lt;$!{tableInfo.name}\u0026gt; entitys = BaseConverter.convertAll(dtos, $!{tableInfo.name}.class); $!{repositoryName}.saveAll(entitys); } catch (Exception e) { return new BaseResult\u0026lt;\u0026gt;(\u0026#34;-1\u0026#34;, \u0026#34;批量更新失败\u0026#34;); } return new BaseResult\u0026lt;\u0026gt;(); } /** * 通过主键删除数据 * * @param id 主键 * @return 是否成功 */ @Override @Transactional public SingleResult deleteById(Long id) { try { $!{repositoryName}.updateDeletedById(id); } catch (Exception e) { return SingleResult.build(id.toString(), \u0026#34;false\u0026#34;, \u0026#34;删除异常\u0026#34;); } return SingleResult.successBuild(id.toString()); } @Override public boolean isExist($!{dtoType} dto) { Integer exist = $!{repositoryName}.isExist(dto.getName()); return null != exist; } @Override public boolean isExistById(Long id) { Integer exist = $!{repositoryName}.isExistById(id); return null != exist; } private Specification\u0026lt;$!{tableInfo.name}\u0026gt; getWhereClause($!{queryType} query) { return (Specification\u0026lt;$!{tableInfo.name}\u0026gt;) (root, criteriaQuery, criteriaBuilder) -\u0026gt; { List\u0026lt;Predicate\u0026gt; predicates = new ArrayList\u0026lt;\u0026gt;(); if (StringUtils.isNotBlank(query.getName())) { predicates.add(criteriaBuilder.like(root.get(\u0026#34;name\u0026#34;), \u0026#34;%\u0026#34; + query.getName() + \u0026#34;%\u0026#34;)); } if (ObjectUtils.isNotEmpty(query.getCreatedTime())) { //大于等于开始时间 predicates.add(criteriaBuilder.greaterThanOrEqualTo(root.get(\u0026#34;createTime\u0026#34;), DateUtil.parse(query.getCreatedTime()))); } if (ObjectUtils.isNotEmpty(query.getCreatedTime())) { //小于等于结束时间 predicates.add(criteriaBuilder.lessThanOrEqualTo(root.get(\u0026#34;createTime\u0026#34;), DateUtil.parse(query.getCreatedTime()))); } return criteriaBuilder.and(predicates.toArray(new Predicate[0])); }; } } VO 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 $!{init.vm} $!{define.vm} ##保存文件 #save(\u0026#34;/vo$!{workPath}\u0026#34;, \u0026#34;VO.java\u0026#34;) ##包路径（宏定义） #setPackageSuffix(\u0026#34;vo$!{workPackage}\u0026#34;) ##自动导入包（全局变量） $!{autoImport.vm} import java.util.Date; ##表注释（宏定义） #classNotes(\u0026#34;\u0026#34;) @Data @ApiModel(value=\u0026#34;$tableInfo.savePackageName.replace(\u0026#34;.\u0026#34;,\u0026#34;-\u0026#34;)-dto$!{workCommon}-$!{voType}\u0026#34;) public class $!voType implements Serializable { private static final long serialVersionUID = 1L; ## 主键列 #foreach($column in $tableInfo.pkColumn) /** * $!column.comment */ @ApiModelProperty(value = \u0026#34;$!column.comment\u0026#34;) private $!tool.getClsNameByFullName($column.type) $!column.name; #end ## 其他列 #foreach($column in $tableInfo.otherColumn) /** * $!{column.comment} */ @ApiModelProperty(value = \u0026#34;$!column.comment\u0026#34;) private $!tool.getClsNameByFullName($!column.type) $!column.name; #end } DTO 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 $!{init.vm} $!{define.vm} ##保存文件 #save(\u0026#34;/dto$!{workPath}\u0026#34;, \u0026#34;DTO.java\u0026#34;) ##包路径（宏定义） #setPackageSuffix(\u0026#34;dto$!{workPackage}\u0026#34;) ##自动导入包（全局变量） $!{autoImport.vm} import io.swagger.annotations.ApiModel; import io.swagger.annotations.ApiModelProperty; import java.io.Serializable; import lombok.Data; import java.util.Date; ##表注释（宏定义） #classNotes(\u0026#34;\u0026#34;) @Data @ApiModel(value=\u0026#34;$tableInfo.savePackageName.replace(\u0026#34;.\u0026#34;,\u0026#34;-\u0026#34;)-dto$!{workCommon}-$!{dtoType}\u0026#34;) public class $!dtoType implements Serializable { private static final long serialVersionUID = 1L; ## 主键列 #foreach($column in $tableInfo.pkColumn) /** * $!column.comment */ @ApiModelProperty(value = \u0026#34;$!column.comment\u0026#34;) private $!tool.getClsNameByFullName($column.type) $!column.name; #end ## 其他列 #foreach($column in $tableInfo.otherColumn) /** * $!{column.comment} */ @ApiModelProperty(value = \u0026#34;$!column.comment\u0026#34;) private $!tool.getClsNameByFullName($!column.type) $!column.name; #end } Repository JPA 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 ##导入宏定义 $!{init.vm} $!{define.vm} ##保存文件（宏定义） #save(\u0026#34;/repository/$!{workPath}\u0026#34;, \u0026#34;Repository.java\u0026#34;) ##包路径（宏定义） #setPackageSuffix(\u0026#34;repository$!{workPackage}\u0026#34;) import com.javahik.hiklife.easycode.entity.$!{tableInfo.name}; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.data.jpa.repository.JpaSpecificationExecutor; import org.springframework.data.jpa.repository.Modifying; import org.springframework.data.jpa.repository.Query; import org.springframework.stereotype.Repository; ##表注释（宏定义） #classNotes(\u0026#34;表数据库访问层\u0026#34;) @Repository public interface $!{repositoryType} extends JpaRepository\u0026lt;$!{tableInfo.name}, String\u0026gt;, JpaSpecificationExecutor\u0026lt;$!{tableInfo.name}\u0026gt; { @Modifying @Query(nativeQuery = true, value = \u0026#34;update $!{tableInfo.name} set deleted = \u0026#39;1\u0026#39; where id = ?1\u0026#34;) void updateDeletedById(Long id); @Query(nativeQuery = true, value = \u0026#34;select 1 from $!{tableInfo.name} where name = ?1 limit 1\u0026#34;) Integer isExist(String name); @Query(nativeQuery = true, value = \u0026#34;select 1 from $!{tableInfo.name} where id = ?1 limit 1\u0026#34;) Integer isExistById(Long id); } QueryDTO 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 $!{init.vm} $!{define.vm} ##保存文件 #save(\u0026#34;/dto$!{workPath}\u0026#34;, \u0026#34;Query.java\u0026#34;) ##包路径（宏定义） #setPackageSuffix(\u0026#34;dto$!{workPackage}\u0026#34;) ##自动导入包（全局变量） $!{autoImport.vm} import io.swagger.annotations.ApiModel; import io.swagger.annotations.ApiModelProperty; import java.io.Serializable; import lombok.Data; import java.util.Date; ##表注释（宏定义） #classNotes(\u0026#34;查询类\u0026#34;) @Data public class $!{queryType} implements Serializable { private static final long serialVersionUID = 1L; private Integer pageNo = 1; private Integer pageSize = 20; private String sortField = \u0026#34;createDate\u0026#34;; private String sortOrder = \u0026#34;desc\u0026#34;; private String createdTime; private String name; } Define 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 ##（Velocity宏定义） ##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\u0026#34;Test\u0026#34;) #macro(setTableSuffix $suffix) #set($tableName = $!tool.append($tableInfo.name, $suffix)) #end ##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\u0026#34;Test\u0026#34;) #macro(setPackageSuffix $suffix) #if($suffix!=\u0026#34;\u0026#34;)package #end#if($tableInfo.savePackageName!=\u0026#34;\u0026#34;)$!{tableInfo.savePackageName}.#{end}$!suffix; #end ##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\u0026#34;/entity\u0026#34;, \u0026#34;.java\u0026#34;) #macro(save $path $fileName) $!callback.setSavePath($tool.append($tableInfo.savePath, $path)) $!callback.setFileName($tool.append($tableInfo.name, $fileName)) #end ## 自定义entity、Mapper、Service、Api、DTO、VO的名字减少拼接，增加重用性 #set($entityType = $!tool.firstUpperCase($!tableInfo.name)) #set($entityName = $!tool.firstLowerCase($!tableInfo.name)) #set($mapperType = $!tool.append($!tool.firstUpperCase($!tableInfo.name), \u0026#34;Mapper\u0026#34;)) #set($mapperName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \u0026#34;Mapper\u0026#34;)) #set($repositoryType = $!tool.append($!tool.firstUpperCase($!tableInfo.name), \u0026#34;Repository\u0026#34;)) #set($repositoryName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \u0026#34;Repository\u0026#34;)) #set($serviceType = $!tool.append($!tool.firstUpperCase($!tableInfo.name), \u0026#34;Service\u0026#34;)) #set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \u0026#34;Service\u0026#34;)) #set($serviceImplType = $!tool.append($!tool.firstUpperCase($!tableInfo.name), \u0026#34;ServiceImpl\u0026#34;)) #set($serviceImplName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \u0026#34;ServiceImpl\u0026#34;)) #set($apiType = $!tool.append($!tool.firstUpperCase($!tableInfo.name), \u0026#34;Controller\u0026#34;)) #set($apiName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \u0026#34;Controller\u0026#34;)) #set($dtoType = $!tool.append($!tool.firstUpperCase($!tableInfo.name), \u0026#34;DTO\u0026#34;)) #set($dtoName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \u0026#34;DTO\u0026#34;)) #set($queryType = $!tool.append($!tool.firstUpperCase($!tableInfo.name), \u0026#34;Query\u0026#34;)) #set($queryName = \u0026#34;query\u0026#34;) #set($voType = $!tool.append($!tool.firstUpperCase($!tableInfo.name), \u0026#34;VO\u0026#34;)) #set($voName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \u0026#34;VO\u0026#34;)) ## 自定义类注解 #macro(classNotes $notes) /** * @Description $!tableInfo.obj.name $notes * @Author $!author * @Date $!time.currTime() */ #end Init 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 ##初始化区域 ##去掉表的t_前缀 $!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(\u0026#34;tb_\u0026#34;,\u0026#34;\u0026#34;))) ## 设置业务模块名 #set($index = 0) #foreach ($element in $tableInfo.obj.name.split(\u0026#34;_\u0026#34;)) #set($index = $index +1) #if($index == 3) #set($work = $element) #end #end #if($!{work}) ## 包.模块名 #set($workPackage = $!tool.append(\u0026#34;.\u0026#34;,$!{work})) ## 路径/模块名 #set($workPath = $!tool.append(\u0026#34;/\u0026#34;,$!{work})) ## Common-模块名 #set($workCommon = $!tool.append(\u0026#34;-\u0026#34;,$!{work})) #end ##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误 #foreach($column in $tableInfo.fullColumn) #if($column.name.startsWith(\u0026#34;is\u0026#34;) \u0026amp;\u0026amp; $column.type.equals(\u0026#34;java.lang.Boolean\u0026#34;)) $!column.setName($tool.firstLowerCase($column.name.substring(2))) #end #end ##实现动态排除列 #set($temp = $tool.newHashSet(\u0026#34;testCreateTime\u0026#34;, \u0026#34;otherColumn\u0026#34;)) #foreach($item in $temp) #set($newList = $tool.newArrayList()) #foreach($column in $tableInfo.fullColumn) #if($column.name!=$item) ##带有反回值的方法调用时使用$tool.call来消除返回值 $tool.call($newList.add($column)) #end #end ##重新保存 $tableInfo.setFullColumn($newList) #end ##对importList进行篡改 #set($temp = $tool.newHashSet()) #foreach($column in $tableInfo.fullColumn) #if(!$column.type.startsWith(\u0026#34;java.lang.\u0026#34;)) ##带有反回值的方法调用时使用$tool.call来消除返回值 $tool.call($temp.add($column.type)) #end #end ##覆盖 #set($importList = $temp) autoimport 1 2 3 4 ##自动导入包（仅导入实体属性需要的包，通常用于实体类） #foreach($import in $importList) import $!import; #end ","permalink":"https://isyuanpeng.github.io/posts/tool/idea+easycode%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/","summary":"\u003ch2 id=\"需求\"\u003e需求\u003c/h2\u003e\n\u003cp\u003e对于增删改查类的代码，每次都要写很多重复的代码，所以考虑使用自动生成代码来减少重复工作。\u003c/p\u003e\n\u003ch2 id=\"自动生成代码的现状\"\u003e自动生成代码的现状\u003c/h2\u003e\n\u003cp\u003e目前有多种方式可以自动生成代码:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e将模板引擎集成到项目中，通过代码的形式自动生成代码，此种方法和项目耦合度较高，对项目由侵入性\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e在线网站自动生成代码，使用互联网，安全性较低\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIDEA+groovy方法，目前了解到生成的代码比较简单，定制化程度不高\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIDEA插件生成，一般插件也都是以模板引擎为基础，进行代码的生成\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e最后选择了第四种，IDEA插件的方式，插件使用的是EasyCode, 基于velocity模板引擎。\n\u0026gt; \u003ca href=\"https://gitee.com/makejava/EasyCode\"\u003ehttps://gitee.com/makejava/EasyCode\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"velocity速度语法\"\u003eVelocity(速度)语法\u003c/h2\u003e\n\u003cp\u003e比较精简的一种语言，关键字不多，和代码混合使用。教程：\u003ca href=\"https://www.cnblogs.com/hduwbf/p/6201731.html\"\u003ehttps://www.cnblogs.com/hduwbf/p/6201731.html\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"easycode\"\u003eEasyCode\u003c/h2\u003e\n\u003ch2 id=\"我的模板具有个人风格可以进行修改使用\"\u003e我的模板(具有个人风格，可以进行修改使用)\u003c/h2\u003e\n\u003ch4 id=\"controller\"\u003eController\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 44\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 45\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 46\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 47\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 48\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 49\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 50\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 51\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 52\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 53\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 54\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 55\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 56\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 57\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 58\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 59\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 60\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 61\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 62\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 63\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 64\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 65\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 66\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 67\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 68\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 69\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 70\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 71\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 72\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 73\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 74\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 75\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 76\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 77\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 78\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 79\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 80\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 81\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 82\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 83\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 84\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 85\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 86\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 87\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 88\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 89\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 90\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 91\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 92\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 93\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 94\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 95\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 96\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 97\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 98\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 99\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e100\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e101\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e102\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e103\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e104\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e105\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e106\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e107\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e108\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e109\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e110\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e111\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e112\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e113\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e114\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e115\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e116\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e117\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ##导入宏定义\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    $!{init.vm}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    $!{define.vm}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ##保存文件（宏定义）\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    #save(\u0026#34;/controller/$!{workPath}\u0026#34;, \u0026#34;Controller.java\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ##包路径（宏定义）\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    #setPackageSuffix(\u0026#34;controller$!{workPackage}\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    $!{autoImport.vm}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    import io.swagger.annotations.ApiOperation;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    import $!{tableInfo.savePackageName}.service$!{workPackage}.$!{serviceType};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    import $!{tableInfo.savePackageName}.dto$!{workPackage}.$!{dtoType};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    import $!{tableInfo.savePackageName}.vo$!{workPackage}.$!{voType};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    import org.springframework.web.bind.annotation.*;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    import io.swagger.annotations.Api;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    import org.apache.commons.lang3.StringUtils;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    import javax.annotation.Resource;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    import java.util.List;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ##表注释（宏定义）\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    #classNotes(\u0026#34;表控制层\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Api(tags = \u0026#34;$!{tableInfo.comment}\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @RestController\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @RequestMapping(\u0026#34;$!entityName\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    public class $!apiType {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        @Resource\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        private $!serviceType $!serviceName;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        /**\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        * 分页查询所有数据\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        *\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        * @param query 查询实体\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        * @return 所有数据\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        */\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        @PostMapping(\u0026#34;/queryPage\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        @ApiOperation(\u0026#34;按字段条件分页查询$!{tableInfo.comment}\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        public BaseResult\u0026lt;PageVo\u0026lt;$!voType\u0026gt;\u0026gt; query$!{entityType}ByPage(@RequestBody $!{queryType} query) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            return $!{serviceName}.queryByPage(query);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        /**\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        * 通过主键查询多条数据\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        *\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        * @param  query 查询实体\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        * @return 多条数据\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        */\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        @PostMapping(\u0026#34;/query\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        @ApiOperation(\u0026#34;根据Id查询$!{tableInfo.comment}\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        public BaseResult\u0026lt;List\u0026lt;$!voType\u0026gt;\u0026gt; query(@RequestBody $!{queryType} query) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            return $!{serviceName}.queryByCondition(query);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        /**\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        * 新增数据\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        *\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        * @param dto 实体对象\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        * @return 新增结果\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        */\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        @PostMapping(\u0026#34;/save\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        @ApiOperation(\u0026#34;新增$!{tableInfo.comment}数据\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        public BaseResult\u0026lt;Object\u0026gt; save(@RequestBody $!{dtoType} dto) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            //数据校验\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            if (StringUtils.isBlank(dto.getName())) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                return new BaseResult\u0026lt;\u0026gt;(ResponseEnum.NO_ARGS.getCode(), ResponseEnum.NO_ARGS.getMessage());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            if ($!{serviceName}.isExist(dto)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                return new BaseResult\u0026lt;\u0026gt;(ResponseEnum.REPEAT.getCode(), ResponseEnum.REPEAT.getMessage());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            return $!{serviceName}.save(dto);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        /**\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        * 修改数据\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        *\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        * @param dto 实体对象\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        * @return 修改结果\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        */\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        @PostMapping(\u0026#34;/update\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        @ApiOperation(\u0026#34;更新$!{tableInfo.comment}\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        public BaseResult\u0026lt;Object\u0026gt; update($!{dtoType} dto) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            //数据校验\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            if (StringUtils.isBlank(dto.getName())) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                return new BaseResult\u0026lt;\u0026gt;(ResponseEnum.NO_ARGS.getCode(), ResponseEnum.NO_ARGS.getMessage());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            return $!{serviceName}.update(dto);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        /**\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        * 删除多条数据\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        *\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        * @param ids 主键ids\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        * @return 删除结果\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        */\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        @PostMapping(\u0026#34;/delete\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        @ApiOperation(\u0026#34;根据Id软删除$!{tableInfo.comment}数据\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        public BaseResult\u0026lt;List\u0026lt;SingleResult\u0026gt;\u0026gt; deleteByRowIds(List\u0026lt;Long\u0026gt; ids) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            List\u0026lt;SingleResult\u0026gt; result = new ArrayList\u0026lt;\u0026gt;();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ids.forEach(x -\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                // 数据校验\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                if (!$!{serviceName}.isExistById(x)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    result.add(SingleResult.successBuild(x.toString()));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                } else {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    result.add($!{serviceName}.deleteById(x));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            return BaseResult.success(result);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch4 id=\"entity\"\u003eEntity\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e44\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e45\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e46\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e47\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e48\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003e{init\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003evm}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003e{define\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003evm}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e##保存文件（宏定义）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#save(\u0026#34;/entity$!{workPath}\u0026#34;, \u0026#34;.java\u0026#34;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e##包路径（宏定义）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#setPackageSuffix(\u0026#34;entity$!{workPackage}\u0026#34;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport io\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eswagger\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eannotations\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eApiModel;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport io\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eswagger\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eannotations\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eApiModelProperty;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport lombok\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eData;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport javax\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epersistence\u003cspan style=\"color:#f92672\"\u003e.*\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport java\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eio\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eSerializable;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport java\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eutil\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDate;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e##表注释（宏定义）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#classNotes(\u0026#34;\u0026#34;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eData\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e##@ApiModel(value=\u0026#34;$tableInfo.savePackageName.replace(\u0026#34;.\u0026#34;,\u0026#34;-\u0026#34;)-entity$!{workCommon}-$!{entityType}\u0026#34;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eApiModel(value\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;$!{tableInfo.comment}\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eTable(name \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;$!{tableInfo.obj.name}\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epublic \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003eentityType implements Serializable {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    private \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e final long serialVersionUID \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003eL;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e## 主键列\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#foreach($column in $tableInfo.pkColumn)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e/**\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003ecolumn\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecomment\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#f92672\"\u003e*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eId\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eGeneratedValue(strategy\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eGenerationType\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eIDENTITY)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eColumn(name \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;$!{column.obj.name}\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eApiModelProperty(value \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;$!column.comment\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    private \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003etool\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003egetClsNameByFullName(\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003ecolumn\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etype) \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003ecolumn\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ename;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#end\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e## 其他列\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#foreach($column in $tableInfo.otherColumn)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e/**\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003e{column\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecomment}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#f92672\"\u003e*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eColumn(name \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;$!{column.obj.name}\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eApiModelProperty(value \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;$!column.comment\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    private \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003etool\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003egetClsNameByFullName(\u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003ecolumn\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etype) \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003ecolumn\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ename;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#end\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch4 id=\"service\"\u003eService\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e##导入宏定义\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$!{init.vm}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$!{define.vm}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e##保存文件（宏定义）\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e#save(\u0026#34;/service$!{workPath}\u0026#34;, \u0026#34;Service.java\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e##包路径（宏定义）\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e#setPackageSuffix(\u0026#34;service$!{workPackage}\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$!{autoimpot.vm}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e##表注释（宏定义）\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e#classNotes(\u0026#34;表服务接口\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epublic interface $!serviceType {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    BaseResult\u0026lt;PageVo\u0026lt;$!{voType}\u0026gt;\u0026gt; queryByPage($!{queryType} query);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tBaseResult\u0026lt;List\u0026lt;$!{voType}\u0026gt;\u0026gt; queryByCondition($!{queryType} query);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    BaseResult\u0026lt;Object\u0026gt; save($!{dtoType} dto);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    BaseResult\u0026lt;List\u0026lt;SingleResult\u0026gt;\u0026gt; saveBatch(List\u0026lt;$!{dtoType}\u0026gt; dtos);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tBaseResult\u0026lt;Object\u0026gt; update($!{dtoType} dto);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    BaseResult\u0026lt;List\u0026lt;SingleResult\u0026gt;\u0026gt; updateBatch(List\u0026lt;$!{dtoType}\u0026gt; dtos);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    SingleResult deleteById(Long id);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tboolean isExist($!{dtoType} dto);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    boolean isExistById(Long id);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch4 id=\"serviceimpl\"\u003eServiceImpl\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 44\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 45\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 46\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 47\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 48\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 49\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 50\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 51\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 52\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 53\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 54\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 55\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 56\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 57\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 58\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 59\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 60\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 61\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 62\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 63\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 64\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 65\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 66\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 67\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 68\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 69\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 70\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 71\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 72\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 73\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 74\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 75\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 76\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 77\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 78\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 79\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 80\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 81\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 82\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 83\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 84\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 85\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 86\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 87\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 88\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 89\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 90\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 91\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 92\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 93\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 94\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 95\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 96\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 97\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 98\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 99\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e100\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e101\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e102\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e103\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e104\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e105\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e106\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e107\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e108\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e109\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e110\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e111\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e112\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e113\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e114\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e115\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e116\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e117\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e118\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e119\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e120\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e121\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e122\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e123\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e124\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e125\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e126\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e127\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e128\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e129\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e130\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e131\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e132\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e133\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e134\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e135\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e136\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e137\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e138\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e139\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e140\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e141\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e142\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e143\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e144\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e145\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e146\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e147\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e148\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e149\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e150\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e151\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e152\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e153\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e154\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e155\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e156\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e157\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e158\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e159\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e160\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e161\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e162\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e163\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e164\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e165\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e166\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e167\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e168\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e169\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e170\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e171\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e172\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e173\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e174\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e##导入宏定义\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$!{init.vm}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$!{define.vm}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e##保存文件（宏定义）\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e#save(\u0026#34;/service/impl/$!{workPath}\u0026#34;, \u0026#34;ServiceImpl.java\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e##包路径（宏定义）\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e#setPackageSuffix(\u0026#34;service.impl$!{workPackage}\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$!{autoimport.vm}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport org.apache.commons.lang3.StringUtils;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport javax.transaction.Transactional;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport $!{tableInfo.savePackageName}.entity$!{workPackage}.$!{entityType};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport javax.persistence.criteria.Predicate;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e#classNotes(\u0026#34;表服务实现类\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@Service\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epublic class $!{serviceImplType} implements $!{serviceType} {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Resource\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    private $!{repositoryType} $!{repositoryName};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    /**\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * 查询多条数据\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     *\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * @param query 查询参数\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * @return 实例对象\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     */\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    public BaseResult\u0026lt;List\u0026lt;$!{voType}\u0026gt;\u0026gt; queryByCondition($!{queryType} query) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tList\u0026lt;$!{tableInfo.name}\u0026gt; items = $!{repositoryName}.findAll(getWhereClause(query));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        return BaseResult.success(BaseConverter.convertAll(items, $!{voType}.class));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    /**\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * 分页查询\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     *\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * @param query 筛选条件\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * @return 查询结果\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     */\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    public BaseResult\u0026lt;PageVo\u0026lt;$!voType\u0026gt;\u0026gt; queryByPage($!{queryType} query) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\ttry {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tSort sort = Sort.by(\u0026#34;desc\u0026#34;.equals(query.getSortOrder()) ? Sort.Direction.DESC : Sort.Direction.ASC,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            query.getSortField());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tPageable pageable = PageRequest.of(query.getPageNo() - 1, (query.getPageSize()), sort);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tPage\u0026lt;$!{tableInfo.name}\u0026gt; page = $!{repositoryName}.findAll(getWhereClause(query), pageable);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\treturn BaseResult.success(BaseConverter.convertPage(page, $!{voType}.class));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t} catch (Exception e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\treturn new BaseResult\u0026lt;\u0026gt;(\u0026#34;-1\u0026#34;, \u0026#34;查询分页失败\u0026#34;);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    /**\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * 新增数据\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     *\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * @param dto dto对象\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * @return vo $!voName\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     */\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    public BaseResult\u0026lt;Object\u0026gt; save($!dtoType dto) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        try {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t$!{tableInfo.name} entity = BaseConverter.convert(dto, $!{tableInfo.name}.class);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t$!{repositoryName}.save(entity);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t} catch (Exception e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\treturn new BaseResult\u0026lt;\u0026gt;(\u0026#34;-1\u0026#34;, \u0026#34;保存失败\u0026#34;);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        return new BaseResult\u0026lt;\u0026gt;();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t/**\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * 批量新增数据\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     *\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * @param dtos dto对象\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * @return BaseResult\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     */\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    public BaseResult\u0026lt;List\u0026lt;SingleResult\u0026gt;\u0026gt; saveBatch(List\u0026lt;$!dtoType\u0026gt; dtos) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        try {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tList\u0026lt;$!{tableInfo.name}\u0026gt; entitys = BaseConverter.convertAll(dtos, $!{tableInfo.name}.class);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t$!{repositoryName}.saveAll(entitys);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t} catch (Exception e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\treturn new BaseResult\u0026lt;\u0026gt;(\u0026#34;-1\u0026#34;, \u0026#34;保存失败\u0026#34;);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        return new BaseResult\u0026lt;\u0026gt;();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t/**\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * 修改数据\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     *\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * @param  dto dto对象 \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * @return BaseResult\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     */\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t@Transactional\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    public BaseResult\u0026lt;Object\u0026gt; update($!dtoType dto) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        try {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t$!{tableInfo.name} entity = BaseConverter.convert(dto, $!{tableInfo.name}.class);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t$!{repositoryName}.save(entity);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t} catch (Exception e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\treturn new BaseResult\u0026lt;\u0026gt;(\u0026#34;-1\u0026#34;, \u0026#34;更新失败\u0026#34;);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        return new BaseResult\u0026lt;\u0026gt;();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    /**\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * 批量修改数据\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     *\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * @param dtos dto对象\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * @return 实例对象\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     */\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t@Transactional\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    public BaseResult\u0026lt;List\u0026lt;SingleResult\u0026gt;\u0026gt; updateBatch(List\u0026lt;$!dtoType\u0026gt; dtos) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        try {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tList\u0026lt;$!{tableInfo.name}\u0026gt; entitys = BaseConverter.convertAll(dtos, $!{tableInfo.name}.class);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t$!{repositoryName}.saveAll(entitys);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t} catch (Exception e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\treturn new BaseResult\u0026lt;\u0026gt;(\u0026#34;-1\u0026#34;, \u0026#34;批量更新失败\u0026#34;);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        return new BaseResult\u0026lt;\u0026gt;();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    /**\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * 通过主键删除数据\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     *\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * @param id 主键\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * @return 是否成功\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     */\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t@Transactional\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    public SingleResult deleteById(Long id) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\ttry {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t$!{repositoryName}.updateDeletedById(id);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t} catch (Exception e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\treturn SingleResult.build(id.toString(), \u0026#34;false\u0026#34;, \u0026#34;删除异常\u0026#34;);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        return SingleResult.successBuild(id.toString());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    public boolean isExist($!{dtoType} dto) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Integer exist = $!{repositoryName}.isExist(dto.getName());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        return null != exist;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    public boolean isExistById(Long id) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Integer exist = $!{repositoryName}.isExistById(id);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        return null != exist;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tprivate Specification\u0026lt;$!{tableInfo.name}\u0026gt; getWhereClause($!{queryType} query) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        return (Specification\u0026lt;$!{tableInfo.name}\u0026gt;) (root, criteriaQuery, criteriaBuilder) -\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            List\u0026lt;Predicate\u0026gt; predicates = new ArrayList\u0026lt;\u0026gt;();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            if (StringUtils.isNotBlank(query.getName())) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                predicates.add(criteriaBuilder.like(root.get(\u0026#34;name\u0026#34;), \u0026#34;%\u0026#34; + query.getName() + \u0026#34;%\u0026#34;));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            if (ObjectUtils.isNotEmpty(query.getCreatedTime())) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                //大于等于开始时间\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                predicates.add(criteriaBuilder.greaterThanOrEqualTo(root.get(\u0026#34;createTime\u0026#34;), DateUtil.parse(query.getCreatedTime())));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            if (ObjectUtils.isNotEmpty(query.getCreatedTime())) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                //小于等于结束时间\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                predicates.add(criteriaBuilder.lessThanOrEqualTo(root.get(\u0026#34;createTime\u0026#34;), DateUtil.parse(query.getCreatedTime())));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            return criteriaBuilder.and(predicates.toArray(new Predicate[0]));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch4 id=\"vo\"\u003eVO\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e39\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003e{init\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003evm}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003e{define\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003evm}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e##保存文件\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#save(\u0026#34;/vo$!{workPath}\u0026#34;, \u0026#34;VO.java\u0026#34;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e##包路径（宏定义）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#setPackageSuffix(\u0026#34;vo$!{workPackage}\u0026#34;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e##自动导入包（全局变量）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003e{autoImport\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003evm}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport java\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eutil\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDate;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e##表注释（宏定义）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#classNotes(\u0026#34;\u0026#34;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eData\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eApiModel(value\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;$tableInfo.savePackageName.replace(\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;,\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;)-dto$!{workCommon}-$!{voType}\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epublic \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003evoType implements Serializable {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    private \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e final long serialVersionUID \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003eL;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e## 主键列\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#foreach($column in $tableInfo.pkColumn)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e/**\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003ecolumn\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecomment\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#f92672\"\u003e*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eApiModelProperty(value \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;$!column.comment\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    private \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003etool\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003egetClsNameByFullName(\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003ecolumn\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etype) \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003ecolumn\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ename;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#end\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e## 其他列\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#foreach($column in $tableInfo.otherColumn)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e/**\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003e{column\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecomment}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#f92672\"\u003e*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eApiModelProperty(value \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;$!column.comment\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    private \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003etool\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003egetClsNameByFullName(\u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003ecolumn\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etype) \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003ecolumn\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ename;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#end\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch4 id=\"dto\"\u003eDTO\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e43\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003e{init\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003evm}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003e{define\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003evm}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e##保存文件\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#save(\u0026#34;/dto$!{workPath}\u0026#34;, \u0026#34;DTO.java\u0026#34;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e##包路径（宏定义）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#setPackageSuffix(\u0026#34;dto$!{workPackage}\u0026#34;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e##自动导入包（全局变量）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003e{autoImport\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003evm}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport io\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eswagger\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eannotations\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eApiModel;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport io\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eswagger\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eannotations\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eApiModelProperty;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport java\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eio\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eSerializable;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport lombok\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eData;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport java\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eutil\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDate;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e##表注释（宏定义）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#classNotes(\u0026#34;\u0026#34;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eData\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eApiModel(value\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;$tableInfo.savePackageName.replace(\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;,\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;)-dto$!{workCommon}-$!{dtoType}\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epublic \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003edtoType implements Serializable {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    private \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e final long serialVersionUID \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003eL;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e## 主键列\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#foreach($column in $tableInfo.pkColumn)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e/**\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003ecolumn\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecomment\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#f92672\"\u003e*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eApiModelProperty(value \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;$!column.comment\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    private \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003etool\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003egetClsNameByFullName(\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003ecolumn\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etype) \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003ecolumn\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ename;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#end\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e## 其他列\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#foreach($column in $tableInfo.otherColumn)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e/**\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003e{column\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecomment}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#f92672\"\u003e*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eApiModelProperty(value \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;$!column.comment\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    private \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003etool\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003egetClsNameByFullName(\u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003ecolumn\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etype) \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003ecolumn\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ename;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#end\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch4 id=\"repository-jpa\"\u003eRepository JPA\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e##导入宏定义\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003e{init\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003evm}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003e{define\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003evm}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e##保存文件（宏定义）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#save(\u0026#34;/repository/$!{workPath}\u0026#34;, \u0026#34;Repository.java\u0026#34;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e##包路径（宏定义）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#setPackageSuffix(\u0026#34;repository$!{workPackage}\u0026#34;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport com\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejavahik\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ehiklife\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eeasycode\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eentity\u003cspan style=\"color:#f92672\"\u003e.$!\u003c/span\u003e{tableInfo\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ename};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport org\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003espringframework\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edata\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejpa\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erepository\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eJpaRepository;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport org\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003espringframework\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edata\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejpa\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erepository\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eJpaSpecificationExecutor;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport org\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003espringframework\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edata\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejpa\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erepository\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eModifying;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport org\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003espringframework\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edata\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejpa\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erepository\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eQuery;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport org\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003espringframework\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estereotype\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eRepository;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e##表注释（宏定义）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#classNotes(\u0026#34;表数据库访问层\u0026#34;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eRepository\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epublic interface \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003e{repositoryType} \u003cspan style=\"color:#66d9ef\"\u003eextends\u003c/span\u003e JpaRepository\u003cspan style=\"color:#f92672\"\u003e\u0026lt;$!\u003c/span\u003e{tableInfo\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ename}, \u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e, JpaSpecificationExecutor\u003cspan style=\"color:#f92672\"\u003e\u0026lt;$!\u003c/span\u003e{tableInfo\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ename}\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eModifying\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eQuery(nativeQuery \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e true, value \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;update $!{tableInfo.name} set deleted = \u0026#39;1\u0026#39; where id = ?1\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    void updateDeletedById(Long id);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eQuery(nativeQuery \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e true, value \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;select 1 from $!{tableInfo.name} where name = ?1 limit 1\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tInteger isExist(\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e name);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eQuery(nativeQuery \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e true, value \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;select 1 from $!{tableInfo.name} where id = ?1 limit 1\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tInteger isExistById(Long id);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch4 id=\"querydto\"\u003eQueryDTO\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$!{init.vm}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$!{define.vm}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e##保存文件\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e#save(\u0026#34;/dto$!{workPath}\u0026#34;, \u0026#34;Query.java\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e##包路径（宏定义）\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e#setPackageSuffix(\u0026#34;dto$!{workPackage}\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e##自动导入包（全局变量）\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$!{autoImport.vm}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport io.swagger.annotations.ApiModel;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport io.swagger.annotations.ApiModelProperty;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport java.io.Serializable;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport lombok.Data;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport java.util.Date;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e##表注释（宏定义）\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e#classNotes(\u0026#34;查询类\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@Data\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epublic class $!{queryType} implements Serializable {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    private static final long serialVersionUID = 1L;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    private Integer pageNo = 1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    private Integer pageSize = 20;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    private String sortField = \u0026#34;createDate\u0026#34;;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    private String sortOrder = \u0026#34;desc\u0026#34;;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    private String createdTime;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    private String name;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch4 id=\"define\"\u003eDefine\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e44\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e45\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e46\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e##（Velocity宏定义）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\u0026#34;Test\u0026#34;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#macro(setTableSuffix $suffix)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e#set($tableName = $!tool.append($tableInfo.name, $suffix))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#end\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\u0026#34;Test\u0026#34;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#macro(setPackageSuffix $suffix)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#if($suffix!=\u0026#34;\u0026#34;)package #end#if($tableInfo.savePackageName!=\u0026#34;\u0026#34;)$!{tableInfo.savePackageName}.#{end}$!suffix;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#end\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\u0026#34;/entity\u0026#34;, \u0026#34;.java\u0026#34;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#macro(save $path $fileName)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003ecallback\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esetSavePath(\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003etool\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003etableInfo\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esavePath, \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003epath))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003ecallback\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esetFileName(\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003etool\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003etableInfo\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ename, \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003efileName))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#end\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e## 自定义entity、Mapper、Service、Api、DTO、VO的名字减少拼接，增加重用性\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#set($entityType = $!tool.firstUpperCase($!tableInfo.name))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#set($entityName = $!tool.firstLowerCase($!tableInfo.name))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#set($mapperType = $!tool.append($!tool.firstUpperCase($!tableInfo.name), \u0026#34;Mapper\u0026#34;))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#set($mapperName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \u0026#34;Mapper\u0026#34;))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#set($repositoryType = $!tool.append($!tool.firstUpperCase($!tableInfo.name), \u0026#34;Repository\u0026#34;))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#set($repositoryName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \u0026#34;Repository\u0026#34;))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#set($serviceType = $!tool.append($!tool.firstUpperCase($!tableInfo.name), \u0026#34;Service\u0026#34;))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \u0026#34;Service\u0026#34;))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#set($serviceImplType = $!tool.append($!tool.firstUpperCase($!tableInfo.name), \u0026#34;ServiceImpl\u0026#34;))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#set($serviceImplName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \u0026#34;ServiceImpl\u0026#34;))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#set($apiType = $!tool.append($!tool.firstUpperCase($!tableInfo.name), \u0026#34;Controller\u0026#34;))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#set($apiName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \u0026#34;Controller\u0026#34;))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#set($dtoType = $!tool.append($!tool.firstUpperCase($!tableInfo.name), \u0026#34;DTO\u0026#34;))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#set($dtoName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \u0026#34;DTO\u0026#34;))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#set($queryType = $!tool.append($!tool.firstUpperCase($!tableInfo.name), \u0026#34;Query\u0026#34;))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#set($queryName = \u0026#34;query\u0026#34;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#set($voType = $!tool.append($!tool.firstUpperCase($!tableInfo.name), \u0026#34;VO\u0026#34;))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#set($voName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \u0026#34;VO\u0026#34;))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e## 自定义类注解\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#macro(classNotes $notes)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e/**\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eDescription \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003etableInfo\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eobj\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ename \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003enotes\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eAuthor \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003eauthor\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eDate \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003etime\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecurrTime()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#f92672\"\u003e*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#end\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch4 id=\"init\"\u003eInit\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e44\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e45\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e46\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e47\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e48\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e49\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e50\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e51\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e52\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e53\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e54\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e55\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e##初始化区域\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e##去掉表的t_前缀\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003etableInfo\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esetName(\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003etool\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003egetClassName(\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003etableInfo\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eobj\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ename\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ereplaceFirst(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;tb_\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e## 设置业务模块名\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#set($index = 0)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#foreach ($element in $tableInfo.obj.name.split(\u0026#34;_\u0026#34;))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e#set($index = $index +1)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e#if($index == 3)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e#set($work = $element)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e#end\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#end\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#if($!{work})\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e## 包.模块名\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e#set($workPackage = $!tool.append(\u0026#34;.\u0026#34;,$!{work}))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e## 路径/模块名\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e#set($workPath = $!tool.append(\u0026#34;/\u0026#34;,$!{work}))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e## Common-模块名\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e#set($workCommon = $!tool.append(\u0026#34;-\u0026#34;,$!{work}))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#end\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#foreach($column in $tableInfo.fullColumn)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e#if($column.name.startsWith(\u0026#34;is\u0026#34;) \u0026amp;\u0026amp; $column.type.equals(\u0026#34;java.lang.Boolean\u0026#34;))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e$!\u003c/span\u003ecolumn\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esetName(\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003etool\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efirstLowerCase(\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003ecolumn\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ename\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esubstring(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e#end\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#end\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e##实现动态排除列\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#set($temp = $tool.newHashSet(\u0026#34;testCreateTime\u0026#34;, \u0026#34;otherColumn\u0026#34;))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#foreach($item in $temp)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e#set($newList = $tool.newArrayList())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e#foreach($column in $tableInfo.fullColumn)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e#if($column.name!=$item)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e##带有反回值的方法调用时使用$tool.call来消除返回值\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003etool\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecall(\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003enewList\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eadd(\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003ecolumn))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e#end\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e#end\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e##重新保存\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003etableInfo\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esetFullColumn(\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003enewList)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#end\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e##对importList进行篡改\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#set($temp = $tool.newHashSet())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#foreach($column in $tableInfo.fullColumn)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e#if(!$column.type.startsWith(\u0026#34;java.lang.\u0026#34;))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e##带有反回值的方法调用时使用$tool.call来消除返回值\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003etool\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecall(\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003etemp\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eadd(\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003ecolumn\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etype))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e#end\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#end\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e##覆盖\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#set($importList = $temp)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch4 id=\"autoimport\"\u003eautoimport\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e##自动导入包（仅导入实体属性需要的包，通常用于实体类）\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e#foreach($import in $importList)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport $!import;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e#end\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"IDEA+EasyCode实现自动生成代码"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Gist List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://isyuanpeng.github.io/posts/tech/markdown-syntax/","summary":"\u003cp\u003eThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\u003c/p\u003e","title":"Markdown Syntax Guide"},{"content":"关于我 袁朋，wlmq程序员\n","permalink":"https://isyuanpeng.github.io/about/","summary":"\u003ch1 id=\"关于我\"\u003e关于我\u003c/h1\u003e\n\u003cp\u003e袁朋，wlmq程序员\u003c/p\u003e","title":""},{"content":"2022-12-10分享 回调-协程-观察者模式-SVN分支管理-缓存思考 最近开发Android中遇到的一些技术点的总结。\n回调 同步 我们比较熟悉的编程模式就是同步，调用A函数后，等待A函数结束后返回结果给B函数进行处理。\n1 2 3 res = request() handle(res) other() 这就是函数的同步调用，顺序执行。handle(res)的调用必须等待request()的完成。\n异步 针对上面的例子，由于request请求返回的不可预见性，我们不想去等待request()的返回，直接去调用other()，这就是异步。\n异步最常见的案例就是回调函数。\n回调 那么对于异步的任务来说，我们想让request()请求完成后，直接去调用handle(res)方法，这时候就可以用到回调函数。\n1 2 request(handle) other() 回调就是A函数和B函数，在A的某一个环节需要B自己告诉A怎么做，这就是回调。例如去商店里买东西，暂时缺货，留下电话号码就是一个回调函数，东西来货了，店员打电话通知就是一个调用回调函数。\n最经典的一个理解就是 don\u0026rsquo;t call me, I\u0026rsquo;ll call you.\n实际案例 在Android开发中，大量使用到了回调函数，比较经典的案例就是网络请求的调用。app作为一个进程存在于Android系统中，其可以存在多个线程，其中有一个主线程，也叫UI线程负责整个app的UI绘制。那么对于UI线程来说，一旦存在耗时操作，如网络请求调用，那么UI线程就会被阻塞，导致UI的绘制停滞。\n所以在UI线程中，不能有耗时的操作出现，那么上述的回调函数就可以很好的解决这个问题。\n首先我们定义一个回调函数的接口，这个接口定义在请求完成后需要做的操作。 1 2 3 4 5 6 7 8 9 10 11 12 public interface ICallBack { /** * call it when request success */ void onSuccess(); /** * call it when request fail */ void onFail(); } 其次我们定义好请求的方法，并且在传参中加入上面定义好的回调接口。 1 2 3 4 5 6 7 8 9 10 11 12 13 public void call(String url, Map\u0026lt;String, String\u0026gt; params, final ICallBack callBack) { // call request and use the callback to resolve result boolean isSuccess = request(url, params); if (isSuccess) { callBack.onSuccess(); } else { callBack.onFail(); } } public boolean request(String url, Map\u0026lt;String, String\u0026gt; params) { return true; } 最终我们在执行请求的同时去补全我们的回调逻辑 1 2 3 4 5 6 7 8 9 10 11 12 13 public void realCall() { call(\u0026#34;\u0026#34;, null, new ICallBack() { @Override public void onSuccess() { // success } @Override public void onFail() { // fail } }); } 协程 回调解决了异步调用的问题，但是异步回调同样存在问题，原本统一的逻辑流拆分开了，有可能会产生回调地狱的现象，毁掉里面嵌套回调。同时上下文也在一直改变了，需要去手动维护上下文，也就是手动维护状态。\n1 2 state = 1 request(handle) 1 2 def handle()： // 如果想用state 需要手动维护一个全局的state 除此之外，无论是代码的阅读还是后期维护的复杂度都要比同步要高。\n如果既不想要阻塞，又想要逻辑流的统一，我们可以使用协程。\n我们都知道线程，在实际的开发中也经常用多线程，线程是操作系统的资源，调度也是由操作系统来完成的。\n协程是比线程更细粒度的调度单位，可以理解为一个任务，一个人干了百分之二十，然后去干其它任务，其它任务结束后，继续回来干剩余的百分之八十的任务。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 async def fun1(): print(1) await asyncio.sleep(2) print(2) async def fun2(): print(3) await asyncio.sleep(2) print(4) tasks = [ asyncio.ensure_future( fun1() ), asyncio.ensure_future( fun2() ) ] loop = asyncio.get_event_loop() loop.run_until_complete(asyncio.wait(tasks)) 目前，Python，Kotlin，JS，Go等语言都支持协程，Java19中也提供了虚拟线程的功能。\n观察者模式 在Android开发中，观察者模式是比较常见的一种设计模式。\n观察者模式是一种行为设计模式， 允许你定义一种订阅机制， 可在对象事件发生时通知多个 “观察” 该对象的其他对象。https://refactoringguru.cn/design-patterns/observer\n具体代码实现:\njava.util里已经完成了观察者模式。\nObservable: 被观察者，管理观察者，并给观察者发送消息通知改变 Observer: 观察者，被观察者发送通知给观察者，观察者进行改变 实际应用 Android广播机制的实现，定义广播，注册广播的接受者，当有广播发送的时候，推送给所有的接收者。 Android回调接口的实现，只有一个观察者的观察者模式。 Java案例 被观察者消费一份数据，如果有多个业务需要的话，分发给所有的观察者。\n责任链模式案例 使用阈值校验健康码，核酸，体温等。如果使用正常逻辑代码编写，情况可能会是下面这样:\n1 2 3 4 5 6 7 if (HealCode.isOk()) { if (Nucliec.isOk()) { if (Temperature.isOk()) { // something } } } 这样的代码比较直观，能够一眼看出来意图。但是后期如果在增加新的条件，那么就可能需要继续进行嵌套if，维护成本大大增加，这种情况下也可以使用责任链模式去校验，如果某个条件不成立，则退出判断。\nSVN分支管理 在写数字哨兵联通版的时候遇到这样一个svn的使用问题，现场已经存在一个稳定的开发分支，当前提出来要进行开发人脸的版本，那么如果我继续在当前开发分支上进行开发，那么后续如果现场有问题需要修改，则需要大量注释当前开发的人脸的版本。势必会在效率和准确度方面存在一些问题。\n这个时候就可以尝试利用和git一样的分支管理，svn的分支和git的分支类似，拥有一个类似于master分支的trunk分支，作为主分支，可以在主分支上拉branches, 作为开发分支，在开发完毕后，可以将开发分支的代码合并到主分支上。\n缓存的一些尝试和思考 业务上经常需要缓存数据，基本上都是点位信息，一般都是直接放到内存中，然后加定时任务。目前我感觉主要有以下几点不便：\n定时任务更新需要手动触发，可以在定制任务上写接口，技术操作不便 数据在内存中，可见性较低 维护的话，缺少某一类数据需要重新复制粘贴 ","permalink":"https://isyuanpeng.github.io/posts/tech/2022-12-09share/","summary":"\u003ch1 id=\"2022-12-10分享-回调-协程-观察者模式-svn分支管理-缓存思考\"\u003e2022-12-10分享 回调-协程-观察者模式-SVN分支管理-缓存思考\u003c/h1\u003e\n\u003cp\u003e最近开发Android中遇到的一些技术点的总结。\u003c/p\u003e\n\u003ch2 id=\"回调\"\u003e回调\u003c/h2\u003e\n\u003ch3 id=\"同步\"\u003e同步\u003c/h3\u003e\n\u003cp\u003e我们比较熟悉的编程模式就是同步，调用A函数后，等待A函数结束后返回结果给B函数进行处理。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eres = request()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehandle(res)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eother()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e这就是函数的同步调用，顺序执行。handle(res)的调用必须等待request()的完成。\u003c/p\u003e\n\u003ch3 id=\"异步\"\u003e异步\u003c/h3\u003e\n\u003cp\u003e针对上面的例子，由于request请求返回的不可预见性，我们不想去等待request()的返回，直接去调用other()，这就是异步。\u003c/p\u003e\n\u003cp\u003e异步最常见的案例就是回调函数。\u003c/p\u003e\n\u003ch3 id=\"回调-1\"\u003e回调\u003c/h3\u003e\n\u003cp\u003e那么对于异步的任务来说，我们想让request()请求完成后，直接去调用handle(res)方法，这时候就可以用到回调函数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erequest(handle)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eother()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e回调就是A函数和B函数，在A的某一个环节需要B自己告诉A怎么做，这就是回调。例如去商店里买东西，暂时缺货，留下电话号码就是一个回调函数，东西来货了，店员打电话通知就是一个调用回调函数。\u003c/p\u003e\n\u003cp\u003e最经典的一个理解就是 don\u0026rsquo;t call me, I\u0026rsquo;ll call you.\u003c/p\u003e\n\u003ch3 id=\"实际案例\"\u003e实际案例\u003c/h3\u003e\n\u003cp\u003e在Android开发中，大量使用到了回调函数，比较经典的案例就是网络请求的调用。app作为一个进程存在于Android系统中，其可以存在多个线程，其中有一个主线程，也叫UI线程负责整个app的UI绘制。那么对于UI线程来说，一旦存在耗时操作，如网络请求调用，那么UI线程就会被阻塞，导致UI的绘制停滞。\u003c/p\u003e\n\u003cp\u003e所以在UI线程中，不能有耗时的操作出现，那么上述的回调函数就可以很好的解决这个问题。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e首先我们定义一个回调函数的接口，这个接口定义在请求完成后需要做的操作。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epublic interface ICallBack {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    /**\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * call it when request success\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     */\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    void onSuccess();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    /**\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     * call it when request fail\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     */\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    void onFail();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e其次我们定义好请求的方法，并且在传参中加入上面定义好的回调接口。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    public void call(String url, Map\u0026lt;String, String\u0026gt; params, final ICallBack callBack) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        // call request and use the callback to resolve result\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        boolean isSuccess = request(url, params);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        if (isSuccess) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            callBack.onSuccess();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        } else {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            callBack.onFail();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    public boolean request(String url, Map\u0026lt;String, String\u0026gt; params) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        return true;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e最终我们在执行请求的同时去补全我们的回调逻辑\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    public void realCall() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        call(\u0026#34;\u0026#34;, null, new ICallBack() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            public void onSuccess() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                // success\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            public void onFail() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                // fail\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"协程\"\u003e协程\u003c/h2\u003e\n\u003cp\u003e回调解决了异步调用的问题，但是异步回调同样存在问题，原本统一的逻辑流拆分开了，有可能会产生回调地狱的现象，毁掉里面嵌套回调。同时上下文也在一直改变了，需要去手动维护上下文，也就是手动维护状态。\u003c/p\u003e","title":""},{"content":"","permalink":"https://isyuanpeng.github.io/series/","summary":"","title":"Series"}]